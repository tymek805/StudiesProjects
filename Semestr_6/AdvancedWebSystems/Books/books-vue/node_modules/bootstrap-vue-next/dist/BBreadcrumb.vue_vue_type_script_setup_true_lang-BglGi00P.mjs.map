{"version":3,"file":"BBreadcrumb.vue_vue_type_script_setup_true_lang-BglGi00P.mjs","sources":["../src/components/BBreadcrumb/BBreadcrumbItem.vue","../src/components/BBreadcrumb/BBreadcrumb.vue"],"sourcesContent":["<template>\n  <li class=\"breadcrumb-item\" :class=\"computedClasses\">\n    <component\n      :is=\"computedTag\"\n      :aria-current=\"computedAriaCurrent\"\n      v-bind=\"computedLinkProps\"\n      @click=\"clicked\"\n    >\n      <slot>\n        {{ props.text }}\n      </slot>\n    </component>\n  </li>\n</template>\n\n<script setup lang=\"ts\">\nimport {pick} from '../../utils/object'\nimport {computed} from 'vue'\nimport BLink from '../BLink/BLink.vue'\nimport type {BBreadcrumbItemProps} from '../../types/ComponentProps'\nimport {useDefaults} from '../../composables/useDefaults'\n\ndefineSlots<{\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  default?: (props: Record<string, never>) => any\n}>()\n\nconst _props = withDefaults(defineProps<BBreadcrumbItemProps>(), {\n  ariaCurrent: 'location',\n  text: undefined,\n  // Link props\n  active: false, // Why is this active: false?\n  // All others use defaults\n  activeClass: undefined,\n  disabled: undefined,\n  exactActiveClass: undefined,\n  href: undefined,\n  icon: undefined,\n  opacity: undefined,\n  opacityHover: undefined,\n  stretched: false,\n  rel: undefined,\n  replace: undefined,\n  routerComponentName: undefined,\n  routerTag: undefined,\n  target: undefined,\n  to: undefined,\n  underlineOffset: undefined,\n  underlineOffsetHover: undefined,\n  underlineOpacity: undefined,\n  underlineOpacityHover: undefined,\n  underlineVariant: undefined,\n  variant: undefined,\n  // End link props\n})\nconst props = useDefaults(_props, 'BBreadcrumbItem')\n\nconst emit = defineEmits<{\n  click: [value: MouseEvent]\n}>()\n\nconst computedClasses = computed(() => ({\n  active: props.active,\n}))\n\nconst computedTag = computed(() => (props.active ? 'span' : BLink))\n\nconst computedAriaCurrent = computed(() => (props.active ? props.ariaCurrent : undefined))\n\nconst computedLinkProps = computed(() =>\n  computedTag.value !== 'span'\n    ? pick(props, [\n        'active',\n        'activeClass',\n        'append',\n        'disabled',\n        'href',\n        'rel',\n        'replace',\n        'routerComponentName',\n        'target',\n        'to',\n        'variant',\n        'opacity',\n        'opacityHover',\n        'underlineVariant',\n        'underlineOffset',\n        'underlineOffsetHover',\n        'underlineOpacity',\n        'underlineOpacityHover',\n        'icon',\n      ])\n    : {}\n)\n\nconst clicked = (e: Readonly<MouseEvent>): void => {\n  if (props.disabled || props.active) {\n    e.preventDefault()\n    e.stopImmediatePropagation()\n    return\n  }\n  if (!props.disabled) emit('click', e)\n}\n</script>\n","<template>\n  <nav aria-label=\"breadcrumb\">\n    <ol class=\"breadcrumb\">\n      <slot name=\"prepend\" />\n      <BBreadcrumbItem v-for=\"(item, i) in breadcrumbItemObjects\" :key=\"i\" v-bind=\"item\">\n        {{ item.text }}\n      </BBreadcrumbItem>\n      <slot />\n      <slot name=\"append\" />\n    </ol>\n  </nav>\n</template>\n\n<script setup lang=\"ts\">\nimport {computed} from 'vue'\nimport {useBreadcrumb} from '../../composables/useBreadcrumb'\nimport {useDefaults} from '../../composables/useDefaults'\nimport type {BBreadcrumbProps} from '../../types/ComponentProps'\nimport BBreadcrumbItem from './BBreadcrumbItem.vue'\nimport type {BreadcrumbItem} from '../../types/BreadcrumbTypes'\n\nconst _props = withDefaults(defineProps<BBreadcrumbProps>(), {items: undefined})\nconst props = useDefaults(_props, 'BBreadcrumb')\n\ndefineSlots<{\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  append?: (props: Record<string, never>) => any\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  default?: (props: Record<string, never>) => any\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  prepend?: (props: Record<string, never>) => any\n}>()\n\nconst breadcrumb = useBreadcrumb()\n\nconst breadcrumbItemObjects = computed<BreadcrumbItem[]>(() => {\n  const localItems = props.items || breadcrumb.items?.value || []\n  let activeDefined = false\n  const items = localItems.map((item, idx) => {\n    if (typeof item === 'string') {\n      item = {text: item}\n      if (idx < localItems.length - 1) item.href = '#'\n    }\n    if (item.active) activeDefined = true\n\n    // Auto-detect active by position in list\n    if (!item.active && !activeDefined) {\n      item.active = idx + 1 === localItems.length\n    }\n    return item\n  })\n  return items\n})\n</script>\n"],"names":["BLink"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2BA,UAAM,SAAS;AA4BT,UAAA,QAAQ,YAAY,QAAQ,iBAAiB;AAEnD,UAAM,OAAO;AAIP,UAAA,kBAAkB,SAAS,OAAO;AAAA,MACtC,QAAQ,MAAM;AAAA,IAAA,EACd;AAEF,UAAM,cAAc,SAAS,MAAO,MAAM,SAAS,SAASA,WAAM;AAElE,UAAM,sBAAsB,SAAS,MAAO,MAAM,SAAS,MAAM,cAAc,MAAU;AAEzF,UAAM,oBAAoB;AAAA,MAAS,MACjC,YAAY,UAAU,SAClB,KAAK,OAAO;AAAA,QACV;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,MAAA,CACD,IACD,CAAA;AAAA,IACN;AAEM,UAAA,UAAU,CAAC,MAAkC;AAC7C,UAAA,MAAM,YAAY,MAAM,QAAQ;AAClC,UAAE,eAAe;AACjB,UAAE,yBAAyB;AAC3B;AAAA,MAAA;AAEF,UAAI,CAAC,MAAM,SAAU,MAAK,SAAS,CAAC;AAAA,IACtC;;;;;;;;;;;;;;;;;;;;;;;;;ACjFA,UAAM,SAAS;AACT,UAAA,QAAQ,YAAY,QAAQ,aAAa;AAW/C,UAAM,aAAa,cAAc;AAE3B,UAAA,wBAAwB,SAA2B,MAAM;;AAC7D,YAAM,aAAa,MAAM,WAAS,gBAAW,UAAX,mBAAkB,UAAS,CAAC;AAC9D,UAAI,gBAAgB;AACpB,YAAM,QAAQ,WAAW,IAAI,CAAC,MAAM,QAAQ;AACtC,YAAA,OAAO,SAAS,UAAU;AACrB,iBAAA,EAAC,MAAM,KAAI;AAClB,cAAI,MAAM,WAAW,SAAS,QAAQ,OAAO;AAAA,QAAA;AAE3C,YAAA,KAAK,OAAwB,iBAAA;AAGjC,YAAI,CAAC,KAAK,UAAU,CAAC,eAAe;AAC7B,eAAA,SAAS,MAAM,MAAM,WAAW;AAAA,QAAA;AAEhC,eAAA;AAAA,MAAA,CACR;AACM,aAAA;AAAA,IAAA,CACR;;;;;;;;;;;;;;;;;;;;;;;"}