{"version":3,"file":"BFormCheckboxGroup.vue_vue_type_script_setup_true_lang-DdJ6ozn3.js","sources":["../src/components/BFormCheckbox/BFormCheckbox.vue","../src/components/BFormCheckbox/BFormCheckboxGroup.vue"],"sourcesContent":["<template>\n  <ConditionalWrapper\n    :skip=\"isButtonGroup\"\n    v-bind=\"props.wrapperAttrs\"\n    :class=\"computedWrapperClasses\"\n  >\n    <input\n      :id=\"computedId\"\n      ref=\"_input\"\n      v-model=\"localValue\"\n      :class=\"computedInputClasses\"\n      type=\"checkbox\"\n      :disabled=\"props.disabled || parentData?.disabled.value\"\n      :required=\"computedRequired || undefined\"\n      :name=\"props.name || parentData?.name.value\"\n      :form=\"props.form || parentData?.form.value\"\n      :aria-label=\"props.ariaLabel\"\n      :aria-labelledby=\"props.ariaLabelledby\"\n      :aria-required=\"computedRequired || undefined\"\n      :value=\"props.value\"\n      :true-value=\"props.value\"\n      :false-value=\"props.uncheckedValue\"\n      :indeterminate=\"indeterminate || undefined\"\n      v-bind=\"processedAttrs.inputAttrs\"\n    />\n    <label v-if=\"hasDefaultSlot || props.plain === false\" :for=\"computedId\" :class=\"labelClasses\">\n      <slot />\n    </label>\n  </ConditionalWrapper>\n</template>\n\n<script setup lang=\"ts\">\nimport {useFocus} from '@vueuse/core'\nimport {computed, inject, useAttrs, useTemplateRef} from 'vue'\nimport {getClasses, getInputClasses, getLabelClasses} from '../../composables/useFormCheck'\nimport type {BFormCheckboxProps} from '../../types/ComponentProps'\nimport {checkboxGroupKey} from '../../utils/keys'\nimport ConditionalWrapper from '../ConditionalWrapper.vue'\nimport {isEmptySlot} from '../../utils/dom'\nimport {useDefaults} from '../../composables/useDefaults'\nimport type {CheckboxValue} from '../../types/CheckboxTypes'\nimport {useId} from '../../composables/useId'\n\ndefineOptions({\n  inheritAttrs: false,\n})\n\nconst attrs = useAttrs()\nconst processedAttrs = computed(() => {\n  const {class: wrapperClass, ...inputAttrs} = attrs\n  return {wrapperClass, inputAttrs}\n})\n\nconst _props = withDefaults(\n  defineProps<Omit<BFormCheckboxProps, 'modelValue' | 'indeterminate'>>(),\n  {\n    wrapperAttrs: undefined,\n    inputClass: undefined,\n    ariaLabel: undefined,\n    ariaLabelledby: undefined,\n    autofocus: false,\n    button: false,\n    buttonGroup: false,\n    buttonVariant: null,\n    disabled: false,\n    form: undefined,\n    id: undefined,\n    inline: false,\n    name: undefined,\n    plain: false,\n    required: undefined,\n    reverse: false,\n    size: undefined,\n    state: null,\n    switch: false,\n    uncheckedValue: false,\n    value: true,\n  }\n)\nconst props = useDefaults(_props, 'BFormCheckbox')\n\nconst slots = defineSlots<{\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  default?: (props: Record<string, never>) => any\n}>()\n\nconst modelValue = defineModel<BFormCheckboxProps['modelValue']>({\n  default: undefined,\n})\nconst indeterminate = defineModel<Exclude<BFormCheckboxProps['indeterminate'], undefined>>(\n  'indeterminate',\n  {\n    default: false,\n  }\n)\n\nconst computedId = useId(() => props.id, 'form-check')\n\nconst parentData = inject(checkboxGroupKey, null)\n\nconst input = useTemplateRef<HTMLElement>('_input')\n\nconst {focused} = useFocus(input, {\n  initialValue: props.autofocus,\n})\n\nconst hasDefaultSlot = computed(() => !isEmptySlot(slots.default))\n\nconst localValue = computed({\n  get: () => (parentData ? parentData.modelValue.value : modelValue.value),\n  set: (newVal) => {\n    if (newVal === undefined) return\n    // Indeterminate is implicitly cleared when the checked state is changed to any value\n    //  by the user.  We reflect that here by setting our indetermiate model to false\n    //  which will emit the indeterminate event to the parent\n    indeterminate.value = false\n    if (parentData !== null && Array.isArray(newVal)) {\n      // The type cast isn't perfect. Array.isArray detects CheckboxValue.unknown[],\n      // but since it's parentData, it should always be CheckboxValue[]\n      // It doesn't quite work when props.value is an [], but this is more of a Vue issue\n      parentData.modelValue.value = newVal as CheckboxValue[]\n      return\n    }\n    modelValue.value = newVal as CheckboxValue\n  },\n})\n\nconst computedRequired = computed(\n  () => !!(props.name ?? parentData?.name.value) && (props.required || parentData?.required.value)\n)\n\nconst isButtonGroup = computed(() => props.buttonGroup || (parentData?.buttons.value ?? false))\n\nconst classesObject = computed(() => ({\n  plain: props.plain || (parentData?.plain.value ?? false),\n  button: props.button || (parentData?.buttons.value ?? false),\n  inline: props.inline || (parentData?.inline.value ?? false),\n  reverse: props.reverse || (parentData?.reverse.value ?? false),\n  switch: props.switch || (parentData?.switch.value ?? false),\n  state:\n    props.state === true || props.state === false ? props.state : (parentData?.state.value ?? null),\n  size: props.size ?? parentData?.size.value ?? 'md', // This is where the true default is made\n  buttonVariant: props.buttonVariant ?? parentData?.buttonVariant.value ?? 'secondary', // This is where the true default is made\n  hasDefaultSlot: hasDefaultSlot.value,\n}))\nconst wrapperClasses = getClasses(classesObject)\nconst computedWrapperClasses = computed(() => [\n  wrapperClasses.value,\n  processedAttrs.value.wrapperClass,\n])\nconst inputClasses = getInputClasses(classesObject)\nconst computedInputClasses = computed(() => [inputClasses.value, props.inputClass])\nconst labelClasses = getLabelClasses(classesObject)\n\ndefineExpose({\n  blur: () => {\n    focused.value = false\n  },\n  element: input,\n  focus: () => {\n    focused.value = true\n  },\n})\n</script>\n","<template>\n  <div\n    v-bind=\"computedAttrs\"\n    :id=\"computedId\"\n    ref=\"_element\"\n    role=\"group\"\n    :class=\"computedClasses\"\n    class=\"bv-no-focus-ring\"\n    tabindex=\"-1\"\n  >\n    <slot name=\"first\" />\n    <BFormCheckbox v-for=\"(item, index) in normalizeOptions\" :key=\"index\" v-bind=\"item\">\n      <slot name=\"option\" v-bind=\"item\">\n        {{ item.text }}\n      </slot>\n    </BFormCheckbox>\n    <slot />\n  </div>\n</template>\n\n<script setup lang=\"ts\">\nimport {computed, provide, toRef, useTemplateRef} from 'vue'\nimport BFormCheckbox from './BFormCheckbox.vue'\nimport {checkboxGroupKey} from '../../utils/keys'\nimport {useFocus} from '@vueuse/core'\nimport type {BFormCheckboxGroupProps} from '../../types/ComponentProps'\nimport {useDefaults} from '../../composables/useDefaults'\nimport {useId} from '../../composables/useId'\nimport {getGroupAttr, getGroupClasses} from '../../composables/useFormCheck'\n\nconst _props = withDefaults(defineProps<Omit<BFormCheckboxGroupProps, 'modelValue'>>(), {\n  ariaInvalid: undefined,\n  autofocus: false,\n  buttonVariant: 'secondary',\n  buttons: false,\n  disabled: false,\n  disabledField: 'disabled',\n  form: undefined,\n  id: undefined,\n  name: undefined,\n  options: () => [],\n  plain: false,\n  required: false,\n  reverse: false,\n  size: 'md',\n  stacked: false,\n  state: null,\n  switches: false,\n  textField: 'text',\n  validated: false,\n  valueField: 'value',\n})\nconst props = useDefaults(_props, 'BFormCheckboxGroup')\n\ndefineSlots<{\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  default?: (props: Record<string, never>) => any\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  first?: (props: Record<string, never>) => any\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  option: (props: Record<string, unknown>) => any\n}>()\n\nconst modelValue = defineModel<Exclude<BFormCheckboxGroupProps['modelValue'], undefined>>({\n  default: () => [],\n})\n\nconst computedId = useId(() => props.id, 'checkbox')\nconst computedName = useId(() => props.name, 'checkbox')\n\nconst element = useTemplateRef<HTMLElement>('_element')\n\nconst {focused} = useFocus(element, {\n  initialValue: props.autofocus,\n})\n\nprovide(checkboxGroupKey, {\n  modelValue,\n  switch: toRef(() => props.switches),\n  buttonVariant: toRef(() => props.buttonVariant),\n  form: toRef(() => props.form),\n  name: computedName,\n  state: toRef(() => props.state),\n  plain: toRef(() => props.plain),\n  size: toRef(() => props.size),\n  inline: toRef(() => !props.stacked),\n  reverse: toRef(() => props.reverse),\n  required: toRef(() => props.required),\n  buttons: toRef(() => props.buttons),\n  disabled: toRef(() => props.disabled),\n})\n\nconst normalizeOptions = computed(() =>\n  props.options.map((el) =>\n    typeof el === 'string' || typeof el === 'number'\n      ? {\n          value: el,\n          disabled: props.disabled,\n          text: el.toString(),\n        }\n      : {\n          ...el,\n          value: el[props.valueField] as string | number | undefined,\n          disabled: el[props.disabledField] as boolean | undefined,\n          text: el[props.textField] as string | undefined,\n        }\n  )\n)\n\nconst classesObject = computed(() => ({\n  required: props.required,\n  ariaInvalid: props.ariaInvalid,\n  state: props.state,\n  validated: props.validated,\n  buttons: props.buttons,\n  stacked: props.stacked,\n  size: props.size,\n}))\nconst computedAttrs = getGroupAttr(classesObject)\nconst computedClasses = getGroupClasses(classesObject)\n\ndefineExpose({\n  blur: () => {\n    focused.value = false\n  },\n  focus: () => {\n    focused.value = true\n  },\n})\n</script>\n"],"names":["attrs","useAttrs","processedAttrs","computed","class","wrapperClass","inputAttrs","_props","__props","props","useDefaults","slots","_useSlots","modelValue","_useModel","indeterminate","useModel","computedId","useId","id","parentData","inject","checkboxGroupKey","input","useTemplateRef","focused","useFocus","initialValue","autofocus","hasDefaultSlot","isEmptySlot","default","localValue","get","value","set","newVal","Array","isArray","computedRequired","name","required","isButtonGroup","buttonGroup","buttons","classesObject","plain","button","inline","reverse","switch","state","size","buttonVariant","wrapperClasses","getClasses","computedWrapperClasses","inputClasses","getInputClasses","computedInputClasses","inputClass","labelClasses","getLabelClasses","__expose","blur","element","focus","computedName","provide","toRef","switches","form","stacked","disabled","normalizeOptions","options","map","el","text","toString","valueField","disabledField","textField","ariaInvalid","validated","computedAttrs","getGroupAttr","computedClasses","getGroupClasses"],"mappings":"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"}