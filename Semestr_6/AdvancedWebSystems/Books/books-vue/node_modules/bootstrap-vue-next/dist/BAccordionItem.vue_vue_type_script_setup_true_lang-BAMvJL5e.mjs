import { defineComponent, mergeModels, useModel, computed, provide, toRef, readonly, createElementBlock, openBlock, normalizeClass, unref, renderSlot, useAttrs, inject, onMounted, nextTick, watch, mergeProps, createVNode, withCtx, createElementVNode, createBlock, resolveDynamicComponent, createTextVNode, toDisplayString } from "vue";
import { e as accordionInjectionKey } from "./keys-D3gOZjD-.mjs";
import { u as useId } from "./useId-BzCLXIGF.mjs";
import { u as useDefaults } from "./useDefaults-DANje4tM.mjs";
import { _ as _sfc_main$2 } from "./BCollapse.vue_vue_type_script_setup_true_lang-GJS1dKK5.mjs";
const _hoisted_1$1 = ["id"];
const _sfc_main$1 = /* @__PURE__ */ defineComponent({
  __name: "BAccordion",
  props: /* @__PURE__ */ mergeModels({
    flush: { type: Boolean, default: false },
    free: { type: Boolean, default: false },
    id: { default: void 0 },
    initialAnimation: { type: Boolean, default: false },
    lazy: { type: Boolean, default: false },
    unmountLazy: { type: Boolean, default: false }
  }, {
    "modelValue": {
      default: void 0
    },
    "modelModifiers": {}
  }),
  emits: ["update:modelValue"],
  setup(__props) {
    const _props = __props;
    const props = useDefaults(_props, "BAccordion");
    const modelValue = useModel(__props, "modelValue");
    const computedId = useId(() => props.id, "accordion");
    const computedClasses = computed(() => ({
      "accordion-flush": props.flush
    }));
    provide(accordionInjectionKey, {
      openItem: readonly(modelValue),
      free: toRef(() => props.free),
      initialAnimation: toRef(() => props.initialAnimation),
      lazy: toRef(() => props.lazy),
      unmountLazy: toRef(() => props.unmountLazy),
      setOpenItem: (id) => {
        modelValue.value = id;
      }
    });
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("div", {
        id: unref(computedId),
        class: normalizeClass(["accordion", computedClasses.value])
      }, [
        renderSlot(_ctx.$slots, "default")
      ], 10, _hoisted_1$1);
    };
  }
});
const _hoisted_1 = ["aria-expanded", "aria-controls", "onClick"];
const _sfc_main = /* @__PURE__ */ defineComponent({
  ...{
    inheritAttrs: false
  },
  __name: "BAccordionItem",
  props: /* @__PURE__ */ mergeModels({
    bodyAttrs: { default: void 0 },
    bodyClass: { default: void 0 },
    buttonAttrs: { default: void 0 },
    buttonClass: { default: void 0 },
    collapseClass: { default: void 0 },
    headerAttrs: { default: void 0 },
    headerClass: { default: void 0 },
    headerTag: { default: "h2" },
    horizontal: { type: Boolean, default: void 0 },
    id: { default: void 0 },
    isNav: { type: Boolean, default: void 0 },
    lazy: { type: Boolean, default: false },
    unmountLazy: { type: Boolean, default: false },
    tag: { default: void 0 },
    title: { default: void 0 },
    show: { type: Boolean, default: void 0 },
    visible: { type: Boolean, default: false },
    wrapperAttrs: { default: void 0 }
  }, {
    "modelValue": { type: Boolean, ...{
      default: false
    } },
    "modelModifiers": {}
  }),
  emits: /* @__PURE__ */ mergeModels(["hide", "hide-prevented", "hidden", "show", "show-prevented", "shown", "toggle", "toggle-prevented"], ["update:modelValue"]),
  setup(__props, { emit: __emit }) {
    const attrs = useAttrs();
    const processedAttrs = computed(() => {
      const { class: wrapperClass, ...collapseAttrs } = attrs;
      return { wrapperClass, collapseAttrs };
    });
    const _props = __props;
    const props = useDefaults(_props, "BAccordionItem");
    const emit = __emit;
    const parentData = inject(accordionInjectionKey, null);
    const computedId = useId(() => props.id, "accordion_item");
    const modelValue = useModel(__props, "modelValue");
    modelValue.value = (parentData == null ? void 0 : parentData.openItem.value) === computedId.value && !(parentData == null ? void 0 : parentData.initialAnimation.value);
    if (modelValue.value && !(parentData == null ? void 0 : parentData.free.value)) {
      parentData == null ? void 0 : parentData.setOpenItem(computedId.value);
    }
    onMounted(() => {
      if (!modelValue.value && (parentData == null ? void 0 : parentData.openItem.value) === computedId.value) {
        nextTick(() => {
          modelValue.value = true;
        });
      }
    });
    watch(
      () => parentData == null ? void 0 : parentData.openItem.value,
      () => modelValue.value = (parentData == null ? void 0 : parentData.openItem.value) === computedId.value && !(parentData == null ? void 0 : parentData.free.value)
    );
    watch(modelValue, () => {
      if (modelValue.value && !(parentData == null ? void 0 : parentData.free.value)) parentData == null ? void 0 : parentData.setOpenItem(computedId.value);
    });
    return (_ctx, _cache) => {
      var _a, _b;
      return openBlock(), createElementBlock("div", mergeProps({ class: "accordion-item" }, unref(props).wrapperAttrs, {
        class: processedAttrs.value.wrapperClass
      }), [
        createVNode(_sfc_main$2, mergeProps({
          id: unref(computedId),
          modelValue: modelValue.value,
          "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => modelValue.value = $event),
          class: ["accordion-collapse", unref(props).collapseClass],
          "aria-labelledby": `${unref(computedId)}-heading`
        }, processedAttrs.value.collapseAttrs, {
          tag: unref(props).tag,
          show: unref(props).show,
          horizontal: unref(props).horizontal,
          visible: unref(props).visible,
          "is-nav": unref(props).isNav,
          lazy: unref(props).lazy || ((_a = unref(parentData)) == null ? void 0 : _a.lazy.value),
          "unmount-lazy": unref(props).unmountLazy || ((_b = unref(parentData)) == null ? void 0 : _b.unmountLazy.value),
          onShow: _cache[1] || (_cache[1] = ($event) => emit("show", $event)),
          onShown: _cache[2] || (_cache[2] = ($event) => emit("shown", $event)),
          onHide: _cache[3] || (_cache[3] = ($event) => emit("hide", $event)),
          onHidden: _cache[4] || (_cache[4] = ($event) => emit("hidden", $event)),
          onHidePrevented: _cache[5] || (_cache[5] = ($event) => emit("hide-prevented", $event)),
          onShowPrevented: _cache[6] || (_cache[6] = ($event) => emit("show-prevented", $event)),
          onTogglePrevented: _cache[7] || (_cache[7] = ($event) => emit("toggle-prevented", $event)),
          onToggle: _cache[8] || (_cache[8] = ($event) => emit("toggle", $event))
        }), {
          header: withCtx(({ visible: toggleVisible, toggle: slotToggle }) => [
            (openBlock(), createBlock(resolveDynamicComponent(unref(props).headerTag), mergeProps({
              id: `${unref(computedId)}-heading`,
              class: ["accordion-header", unref(props).headerClass]
            }, unref(props).headerAttrs), {
              default: withCtx(() => [
                createElementVNode("button", mergeProps({ class: "accordion-button" }, unref(props).buttonAttrs, {
                  class: [{ collapsed: !toggleVisible }, unref(props).buttonClass],
                  type: "button",
                  "aria-expanded": toggleVisible ? "true" : "false",
                  "aria-controls": unref(computedId),
                  onClick: slotToggle
                }), [
                  renderSlot(_ctx.$slots, "title", {}, () => [
                    createTextVNode(toDisplayString(unref(props).title), 1)
                  ])
                ], 16, _hoisted_1)
              ]),
              _: 2
            }, 1040, ["id", "class"]))
          ]),
          default: withCtx(() => [
            createElementVNode("div", mergeProps({ class: "accordion-body" }, unref(props).bodyAttrs, {
              class: unref(props).bodyClass
            }), [
              renderSlot(_ctx.$slots, "default")
            ], 16)
          ]),
          _: 3
        }, 16, ["id", "modelValue", "class", "aria-labelledby", "tag", "show", "horizontal", "visible", "is-nav", "lazy", "unmount-lazy"])
      ], 16);
    };
  }
});
export {
  _sfc_main$1 as _,
  _sfc_main as a
};
//# sourceMappingURL=BAccordionItem.vue_vue_type_script_setup_true_lang-BAMvJL5e.mjs.map
