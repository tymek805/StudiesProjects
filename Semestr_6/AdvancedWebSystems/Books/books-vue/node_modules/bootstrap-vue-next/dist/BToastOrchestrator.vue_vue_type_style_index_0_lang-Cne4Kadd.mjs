import { defineComponent, mergeModels, useSlots, useTemplateRef, useModel, computed, watchEffect, watch, createBlock, createCommentVNode, unref, openBlock, Transition, mergeProps, withCtx, withDirectives, createElementVNode, normalizeClass, resolveDynamicComponent, renderSlot, toDisplayString, createTextVNode, vShow, createElementBlock, Fragment, renderList, createVNode, TransitionGroup } from "vue";
import { u as useDefaults } from "./useDefaults-DANje4tM.mjs";
import { u as useBLinkHelper, _ as _sfc_main$2 } from "./BLink.vue_vue_type_script_setup_true_lang-CinzoAgQ.mjs";
import { _ as _sfc_main$3 } from "./BCloseButton.vue_vue_type_script_setup_true_lang-Dh0Odbqa.mjs";
import { _ as _sfc_main$4 } from "./BProgress.vue_vue_type_script_setup_true_lang-csJop4n-.mjs";
import { u as useCountdown, a as useCountdownHover } from "./useCountdownHover-BZ6NmVEL.mjs";
import { u as useColorVariantClasses } from "./useColorVariantClasses-ZDE19TZw.mjs";
import { u as useId } from "./useId-BzCLXIGF.mjs";
import { u as useShowHide } from "./useShowHide-DHtnuxfQ.mjs";
import { _ as _export_sfc } from "./_plugin-vue_export-helper-1tPrXgE0.mjs";
import { _ as _sfc_main$5 } from "./ConditionalTeleport.vue_vue_type_script_lang-2PJ2jBTg.mjs";
import { useToastController } from "./src/composables/useToastController/index.mjs";
const _hoisted_1 = ["id", "role", "aria-live", "aria-atomic"];
const _hoisted_2 = { class: "me-auto" };
const _sfc_main$1 = /* @__PURE__ */ defineComponent({
  __name: "BToast",
  props: /* @__PURE__ */ mergeModels({
    body: { default: void 0 },
    bodyClass: { default: void 0 },
    headerClass: { default: void 0 },
    headerTag: { default: "div" },
    id: { default: void 0 },
    interval: { default: "requestAnimationFrame" },
    isStatus: { type: Boolean, default: false },
    noCloseButton: { type: Boolean, default: false },
    noHoverPause: { type: Boolean, default: false },
    noResumeOnHoverLeave: { type: Boolean, default: false },
    progressProps: { default: void 0 },
    showOnPause: { type: Boolean, default: true },
    solid: { type: Boolean, default: false },
    title: { default: void 0 },
    toastClass: { default: void 0 },
    variant: { default: void 0 },
    bgVariant: { default: null },
    textVariant: { default: null },
    active: { type: Boolean, default: void 0 },
    activeClass: { default: void 0 },
    disabled: { type: Boolean, default: void 0 },
    exactActiveClass: { default: void 0 },
    href: { default: void 0 },
    icon: { type: Boolean, default: void 0 },
    noRel: { type: Boolean, default: void 0 },
    opacity: { default: void 0 },
    opacityHover: { default: void 0 },
    prefetch: { type: Boolean },
    prefetchOn: {},
    noPrefetch: { type: Boolean },
    prefetchedClass: {},
    rel: { default: void 0 },
    replace: { type: Boolean, default: void 0 },
    routerComponentName: { default: void 0 },
    stretched: { type: Boolean, default: false },
    target: { default: void 0 },
    to: { default: void 0 },
    underlineOffset: { default: void 0 },
    underlineOffsetHover: { default: void 0 },
    underlineOpacity: { default: void 0 },
    underlineOpacityHover: { default: void 0 },
    underlineVariant: { default: void 0 },
    initialAnimation: { type: Boolean, default: false },
    noAnimation: { type: Boolean },
    noFade: { type: Boolean, default: false },
    lazy: { type: Boolean, default: false },
    unmountLazy: { type: Boolean, default: false },
    show: { type: Boolean, default: false },
    transProps: { default: void 0 },
    visible: { type: Boolean, default: false }
  }, {
    "modelValue": { type: [Boolean, Number], ...{ default: false } },
    "modelModifiers": {}
  }),
  emits: /* @__PURE__ */ mergeModels(["close", "close-countdown", "hide", "hide-prevented", "hidden", "show", "show-prevented", "shown", "toggle", "toggle-prevented"], ["update:modelValue"]),
  setup(__props, { expose: __expose, emit: __emit }) {
    const _props = __props;
    const props = useDefaults(_props, "BToast");
    const emit = __emit;
    const slots = useSlots();
    const element = useTemplateRef("_element");
    const modelValue = useModel(__props, "modelValue");
    const { computedLink, computedLinkProps } = useBLinkHelper(props);
    const computedId = useId(() => props.id, "toast");
    const {
      showRef,
      renderRef,
      hide,
      toggle,
      show,
      buildTriggerableEvent,
      computedNoAnimation,
      isVisible,
      transitionProps,
      contentShowing
    } = useShowHide(modelValue, props, emit, element, computedId);
    const countdownLength = computed(
      () => typeof modelValue.value === "boolean" ? 0 : modelValue.value
    );
    const {
      isActive,
      pause,
      restart,
      resume,
      stop,
      isPaused,
      value: remainingMs
    } = useCountdown(countdownLength, props.interval, {
      immediate: typeof modelValue.value === "number" && !!modelValue.value
    });
    useCountdownHover(
      element,
      computed(() => ({
        noHoverPause: props.noHoverPause || typeof modelValue.value !== "number",
        noResumeOnHoverLeave: props.noResumeOnHoverLeave || typeof modelValue.value !== "number",
        modelValueIgnoresHover: typeof modelValue.value === "boolean"
      })),
      { pause, resume }
    );
    watchEffect(() => {
      emit("close-countdown", remainingMs.value);
    });
    const computedTag = computed(() => computedLink.value ? _sfc_main$2 : "div");
    const isToastVisible = computed(
      () => showRef.value || isActive.value || props.showOnPause && isPaused.value
    );
    const colorClasses = useColorVariantClasses(props);
    const computedClasses = computed(() => [
      colorClasses.value,
      {
        show: isVisible.value,
        fade: !computedNoAnimation.value
      }
    ]);
    watch(modelValue, (newValue) => {
      if (typeof newValue === "number") {
        const event = buildTriggerableEvent("show", { cancelable: true, trigger: "model" });
        emit("show", event);
        if (event.defaultPrevented) {
          emit("show-prevented", buildTriggerableEvent("show-prevented"));
        } else {
          restart();
        }
      }
    });
    watch(isActive, (newValue) => {
      if (newValue === false && isPaused.value === false) {
        hide();
        modelValue.value = 0;
        stop();
      }
    });
    __expose({
      show,
      hide,
      toggle,
      pause,
      restart,
      resume,
      stop
    });
    return (_ctx, _cache) => {
      return unref(renderRef) || unref(contentShowing) ? (openBlock(), createBlock(Transition, mergeProps({ key: 0 }, unref(transitionProps), {
        appear: !!modelValue.value || unref(props).visible
      }), {
        default: withCtx(() => [
          withDirectives(createElementVNode("div", {
            id: unref(props).id,
            ref: "_element",
            class: normalizeClass(["toast", [unref(props).toastClass, computedClasses.value]]),
            tabindex: "0",
            role: !isToastVisible.value ? void 0 : unref(props).isStatus ? "status" : "alert",
            "aria-live": !isToastVisible.value ? void 0 : unref(props).isStatus ? "polite" : "assertive",
            "aria-atomic": !isToastVisible.value ? void 0 : true
          }, [
            unref(contentShowing) && (slots.title || unref(props).title) ? (openBlock(), createBlock(resolveDynamicComponent(unref(props).headerTag), {
              key: 0,
              class: normalizeClass(["toast-header", unref(props).headerClass])
            }, {
              default: withCtx(() => [
                renderSlot(_ctx.$slots, "title", { hide: unref(hide) }, () => [
                  createElementVNode("strong", _hoisted_2, toDisplayString(unref(props).title), 1)
                ], true),
                !unref(props).noCloseButton ? (openBlock(), createBlock(_sfc_main$3, {
                  key: 0,
                  onClick: _cache[0] || (_cache[0] = ($event) => unref(hide)("close"))
                })) : createCommentVNode("", true)
              ]),
              _: 3
            }, 8, ["class"])) : createCommentVNode("", true),
            unref(contentShowing) && (slots.default || unref(props).body) ? (openBlock(), createBlock(resolveDynamicComponent(computedTag.value), mergeProps({
              key: 1,
              class: ["toast-body", unref(props).bodyClass],
              style: { "display": "block" }
            }, unref(computedLinkProps), {
              onClick: _cache[1] || (_cache[1] = ($event) => unref(computedLink) ? unref(hide)() : () => {
              })
            }), {
              default: withCtx(() => [
                renderSlot(_ctx.$slots, "default", { hide: unref(hide) }, () => [
                  createTextVNode(toDisplayString(unref(props).body), 1)
                ], true)
              ]),
              _: 3
            }, 16, ["class"])) : createCommentVNode("", true),
            typeof modelValue.value === "number" && unref(props).progressProps !== void 0 ? (openBlock(), createBlock(_sfc_main$4, {
              key: 2,
              animated: unref(props).progressProps.animated,
              precision: unref(props).progressProps.precision,
              "show-progress": unref(props).progressProps.showProgress,
              "show-value": unref(props).progressProps.showValue,
              striped: unref(props).progressProps.striped,
              variant: unref(props).progressProps.variant,
              max: modelValue.value,
              value: unref(remainingMs),
              height: "4px"
            }, null, 8, ["animated", "precision", "show-progress", "show-value", "striped", "variant", "max", "value"])) : createCommentVNode("", true)
          ], 10, _hoisted_1), [
            [vShow, isToastVisible.value]
          ])
        ]),
        _: 3
      }, 16, ["appear"])) : createCommentVNode("", true);
    };
  }
});
const BToast = /* @__PURE__ */ _export_sfc(_sfc_main$1, [["__scopeId", "data-v-eeb0e3de"]]);
const positionClasses = {
  "top-start": "top-0 start-0",
  "top-center": "top-0 start-50 translate-middle-x",
  "top-end": "top-0 end-0",
  "middle-start": "top-50 start-0 translate-middle-y",
  "middle-center": "top-50 start-50 translate-middle",
  "middle-end": "top-50 end-0 translate-middle-y",
  "bottom-start": "bottom-0 start-0",
  "bottom-center": "bottom-0 start-50 translate-middle-x",
  "bottom-end": "bottom-0 end-0"
};
const _sfc_main = /* @__PURE__ */ defineComponent({
  ...{
    inheritAttrs: false
  },
  __name: "BToastOrchestrator",
  props: {
    appendToast: { type: Boolean, default: false },
    teleportDisabled: { type: Boolean, default: false },
    teleportTo: { default: "body" }
  },
  setup(__props, { expose: __expose }) {
    const _props = __props;
    const props = useDefaults(_props, "BToastOrchestrator");
    const tools = useToastController();
    watch(
      () => props.appendToast,
      (value) => {
        var _a;
        (_a = tools._setIsAppend) == null ? void 0 : _a.call(tools, value);
      },
      { immediate: true }
    );
    __expose({
      ...tools
    });
    return (_ctx, _cache) => {
      return openBlock(), createBlock(_sfc_main$5, {
        to: unref(props).teleportTo,
        disabled: unref(props).teleportDisabled
      }, {
        default: withCtx(() => [
          createElementVNode("div", mergeProps({ id: "__BVID__toaster-container" }, _ctx.$attrs), [
            (openBlock(true), createElementBlock(Fragment, null, renderList(unref(positionClasses), (value, key) => {
              return openBlock(), createElementBlock("div", {
                key,
                class: normalizeClass([value, "toast-container position-fixed p-3"])
              }, [
                createVNode(TransitionGroup, { name: "b-list" }, {
                  default: withCtx(() => {
                    var _a;
                    return [
                      (openBlock(true), createElementBlock(Fragment, null, renderList((_a = unref(tools).toasts) == null ? void 0 : _a.value.filter((el) => el.props.pos === key), (toast) => {
                        return openBlock(), createElementBlock("span", {
                          key: toast.props._self
                        }, [
                          (openBlock(), createBlock(resolveDynamicComponent(toast.component ?? BToast), mergeProps({ ref_for: true }, toast.props, {
                            "model-value": toast.props._modelValue,
                            "initial-animation": "",
                            "onUpdate:modelValue": ($event) => {
                              var _a2, _b;
                              return (_b = (_a2 = unref(tools)).leave) == null ? void 0 : _b.call(_a2, toast.props._self);
                            },
                            onHidden: ($event) => {
                              var _a2, _b;
                              return (_b = (_a2 = unref(tools)).remove) == null ? void 0 : _b.call(_a2, toast.props._self);
                            }
                          }), null, 16, ["model-value", "onUpdate:modelValue", "onHidden"]))
                        ]);
                      }), 128))
                    ];
                  }),
                  _: 2
                }, 1024)
              ], 2);
            }), 128))
          ], 16)
        ]),
        _: 1
      }, 8, ["to", "disabled"]);
    };
  }
});
export {
  BToast as B,
  _sfc_main as _
};
//# sourceMappingURL=BToastOrchestrator.vue_vue_type_style_index_0_lang-Cne4Kadd.mjs.map
