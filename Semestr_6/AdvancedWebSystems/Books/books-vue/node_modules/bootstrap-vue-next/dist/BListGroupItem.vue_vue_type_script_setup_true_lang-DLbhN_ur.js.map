{"version":3,"file":"BListGroupItem.vue_vue_type_script_setup_true_lang-DLbhN_ur.js","sources":["../src/components/BListGroup/BListGroup.vue","../src/components/BListGroup/BListGroupItem.vue"],"sourcesContent":["<template>\n  <component :is=\"computedTag\" class=\"list-group\" :class=\"computedClasses\">\n    <slot />\n  </component>\n</template>\n\n<script setup lang=\"ts\">\nimport {computed, provide, toRef} from 'vue'\nimport {listGroupInjectionKey} from '../../utils/keys'\nimport type {BListGroupProps} from '../../types/ComponentProps'\nimport {useDefaults} from '../../composables/useDefaults'\n\nconst _props = withDefaults(defineProps<BListGroupProps>(), {\n  flush: false,\n  horizontal: false,\n  numbered: false,\n  tag: 'div',\n})\nconst props = useDefaults(_props, 'BListGroup')\n\ndefineSlots<{\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  default?: (props: Record<string, never>) => any\n}>()\n\nconst computedClasses = computed(() => {\n  const horizontal = props.flush ? false : props.horizontal\n  return {\n    'list-group-flush': props.flush,\n    'list-group-horizontal': horizontal === true,\n    [`list-group-horizontal-${horizontal}`]: typeof horizontal === 'string',\n    'list-group-numbered': props.numbered,\n  }\n})\nconst computedTag = computed(() => (props.numbered === true ? 'ol' : props.tag))\n\nprovide(listGroupInjectionKey, {\n  numbered: toRef(() => props.numbered),\n})\n</script>\n","<template>\n  <component\n    :is=\"tagComputed\"\n    class=\"list-group-item\"\n    :class=\"computedClasses\"\n    :aria-current=\"props.active ? true : undefined\"\n    :aria-disabled=\"props.disabled ? true : undefined\"\n    :target=\"isLink ? props.target : undefined\"\n    :href=\"!props.button ? props.href : undefined\"\n    :to=\"!props.button ? props.to : undefined\"\n    v-bind=\"computedAttrs\"\n  >\n    <slot />\n  </component>\n</template>\n\n<script setup lang=\"ts\">\nimport {computed, inject, useAttrs} from 'vue'\nimport type {BListGroupItemProps} from '../../types/ComponentProps'\nimport {useDefaults} from '../../composables/useDefaults'\nimport BLink from '../BLink/BLink.vue'\nimport {listGroupInjectionKey} from '../../utils/keys'\nimport {useBLinkHelper} from '../../composables/useBLinkHelper'\n\nconst _props = withDefaults(defineProps<BListGroupItemProps>(), {\n  action: false,\n  button: false,\n  tag: 'div',\n  // Link props\n  active: false, // Why is this active: false?\n  // All others use defaults\n  activeClass: undefined,\n  disabled: undefined,\n  exactActiveClass: undefined,\n  href: undefined,\n  icon: undefined,\n  opacity: undefined,\n  opacityHover: undefined,\n  stretched: false,\n  rel: undefined,\n  replace: undefined,\n  routerComponentName: undefined,\n  target: undefined,\n  to: undefined,\n  underlineOffset: undefined,\n  underlineOffsetHover: undefined,\n  underlineOpacity: undefined,\n  underlineOpacityHover: undefined,\n  underlineVariant: undefined,\n  variant: undefined,\n  // End link props\n})\nconst props = useDefaults(_props, 'BListGroupItem')\n\ndefineSlots<{\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  default?: (props: Record<string, never>) => any\n}>()\n\nconst attrs = useAttrs()\n\nconst parentData = inject(listGroupInjectionKey, null)\n\nconst {computedLink} = useBLinkHelper(props)\n\nconst isLink = computed(() => !props.button && computedLink.value)\nconst tagComputed = computed(() =>\n  parentData?.numbered.value ? 'li' : props.button ? 'button' : !isLink.value ? props.tag : BLink\n)\n\nconst isAction = computed(\n  () =>\n    props.action ||\n    isLink.value ||\n    props.button ||\n    ['a', 'router-link', 'button', 'b-link'].includes(props.tag)\n)\n\nconst computedClasses = computed(() => ({\n  [`list-group-item-${props.variant}`]: props.variant !== null && props.variant !== undefined,\n  'list-group-item-action': isAction.value,\n  'active': props.active,\n  'disabled': props.disabled,\n}))\n\nconst computedAttrs = computed(() => {\n  const localAttrs = {} as {type?: string; disabled?: boolean}\n  if (props.button) {\n    if (!attrs || !attrs.type) {\n      // Add a type for button is one not provided in passed attributes\n      localAttrs.type = 'button'\n    }\n    if (props.disabled) {\n      // Set disabled attribute if button and disabled\n      localAttrs.disabled = true\n    }\n  }\n  return localAttrs\n})\n</script>\n"],"names":["_props","__props","props","useDefaults","computedClasses","computed","horizontal","flush","numbered","computedTag","tag","provide","listGroupInjectionKey","toRef","attrs","useAttrs","parentData","inject","computedLink","useBLinkHelper","isLink","button","value","tagComputed","BLink","isAction","action","includes","variant","active","disabled","computedAttrs","localAttrs","type"],"mappings":"+WAYA,MAAMA,EAASC,EAMTC,EAAQC,EAAAA,YAAYH,EAAQ,cAO5BI,EAAkBC,EAAAA,UAAS,KAC/B,MAAMC,GAAaJ,EAAMK,OAAgBL,EAAMI,WACxC,MAAA,CACL,mBAAoBJ,EAAMK,MAC1B,yBAAwC,IAAfD,EACzB,CAAC,yBAAyBA,KAAqC,iBAAfA,EAChD,sBAAuBJ,EAAMM,SAC/B,IAEIC,EAAcJ,YAAS,KAA0B,IAAnBH,EAAMM,SAAoB,KAAON,EAAMQ,aAE3EC,EAAAA,QAAQC,EAAAA,sBAAuB,CAC7BJ,SAAUK,EAAAA,OAAM,IAAMX,EAAMM,skCCb9B,MAAMR,EAASC,EA4BTC,EAAQC,EAAAA,YAAYH,EAAQ,kBAO5Bc,EAAQC,EAAAA,WAERC,EAAaC,EAAAA,OAAOL,EAAAA,sBAAuB,OAE3CM,aAACA,GAAgBC,EAAAA,eAAejB,GAEhCkB,EAASf,EAAAA,UAAS,KAAOH,EAAMmB,QAAUH,EAAaI,QACtDC,EAAclB,EAAAA,UAAS,KAC3B,MAAAW,OAAA,EAAAA,EAAYR,SAASc,OAAQ,KAAOpB,EAAMmB,OAAS,SAAYD,EAAOE,MAAoBE,EAAAA,UAAZtB,EAAMQ,MAGhFe,EAAWpB,EAAAA,UACf,IACEH,EAAMwB,QACNN,EAAOE,OACPpB,EAAMmB,QACN,CAAC,IAAK,cAAe,SAAU,UAAUM,SAASzB,EAAMQ,OAGtDN,EAAkBC,EAAAA,UAAS,KAAO,CACtC,CAAC,mBAAmBH,EAAM0B,WAA8B,OAAlB1B,EAAM0B,cAAsC,IAAlB1B,EAAM0B,QACtE,yBAA0BH,EAASH,MACnCO,OAAU3B,EAAM2B,OAChBC,SAAY5B,EAAM4B,aAGdC,EAAgB1B,EAAAA,UAAS,KAC7B,MAAM2B,EAAa,CAAC,EAWb,OAVH9B,EAAMmB,SACHP,GAAUA,EAAMmB,OAEnBD,EAAWC,KAAO,UAEhB/B,EAAM4B,WAERE,EAAWF,UAAW,IAGnBE,CAAA"}