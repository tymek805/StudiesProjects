{"version":3,"file":"useFormCheck-DLmeXWHw.js","sources":["../src/composables/useFormCheck.ts"],"sourcesContent":["import type {AriaInvalid} from '../types/AriaInvalid'\nimport {computed, type MaybeRefOrGetter, readonly, toRef, toValue} from 'vue'\nimport {useAriaInvalid} from './useAriaInvalid'\nimport {useStateClass} from './useStateClass'\nimport type {Size} from '../types/Size'\nimport type {ButtonVariant} from '../types/ColorTypes'\nimport type {ValidationState} from '../types/CommonTypes'\n\ninterface ClassesItemsInput {\n  plain?: boolean\n  button?: boolean\n  inline?: boolean\n  reverse?: boolean\n  switch?: boolean\n  size?: Size\n  hasDefaultSlot?: boolean\n}\n\nconst getClasses = (items: MaybeRefOrGetter<ClassesItemsInput>) =>\n  computed(() => {\n    const resolvedItems = toValue(items)\n    return {\n      'form-check':\n        resolvedItems.plain === false &&\n        resolvedItems.button === false &&\n        resolvedItems.hasDefaultSlot,\n      'form-check-reverse': resolvedItems.reverse === true,\n      'form-check-inline': resolvedItems.inline === true,\n      'form-switch': resolvedItems.switch === true,\n      [`form-control-${resolvedItems.size}`]:\n        resolvedItems.size !== undefined &&\n        resolvedItems.size !== 'md' &&\n        resolvedItems.button === false,\n    }\n  })\n\ninterface InputClassesItemsInput {\n  plain?: boolean\n  button?: boolean\n  state?: ValidationState\n}\n\nconst getInputClasses = (items: MaybeRefOrGetter<InputClassesItemsInput>) => {\n  const resolvedItems = readonly(toRef(items))\n\n  const stateClass = useStateClass(() => resolvedItems.value.state ?? null)\n\n  return computed(() => [\n    stateClass.value,\n    {\n      'form-check-input':\n        resolvedItems.value.plain === false && resolvedItems.value.button === false,\n      'btn-check': resolvedItems.value.button === true,\n    },\n  ])\n}\n\ninterface LabelClasesItemsInput {\n  plain?: boolean\n  button?: boolean\n  buttonVariant?: ButtonVariant | null\n  size?: Size\n}\n\nconst getLabelClasses = (items: MaybeRefOrGetter<LabelClasesItemsInput>) =>\n  computed(() => {\n    const resolvedItems = toValue(items)\n    return {\n      'form-check-label': resolvedItems.plain === false && resolvedItems.button === false,\n      'btn': resolvedItems.button === true,\n      [`btn-${resolvedItems.buttonVariant}`]:\n        resolvedItems.button === true &&\n        resolvedItems.buttonVariant !== undefined &&\n        resolvedItems.buttonVariant !== null,\n      [`btn-${resolvedItems.size}`]:\n        resolvedItems.button && resolvedItems.size && resolvedItems.size !== 'md',\n    }\n  })\n\ninterface GroupAttrItemsInput {\n  required?: boolean\n  ariaInvalid?: AriaInvalid\n  state?: ValidationState\n}\n\nconst getGroupAttr = (items: MaybeRefOrGetter<GroupAttrItemsInput>) => {\n  const resolvedItems = readonly(toRef(items))\n  const computedAriaInvalid = useAriaInvalid(\n    () => resolvedItems.value.ariaInvalid,\n    () => resolvedItems.value.state\n  )\n  return computed(() => ({\n    'aria-invalid': computedAriaInvalid.value as Exclude<AriaInvalid, ''> | undefined,\n    'aria-required': resolvedItems.value.required === true ? true : undefined,\n  }))\n}\n\ninterface GroupClassesItemsInput {\n  validated?: boolean\n  buttons?: boolean\n  stacked?: boolean\n  size?: Size\n}\n\nconst getGroupClasses = (items: MaybeRefOrGetter<GroupClassesItemsInput>) =>\n  computed(() => {\n    const resolvedItems = toValue(items)\n    return {\n      'was-validated': resolvedItems.validated === true,\n      'btn-group': resolvedItems.buttons === true && resolvedItems.stacked === false,\n      'btn-group-vertical': resolvedItems.stacked === true && resolvedItems.buttons === true,\n      [`btn-group-${resolvedItems.size}`]: resolvedItems.size !== undefined,\n    }\n  })\n\nexport {getClasses, getInputClasses, getLabelClasses, getGroupAttr, getGroupClasses}\n"],"names":["items","computed","resolvedItems","toValue","plain","button","hasDefaultSlot","reverse","inline","switch","size","readonly","toRef","computedAriaInvalid","useAriaInvalid","value","ariaInvalid","state","required","validated","buttons","stacked","stateClass","useStateClass","btn","buttonVariant"],"mappings":"0IAkBoBA,GAClBC,EAAAA,UAAS,KACD,MAAAC,EAAgBC,UAAQH,GACvB,MAAA,CACL,cAC0B,IAAxBE,EAAcE,QACW,IAAzBF,EAAcG,QACdH,EAAcI,eAChB,sBAAgD,IAA1BJ,EAAcK,QACpC,qBAA8C,IAAzBL,EAAcM,OACnC,eAAwC,IAAzBN,EAAcO,OAC7B,CAAC,gBAAgBP,EAAcQ,aACN,IAAvBR,EAAcQ,MACS,OAAvBR,EAAcQ,OACW,IAAzBR,EAAcG,OAClB,yBAoDkBL,IACpB,MAAME,EAAgBS,EAAAA,SAASC,EAAMA,MAAAZ,IAC/Ba,EAAsBC,EAAAA,gBAC1B,IAAMZ,EAAca,MAAMC,cAC1B,IAAMd,EAAca,MAAME,QAErBhB,OAAAA,YAAS,KAAO,CACrB,eAAgBY,EAAoBE,MACpC,iBAAkD,IAAjCb,EAAca,MAAMG,eAA2B,KAChE,0BAUqBlB,GACvBC,EAAAA,UAAS,KACD,MAAAC,EAAgBC,UAAQH,GACvB,MAAA,CACL,iBAA6C,IAA5BE,EAAciB,UAC/B,aAAuC,IAA1BjB,EAAckB,UAA8C,IAA1BlB,EAAcmB,QAC7D,sBAAgD,IAA1BnB,EAAcmB,UAA8C,IAA1BnB,EAAckB,QACtE,CAAC,aAAalB,EAAcQ,aAAgC,IAAvBR,EAAcQ,KACrD,4BAtEqBV,IACvB,MAAME,EAAgBS,EAAAA,SAASC,EAAMA,MAAAZ,IAE/BsB,EAAaC,EAAAA,eAAc,IAAMrB,EAAca,MAAME,OAAS,OAE7DhB,OAAAA,YAAS,IAAM,CACpBqB,EAAWP,MACX,CACE,oBACgC,IAA9Bb,EAAca,MAAMX,QAAkD,IAA/BF,EAAca,MAAMV,OAC7D,aAA4C,IAA/BH,EAAca,MAAMV,UAEpC,0BAUsBL,GACvBC,EAAAA,UAAS,KACD,MAAAC,EAAgBC,UAAQH,GACvB,MAAA,CACL,oBAA4C,IAAxBE,EAAcE,QAA4C,IAAzBF,EAAcG,OACnEmB,KAAgC,IAAzBtB,EAAcG,OACrB,CAAC,OAAOH,EAAcuB,kBACK,IAAzBvB,EAAcG,aACkB,IAAhCH,EAAcuB,eACkB,OAAhCvB,EAAcuB,cAChB,CAAC,OAAOvB,EAAcQ,QACpBR,EAAcG,QAAUH,EAAcQ,MAA+B,OAAvBR,EAAcQ,KAChE"}