{"version":3,"file":"BFormGroup.vue_vue_type_script_setup_true_lang-DgLaYKF6.js","sources":["../src/utils/props.ts","../src/components/BFormGroup/BFormGroup.vue"],"sourcesContent":["// Suffix can be a falsey value so nothing is appended to string\n// (helps when looping over props & some shouldn't change)\n\nimport {upperFirst} from './stringUtils'\n\n/**\n * Use data last parameters to allow for currying\n *\n * @param suffix\n * @param value\n * @returns\n */\nexport const suffixPropName = (suffix: string, value: string): string =>\n  value + (suffix ? upperFirst(suffix) : '')\n","<template>\n  <component\n    :is=\"isFieldset ? 'fieldset' : 'div'\"\n    :id=\"computedId\"\n    :disabled=\"isFieldset ? props.disabled : null\"\n    :role=\"isFieldset ? null : 'group'\"\n    :aria-invalid=\"computedAriaInvalid\"\n    :aria-labelledby=\"isFieldset && isHorizontal ? labelId : null\"\n    :class=\"[stateClass, {'was-validated': props.validated}]\"\n    class=\"b-form-group\"\n  >\n    <ContentTemplate.define>\n      <BFormInvalidFeedback\n        v-if=\"slots['invalid-feedback'] || props.invalidFeedback\"\n        :id=\"invalidFeedbackId\"\n        :aria-live=\"props.feedbackAriaLive\"\n        :state=\"computedState\"\n        :tooltip=\"props.tooltip\"\n      >\n        <slot name=\"invalid-feedback\">{{ props.invalidFeedback }}</slot>\n      </BFormInvalidFeedback>\n      <BFormValidFeedback\n        v-if=\"slots['valid-feedback'] || props.validFeedback\"\n        :id=\"validFeedbackId\"\n        :aria-live=\"props.feedbackAriaLive\"\n        :state=\"computedState\"\n        :tooltip=\"props.tooltip\"\n      >\n        <slot name=\"valid-feedback\">{{ props.validFeedback }}</slot>\n      </BFormValidFeedback>\n      <BFormText v-if=\"slots.description || props.description\" :id=\"descriptionId\">\n        <slot name=\"description\">{{ props.description }}</slot>\n      </BFormText>\n    </ContentTemplate.define>\n    <LabelContentTemplate.define>\n      <template v-if=\"slots.label || props.label || isHorizontal\">\n        <BCol v-if=\"isHorizontal\" v-bind=\"labelColProps\">\n          <component\n            :is=\"labelTag\"\n            :id=\"labelId\"\n            :for=\"computedLabelFor || null\"\n            :tabindex=\"isFieldset ? '-1' : null\"\n            :class=\"labelClasses\"\n            @click=\"isFieldset ? onLegendClick : null\"\n          >\n            <slot name=\"label\">{{ props.label }}</slot>\n          </component>\n        </BCol>\n        <component\n          :is=\"labelTag\"\n          v-else\n          :id=\"labelId\"\n          :for=\"computedLabelFor || null\"\n          :tabindex=\"isFieldset ? '-1' : null\"\n          :class=\"labelClasses\"\n          @click=\"isFieldset ? onLegendClick : null\"\n        >\n          <slot name=\"label\">{{ props.label }}</slot>\n        </component>\n      </template>\n    </LabelContentTemplate.define>\n    <!-- End of definitions -->\n    <BFormRow v-if=\"isHorizontal\">\n      <LabelContentTemplate.reuse />\n      <BCol v-bind=\"contentColProps\" ref=\"_content\">\n        <slot\n          :id=\"computedId\"\n          :aria-describedby=\"null\"\n          :description-id=\"descriptionId\"\n          :label-id=\"labelId\"\n        />\n        <ContentTemplate.reuse />\n      </BCol>\n    </BFormRow>\n    <template v-else>\n      <div v-if=\"props.floating && !isHorizontal\" ref=\"_content\" class=\"form-floating\">\n        <slot\n          :id=\"computedId\"\n          :aria-describedby=\"null\"\n          :description-id=\"descriptionId\"\n          :label-id=\"labelId\"\n        />\n        <LabelContentTemplate.reuse />\n        <ContentTemplate.reuse />\n      </div>\n      <template v-else>\n        <LabelContentTemplate.reuse />\n        <slot\n          :id=\"computedId\"\n          :aria-describedby=\"null\"\n          :description-id=\"descriptionId\"\n          :label-id=\"labelId\"\n        />\n        <ContentTemplate.reuse />\n      </template>\n    </template>\n  </component>\n</template>\n\n<script setup lang=\"ts\">\nimport {computed, provide, type Ref, ref, toRef, useTemplateRef} from 'vue'\nimport {useAriaInvalid} from '../../composables/useAriaInvalid'\nimport {attemptFocus, isVisible} from '../../utils/dom'\nimport BCol from '../BContainer/BCol.vue'\nimport BFormInvalidFeedback from '../BForm/BFormInvalidFeedback.vue'\nimport BFormRow from '../BForm/BFormRow.vue'\nimport BFormText from '../BForm/BFormText.vue'\nimport BFormValidFeedback from '../BForm/BFormValidFeedback.vue'\nimport {suffixPropName} from '../../utils/props'\nimport {useStateClass} from '../../composables/useStateClass'\nimport {useId} from '../../composables/useId'\nimport {createReusableTemplate} from '@vueuse/core'\nimport type {BFormGroupProps} from '../../types'\nimport {useDefaults} from '../../composables/useDefaults'\nimport {formGroupPluginKey} from '../../utils/keys'\n\nconst INPUTS = ['input', 'select', 'textarea']\n\nconst _props = withDefaults(defineProps<BFormGroupProps>(), {\n  ariaInvalid: undefined,\n  contentCols: undefined,\n  contentColsLg: undefined,\n  contentColsMd: undefined,\n  contentColsSm: undefined,\n  contentColsXl: undefined,\n  description: undefined,\n  disabled: false,\n  feedbackAriaLive: 'assertive',\n  floating: false,\n  id: undefined,\n  invalidFeedback: undefined,\n  label: undefined,\n  labelAlign: undefined,\n  labelAlignLg: undefined,\n  labelAlignMd: undefined,\n  labelAlignSm: undefined,\n  labelAlignXl: undefined,\n  labelClass: undefined,\n  labelCols: undefined,\n  labelColsLg: undefined,\n  labelColsMd: undefined,\n  labelColsSm: undefined,\n  labelColsXl: undefined,\n  labelFor: undefined,\n  labelSize: undefined,\n  labelVisuallyHidden: false,\n  state: null,\n  tooltip: false,\n  validFeedback: undefined,\n  validated: false,\n})\nconst props = useDefaults(_props, 'BFormGroup')\n\nconst slots = defineSlots<{\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  'invalid-feedback'?: (props: Record<string, never>) => any\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  'valid-feedback'?: (props: Record<string, never>) => any\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  'description'?: (props: Record<string, never>) => any\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  'label'?: (props: Record<string, never>) => any\n  'default'?: (props: {\n    id: string\n    ariaDescribedby: string | null\n    descriptionId: string | undefined\n    labelId: string | null\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  }) => any\n}>()\n\nconst LabelContentTemplate = createReusableTemplate()\nconst ContentTemplate = createReusableTemplate()\n\nconst computedState = toRef(() => props.state)\nconst childId = ref<Ref<string>[]>([])\nprovide(formGroupPluginKey, (id) => {\n  childId.value = [id]\n\n  return {\n    state: computedState,\n  }\n})\nconst computedLabelFor = computed(() => {\n  if (props.labelFor !== undefined) return props.labelFor\n  if (childId.value[0] && childId.value[0].value) return childId.value[0].value\n  return null\n})\n\nconst breakPoints = ['xs', 'sm', 'md', 'lg', 'xl']\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst getColProps = (props: any, prefix: string) =>\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  breakPoints.reduce((result: any, breakpoint: string) => {\n    const suffix = suffixPropName(breakpoint === 'xs' ? '' : breakpoint, `${prefix}Cols`)\n    let propValue = props[suffix]\n    propValue = propValue === '' ? true : propValue || false\n\n    if (!(typeof propValue === 'boolean') && propValue !== 'auto') {\n      const val = Number.parseInt(propValue)\n      propValue = Number.isNaN(val) ? 0 : val\n      propValue = propValue > 0 ? propValue : false\n    }\n\n    if (propValue) {\n      if (breakpoint === 'xs') {\n        result[typeof propValue === 'boolean' ? 'col' : 'cols'] = propValue\n      } else {\n        result[breakpoint || (typeof propValue === 'boolean' ? 'col' : 'cols')] = propValue\n      }\n    }\n    return result\n  }, {})\n\nconst content = useTemplateRef<HTMLElement>('_content')\n\nconst contentColProps = computed(() => getColProps(props, 'content'))\nconst labelAlignClasses = computed(() =>\n  ((props: BFormGroupProps, prefix: string) =>\n    breakPoints.reduce((result: string[], breakpoint) => {\n      const suffix = suffixPropName(\n        breakpoint === 'xs' ? '' : breakpoint,\n        `${prefix}Align`\n      ) as keyof BFormGroupProps\n      const propValue: string = props[suffix] || null\n      if (propValue) {\n        if (breakpoint === 'xs') {\n          result.push(`text-${propValue}`)\n        } else {\n          result.push(`text-${breakpoint}-${propValue}`)\n        }\n      }\n      return result\n    }, []))(props, 'label')\n)\nconst labelColProps = computed(() => getColProps(props, 'label'))\nconst isHorizontal = computed(\n  () => Object.keys(contentColProps.value).length > 0 || Object.keys(labelColProps.value).length > 0\n)\n\nconst stateClass = useStateClass(computedState)\nconst computedAriaInvalid = useAriaInvalid(() => props.ariaInvalid, computedState)\n\nconst onLegendClick = (event: Readonly<MouseEvent>) => {\n  if (computedLabelFor.value || content.value === null) return\n\n  const {target} = event\n  const tagName = target ? (target as HTMLElement).tagName : ''\n\n  if ([...INPUTS, 'a', 'button', 'label'].indexOf(tagName) !== -1) return\n\n  const inputs = [\n    ...content.value.querySelectorAll(INPUTS.map((v) => `${v}:not([disabled])`).join()),\n  ].filter(isVisible)\n  const [inp] = inputs\n  if (inputs.length === 1 && inp instanceof HTMLElement) {\n    attemptFocus(inp)\n  }\n}\n\nconst computedId = useId(() => props.id)\nconst labelId = useId(undefined, '_BV_label_')\nconst labelTag = computed(() => (!computedLabelFor.value ? 'legend' : 'label'))\nconst labelClasses = computed(() => [\n  isHorizontal.value ? 'col-form-label' : 'form-label',\n  {\n    'bv-no-focus-ring': !computedLabelFor.value,\n    'col-form-label': isHorizontal.value || !computedLabelFor.value,\n    'pt-0': !isHorizontal.value && !computedLabelFor.value,\n    'd-block': !isHorizontal.value && computedLabelFor.value,\n    [`col-form-label-${props.labelSize}`]: !!props.labelSize,\n    'visually-hidden': props.labelVisuallyHidden,\n  },\n  labelAlignClasses.value,\n  props.labelClass,\n])\n\nconst invalidFeedbackId = useId(undefined, '_BV_feedback_invalid_')\n\nconst validFeedbackId = useId(undefined, '_BV_feedback_valid_')\nconst descriptionId = useId(undefined, '_BV_description_')\n\nconst isFieldset = computed(() => !computedLabelFor.value)\n</script>\n"],"names":["suffixPropName","suffix","value","upperFirst","INPUTS","_props","__props","props","useDefaults","slots","_useSlots","LabelContentTemplate","createReusableTemplate","ContentTemplate","computedState","toRef","state","childId","ref","provide","formGroupPluginKey","id","computedLabelFor","computed","labelFor","breakPoints","getColProps","prefix","reduce","result","breakpoint","propValue","val","Number","parseInt","isNaN","content","useTemplateRef","contentColProps","labelAlignClasses","push","labelColProps","isHorizontal","Object","keys","length","stateClass","useStateClass","computedAriaInvalid","useAriaInvalid","ariaInvalid","onLegendClick","event","target","tagName","indexOf","inputs","querySelectorAll","map","v","join","filter","isVisible","inp","HTMLElement","attemptFocus","computedId","useId","labelId","labelTag","labelClasses","labelSize","labelVisuallyHidden","labelClass","invalidFeedbackId","validFeedbackId","descriptionId","isFieldset"],"mappings":"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"}