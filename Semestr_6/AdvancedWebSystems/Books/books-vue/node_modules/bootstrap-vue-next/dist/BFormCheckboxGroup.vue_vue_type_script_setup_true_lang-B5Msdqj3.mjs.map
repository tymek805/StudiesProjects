{"version":3,"file":"BFormCheckboxGroup.vue_vue_type_script_setup_true_lang-B5Msdqj3.mjs","sources":["../src/components/BFormCheckbox/BFormCheckbox.vue","../src/components/BFormCheckbox/BFormCheckboxGroup.vue"],"sourcesContent":["<template>\n  <ConditionalWrapper\n    :skip=\"isButtonGroup\"\n    v-bind=\"props.wrapperAttrs\"\n    :class=\"computedWrapperClasses\"\n  >\n    <input\n      :id=\"computedId\"\n      ref=\"_input\"\n      v-model=\"localValue\"\n      :class=\"computedInputClasses\"\n      type=\"checkbox\"\n      :disabled=\"props.disabled || parentData?.disabled.value\"\n      :required=\"computedRequired || undefined\"\n      :name=\"props.name || parentData?.name.value\"\n      :form=\"props.form || parentData?.form.value\"\n      :aria-label=\"props.ariaLabel\"\n      :aria-labelledby=\"props.ariaLabelledby\"\n      :aria-required=\"computedRequired || undefined\"\n      :value=\"props.value\"\n      :true-value=\"props.value\"\n      :false-value=\"props.uncheckedValue\"\n      :indeterminate=\"indeterminate || undefined\"\n      v-bind=\"processedAttrs.inputAttrs\"\n    />\n    <label v-if=\"hasDefaultSlot || props.plain === false\" :for=\"computedId\" :class=\"labelClasses\">\n      <slot />\n    </label>\n  </ConditionalWrapper>\n</template>\n\n<script setup lang=\"ts\">\nimport {useFocus} from '@vueuse/core'\nimport {computed, inject, useAttrs, useTemplateRef} from 'vue'\nimport {getClasses, getInputClasses, getLabelClasses} from '../../composables/useFormCheck'\nimport type {BFormCheckboxProps} from '../../types/ComponentProps'\nimport {checkboxGroupKey} from '../../utils/keys'\nimport ConditionalWrapper from '../ConditionalWrapper.vue'\nimport {isEmptySlot} from '../../utils/dom'\nimport {useDefaults} from '../../composables/useDefaults'\nimport type {CheckboxValue} from '../../types/CheckboxTypes'\nimport {useId} from '../../composables/useId'\n\ndefineOptions({\n  inheritAttrs: false,\n})\n\nconst attrs = useAttrs()\nconst processedAttrs = computed(() => {\n  const {class: wrapperClass, ...inputAttrs} = attrs\n  return {wrapperClass, inputAttrs}\n})\n\nconst _props = withDefaults(\n  defineProps<Omit<BFormCheckboxProps, 'modelValue' | 'indeterminate'>>(),\n  {\n    wrapperAttrs: undefined,\n    inputClass: undefined,\n    ariaLabel: undefined,\n    ariaLabelledby: undefined,\n    autofocus: false,\n    button: false,\n    buttonGroup: false,\n    buttonVariant: null,\n    disabled: false,\n    form: undefined,\n    id: undefined,\n    inline: false,\n    name: undefined,\n    plain: false,\n    required: undefined,\n    reverse: false,\n    size: undefined,\n    state: null,\n    switch: false,\n    uncheckedValue: false,\n    value: true,\n  }\n)\nconst props = useDefaults(_props, 'BFormCheckbox')\n\nconst slots = defineSlots<{\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  default?: (props: Record<string, never>) => any\n}>()\n\nconst modelValue = defineModel<BFormCheckboxProps['modelValue']>({\n  default: undefined,\n})\nconst indeterminate = defineModel<Exclude<BFormCheckboxProps['indeterminate'], undefined>>(\n  'indeterminate',\n  {\n    default: false,\n  }\n)\n\nconst computedId = useId(() => props.id, 'form-check')\n\nconst parentData = inject(checkboxGroupKey, null)\n\nconst input = useTemplateRef<HTMLElement>('_input')\n\nconst {focused} = useFocus(input, {\n  initialValue: props.autofocus,\n})\n\nconst hasDefaultSlot = computed(() => !isEmptySlot(slots.default))\n\nconst localValue = computed({\n  get: () => (parentData ? parentData.modelValue.value : modelValue.value),\n  set: (newVal) => {\n    if (newVal === undefined) return\n    // Indeterminate is implicitly cleared when the checked state is changed to any value\n    //  by the user.  We reflect that here by setting our indetermiate model to false\n    //  which will emit the indeterminate event to the parent\n    indeterminate.value = false\n    if (parentData !== null && Array.isArray(newVal)) {\n      // The type cast isn't perfect. Array.isArray detects CheckboxValue.unknown[],\n      // but since it's parentData, it should always be CheckboxValue[]\n      // It doesn't quite work when props.value is an [], but this is more of a Vue issue\n      parentData.modelValue.value = newVal as CheckboxValue[]\n      return\n    }\n    modelValue.value = newVal as CheckboxValue\n  },\n})\n\nconst computedRequired = computed(\n  () => !!(props.name ?? parentData?.name.value) && (props.required || parentData?.required.value)\n)\n\nconst isButtonGroup = computed(() => props.buttonGroup || (parentData?.buttons.value ?? false))\n\nconst classesObject = computed(() => ({\n  plain: props.plain || (parentData?.plain.value ?? false),\n  button: props.button || (parentData?.buttons.value ?? false),\n  inline: props.inline || (parentData?.inline.value ?? false),\n  reverse: props.reverse || (parentData?.reverse.value ?? false),\n  switch: props.switch || (parentData?.switch.value ?? false),\n  state:\n    props.state === true || props.state === false ? props.state : (parentData?.state.value ?? null),\n  size: props.size ?? parentData?.size.value ?? 'md', // This is where the true default is made\n  buttonVariant: props.buttonVariant ?? parentData?.buttonVariant.value ?? 'secondary', // This is where the true default is made\n  hasDefaultSlot: hasDefaultSlot.value,\n}))\nconst wrapperClasses = getClasses(classesObject)\nconst computedWrapperClasses = computed(() => [\n  wrapperClasses.value,\n  processedAttrs.value.wrapperClass,\n])\nconst inputClasses = getInputClasses(classesObject)\nconst computedInputClasses = computed(() => [inputClasses.value, props.inputClass])\nconst labelClasses = getLabelClasses(classesObject)\n\ndefineExpose({\n  blur: () => {\n    focused.value = false\n  },\n  element: input,\n  focus: () => {\n    focused.value = true\n  },\n})\n</script>\n","<template>\n  <div\n    v-bind=\"computedAttrs\"\n    :id=\"computedId\"\n    ref=\"_element\"\n    role=\"group\"\n    :class=\"computedClasses\"\n    class=\"bv-no-focus-ring\"\n    tabindex=\"-1\"\n  >\n    <slot name=\"first\" />\n    <BFormCheckbox v-for=\"(item, index) in normalizeOptions\" :key=\"index\" v-bind=\"item\">\n      <slot name=\"option\" v-bind=\"item\">\n        {{ item.text }}\n      </slot>\n    </BFormCheckbox>\n    <slot />\n  </div>\n</template>\n\n<script setup lang=\"ts\">\nimport {computed, provide, toRef, useTemplateRef} from 'vue'\nimport BFormCheckbox from './BFormCheckbox.vue'\nimport {checkboxGroupKey} from '../../utils/keys'\nimport {useFocus} from '@vueuse/core'\nimport type {BFormCheckboxGroupProps} from '../../types/ComponentProps'\nimport {useDefaults} from '../../composables/useDefaults'\nimport {useId} from '../../composables/useId'\nimport {getGroupAttr, getGroupClasses} from '../../composables/useFormCheck'\n\nconst _props = withDefaults(defineProps<Omit<BFormCheckboxGroupProps, 'modelValue'>>(), {\n  ariaInvalid: undefined,\n  autofocus: false,\n  buttonVariant: 'secondary',\n  buttons: false,\n  disabled: false,\n  disabledField: 'disabled',\n  form: undefined,\n  id: undefined,\n  name: undefined,\n  options: () => [],\n  plain: false,\n  required: false,\n  reverse: false,\n  size: 'md',\n  stacked: false,\n  state: null,\n  switches: false,\n  textField: 'text',\n  validated: false,\n  valueField: 'value',\n})\nconst props = useDefaults(_props, 'BFormCheckboxGroup')\n\ndefineSlots<{\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  default?: (props: Record<string, never>) => any\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  first?: (props: Record<string, never>) => any\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  option: (props: Record<string, unknown>) => any\n}>()\n\nconst modelValue = defineModel<Exclude<BFormCheckboxGroupProps['modelValue'], undefined>>({\n  default: () => [],\n})\n\nconst computedId = useId(() => props.id, 'checkbox')\nconst computedName = useId(() => props.name, 'checkbox')\n\nconst element = useTemplateRef<HTMLElement>('_element')\n\nconst {focused} = useFocus(element, {\n  initialValue: props.autofocus,\n})\n\nprovide(checkboxGroupKey, {\n  modelValue,\n  switch: toRef(() => props.switches),\n  buttonVariant: toRef(() => props.buttonVariant),\n  form: toRef(() => props.form),\n  name: computedName,\n  state: toRef(() => props.state),\n  plain: toRef(() => props.plain),\n  size: toRef(() => props.size),\n  inline: toRef(() => !props.stacked),\n  reverse: toRef(() => props.reverse),\n  required: toRef(() => props.required),\n  buttons: toRef(() => props.buttons),\n  disabled: toRef(() => props.disabled),\n})\n\nconst normalizeOptions = computed(() =>\n  props.options.map((el) =>\n    typeof el === 'string' || typeof el === 'number'\n      ? {\n          value: el,\n          disabled: props.disabled,\n          text: el.toString(),\n        }\n      : {\n          ...el,\n          value: el[props.valueField] as string | number | undefined,\n          disabled: el[props.disabledField] as boolean | undefined,\n          text: el[props.textField] as string | undefined,\n        }\n  )\n)\n\nconst classesObject = computed(() => ({\n  required: props.required,\n  ariaInvalid: props.ariaInvalid,\n  state: props.state,\n  validated: props.validated,\n  buttons: props.buttons,\n  stacked: props.stacked,\n  size: props.size,\n}))\nconst computedAttrs = getGroupAttr(classesObject)\nconst computedClasses = getGroupClasses(classesObject)\n\ndefineExpose({\n  blur: () => {\n    focused.value = false\n  },\n  focus: () => {\n    focused.value = true\n  },\n})\n</script>\n"],"names":["_useSlots","_useModel"],"mappings":"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"}