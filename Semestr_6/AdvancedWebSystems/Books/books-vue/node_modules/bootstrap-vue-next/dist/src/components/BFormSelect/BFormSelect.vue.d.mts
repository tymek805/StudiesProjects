import { BFormSelectProps } from '../../types/ComponentProps';
import { SelectOption } from '../../types/SelectTypes';
declare const _default: <T>(__VLS_props: NonNullable<Awaited<typeof __VLS_setup>>["props"], __VLS_ctx?: __VLS_PrettifyLocal<Pick<NonNullable<Awaited<typeof __VLS_setup>>, "attrs" | "emit" | "slots">>, __VLS_expose?: NonNullable<Awaited<typeof __VLS_setup>>["expose"], __VLS_setup?: Promise<{
    props: __VLS_PrettifyLocal<Pick<Partial<{}> & Omit<{
        readonly "onUpdate:modelValue"?: ((value: T) => any) | undefined;
    } & import('vue').VNodeProps & import('vue').AllowedComponentProps & import('vue').ComponentCustomProps, never>, "onUpdate:modelValue"> & ({
        modelValue?: T;
    } & Omit<BFormSelectProps, "modelValue">) & Partial<{}>> & import('vue').PublicProps;
    expose(exposed: import('vue').ShallowUnwrapRef<{
        blur: () => void;
        element: Readonly<import('vue').ShallowRef<HTMLElement | null>>;
        focus: () => void;
    }>): void;
    attrs: any;
    slots: Readonly<{
        default?: (props: Record<string, never>) => any;
        first?: (props: Record<string, never>) => any;
        option: (props: SelectOption<T>) => any;
    }> & {
        default?: (props: Record<string, never>) => any;
        first?: (props: Record<string, never>) => any;
        option: (props: SelectOption<T>) => any;
    };
    emit: (evt: "update:modelValue", value: T) => void;
}>) => import('vue').VNode & {
    __ctx?: Awaited<typeof __VLS_setup>;
};
export default _default;
type __VLS_PrettifyLocal<T> = {
    [K in keyof T]: T[K];
} & {};
