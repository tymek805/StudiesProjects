import { BFormProps } from '../../types/ComponentProps';
declare function __VLS_template(): {
    attrs: Partial<{}>;
    slots: Readonly<{
        default?: (props: Record<string, never>) => any;
    }> & {
        default?: (props: Record<string, never>) => any;
    };
    refs: {
        _element: HTMLFormElement;
    };
    rootEl: HTMLFormElement;
};
type __VLS_TemplateResult = ReturnType<typeof __VLS_template>;
declare const __VLS_component: import('vue').DefineComponent<BFormProps, {
    element: Readonly<import('vue').ShallowRef<HTMLElement | null>>;
}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<BFormProps> & Readonly<{}>, {
    id: string;
    floating: boolean;
    validated: boolean;
    novalidate: boolean;
}, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {
    _element: HTMLFormElement;
}, HTMLFormElement>;
declare const _default: __VLS_WithTemplateSlots<typeof __VLS_component, __VLS_TemplateResult["slots"]>;
export default _default;
type __VLS_WithTemplateSlots<T, S> = T & {
    new (): {
        $slots: S;
    };
};
