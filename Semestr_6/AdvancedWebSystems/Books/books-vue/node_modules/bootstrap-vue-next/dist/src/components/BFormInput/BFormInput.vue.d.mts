import { BFormInputProps } from '../../types/ComponentProps';
type __VLS_Props = Omit<BFormInputProps, 'modelValue'>;
type __VLS_PublicProps = {
    modelValue?: Exclude<BFormInputProps['modelValue'], undefined>;
    'modelModifiers'?: Partial<Record<'trim' | 'lazy' | 'number', true>>;
} & __VLS_Props;
declare const _default: import('vue').DefineComponent<__VLS_PublicProps, {
    blur: () => void;
    element: Readonly<import('vue').ShallowRef<HTMLInputElement | null>>;
    focus: () => void;
}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {
    "update:modelValue": (value: import('../../types/CommonTypes').Numberish | null) => any;
}, string, import('vue').PublicProps, Readonly<__VLS_PublicProps> & Readonly<{
    "onUpdate:modelValue"?: ((value: import('../../types/CommonTypes').Numberish | null) => any) | undefined;
}>, {
    disabled: boolean;
    ariaInvalid: import('../..').AriaInvalid;
    autocomplete: string;
    autofocus: boolean;
    form: string;
    formatter: (val: string, evt: Event) => string;
    id: string;
    lazyFormatter: boolean;
    list: string;
    modelValue: Exclude<BFormInputProps["modelValue"], undefined>;
    name: string;
    placeholder: string;
    plaintext: boolean;
    readonly: boolean;
    required: boolean;
    size: import('../..').Size;
    state: import('../..').ValidationState;
    max: import('../../types/CommonTypes').Numberish;
    min: import('../../types/CommonTypes').Numberish;
    step: import('../../types/CommonTypes').Numberish;
    type: import('../..').InputType;
    debounce: import('../../types/CommonTypes').Numberish;
    debounceMaxWait: import('../../types/CommonTypes').Numberish;
}, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {
    _input: HTMLInputElement;
}, HTMLInputElement>;
export default _default;
