import { BFormGroupProps } from '../../types';
declare function __VLS_template(): {
    attrs: Partial<{}>;
    slots: Readonly<{
        'invalid-feedback'?: (props: Record<string, never>) => any;
        'valid-feedback'?: (props: Record<string, never>) => any;
        description?: (props: Record<string, never>) => any;
        label?: (props: Record<string, never>) => any;
        default?: (props: {
            id: string;
            ariaDescribedby: string | null;
            descriptionId: string | undefined;
            labelId: string | null;
        }) => any;
    }> & {
        'invalid-feedback'?: (props: Record<string, never>) => any;
        'valid-feedback'?: (props: Record<string, never>) => any;
        description?: (props: Record<string, never>) => any;
        label?: (props: Record<string, never>) => any;
        default?: (props: {
            id: string;
            ariaDescribedby: string | null;
            descriptionId: string | undefined;
            labelId: string | null;
        }) => any;
    };
    refs: {
        _content: HTMLDivElement;
    };
    rootEl: any;
};
type __VLS_TemplateResult = ReturnType<typeof __VLS_template>;
declare const __VLS_component: import('vue').DefineComponent<BFormGroupProps, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<BFormGroupProps> & Readonly<{}>, {
    disabled: boolean;
    ariaInvalid: import('../..').AriaInvalid;
    id: string;
    state: import('../..').ValidationState;
    label: string;
    tooltip: boolean;
    contentCols: boolean | import('../../types/CommonTypes').Numberish;
    labelCols: boolean | import('../../types/CommonTypes').Numberish;
    labelAlign: string;
    description: string;
    feedbackAriaLive: string;
    floating: boolean;
    invalidFeedback: string;
    labelClass: import('../../types/AnyValuedAttributes').ClassValue;
    labelFor: string;
    labelSize: string;
    labelVisuallyHidden: boolean;
    validFeedback: string;
    validated: boolean;
    contentColsSm: boolean | import('../../types/CommonTypes').Numberish;
    contentColsMd: boolean | import('../../types/CommonTypes').Numberish;
    contentColsLg: boolean | import('../../types/CommonTypes').Numberish;
    contentColsXl: boolean | import('../../types/CommonTypes').Numberish;
    labelColsSm: boolean | import('../../types/CommonTypes').Numberish;
    labelColsMd: boolean | import('../../types/CommonTypes').Numberish;
    labelColsLg: boolean | import('../../types/CommonTypes').Numberish;
    labelColsXl: boolean | import('../../types/CommonTypes').Numberish;
    labelAlignSm: string;
    labelAlignMd: string;
    labelAlignLg: string;
    labelAlignXl: string;
}, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {
    _content: HTMLDivElement;
}, any>;
declare const _default: __VLS_WithTemplateSlots<typeof __VLS_component, __VLS_TemplateResult["slots"]>;
export default _default;
type __VLS_WithTemplateSlots<T, S> = T & {
    new (): {
        $slots: S;
    };
};
