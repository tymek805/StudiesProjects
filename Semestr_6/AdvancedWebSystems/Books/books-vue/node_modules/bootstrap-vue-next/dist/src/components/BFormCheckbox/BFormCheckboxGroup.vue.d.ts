import { BFormCheckboxGroupProps } from '../../types/ComponentProps';
type __VLS_Props = Omit<BFormCheckboxGroupProps, 'modelValue'>;
type __VLS_PublicProps = {
    modelValue?: Exclude<BFormCheckboxGroupProps['modelValue'], undefined>;
} & __VLS_Props;
declare function __VLS_template(): {
    attrs: Partial<{}>;
    slots: Readonly<{
        default?: (props: Record<string, never>) => any;
        first?: (props: Record<string, never>) => any;
        option: (props: Record<string, unknown>) => any;
    }> & {
        default?: (props: Record<string, never>) => any;
        first?: (props: Record<string, never>) => any;
        option: (props: Record<string, unknown>) => any;
    };
    refs: {
        _element: HTMLDivElement;
    };
    rootEl: HTMLDivElement;
};
type __VLS_TemplateResult = ReturnType<typeof __VLS_template>;
declare const __VLS_component: import('vue').DefineComponent<__VLS_PublicProps, {
    blur: () => void;
    focus: () => void;
}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {
    "update:modelValue": (value: readonly import('../..').CheckboxValue[]) => any;
}, string, import('vue').PublicProps, Readonly<__VLS_PublicProps> & Readonly<{
    "onUpdate:modelValue"?: ((value: readonly import('../..').CheckboxValue[]) => any) | undefined;
}>, {
    disabled: boolean;
    ariaInvalid: import('../..').AriaInvalid;
    autofocus: boolean;
    form: string;
    id: string;
    name: string;
    required: boolean;
    size: import('../..').Size;
    state: import('../..').ValidationState;
    stacked: boolean;
    options: readonly import('../..').CheckboxOptionRaw[];
    validated: boolean;
    reverse: boolean;
    buttons: boolean;
    valueField: string;
    textField: string;
    disabledField: string;
    plain: boolean;
    buttonVariant: import('../..').ButtonVariant | null;
    switches: boolean;
}, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {
    _element: HTMLDivElement;
}, HTMLDivElement>;
declare const _default: __VLS_WithTemplateSlots<typeof __VLS_component, __VLS_TemplateResult["slots"]>;
export default _default;
type __VLS_WithTemplateSlots<T, S> = T & {
    new (): {
        $slots: S;
    };
};
