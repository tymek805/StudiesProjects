import { BPopoverProps, BTooltipProps } from '../../types/ComponentProps';
type __VLS_Props = Omit<BTooltipProps, 'modelValue'>;
type __VLS_PublicProps = {
    modelValue?: BTooltipProps['modelValue'];
} & __VLS_Props;
declare function __VLS_template(): {
    attrs: Partial<{}>;
    slots: Readonly<{
        default?: (props: Record<string, never>) => any;
        target?: (props: {
            show: () => void;
            hide: (trigger?: string) => void;
            toggle: () => void;
            visible: boolean;
        }) => any;
        title?: (props: Record<string, never>) => any;
    }> & {
        default?: (props: Record<string, never>) => any;
        target?: (props: {
            show: () => void;
            hide: (trigger?: string) => void;
            toggle: () => void;
            visible: boolean;
        }) => any;
        title?: (props: Record<string, never>) => any;
    };
    refs: {
        _popover: ({
            $: import('vue').ComponentInternalInstance;
            $data: {};
            $props: {
                readonly modelValue?: Exclude<BPopoverProps["modelValue"], undefined> | undefined;
                readonly id?: string | undefined;
                readonly target?: (string | Readonly<import('vue').ComponentPublicInstance> | Readonly<HTMLElement> | null) | undefined;
                readonly variant?: (import('../..').ColorVariant | null) | undefined;
                readonly placement?: import('../..').PopoverPlacement | undefined;
                readonly title?: string | undefined;
                readonly teleportDisabled?: boolean | undefined;
                readonly teleportTo?: string | import('vue').RendererElement | null | undefined;
                readonly noFade?: boolean | undefined;
                readonly show?: boolean | undefined;
                readonly lazy?: boolean | undefined;
                readonly boundary?: (import('@floating-ui/vue').Boundary | import('../../../node_modules/@floating-ui/core').RootBoundary) | undefined;
                readonly boundaryPadding?: import('../../../node_modules/@floating-ui/core').Padding | undefined;
                readonly floatingMiddleware?: import('@floating-ui/vue').Middleware[] | undefined;
                readonly noFlip?: boolean | undefined;
                readonly noShift?: boolean | undefined;
                readonly noSize?: boolean | undefined;
                readonly offset?: (import('../../types/CommonTypes').Numberish | null) | undefined;
                readonly strategy?: import('../../../node_modules/@floating-ui/core').Strategy | undefined;
                readonly click?: boolean | undefined;
                readonly closeOnHide?: boolean | undefined;
                readonly content?: string | undefined;
                readonly customClass?: import('../../types/AnyValuedAttributes').ClassValue;
                readonly delay?: (number | Readonly<{
                    show: number;
                    hide: number;
                }>) | undefined;
                readonly hideMargin?: number | undefined;
                readonly inline?: boolean | undefined;
                readonly manual?: boolean | undefined;
                readonly noAutoClose?: boolean | undefined;
                readonly noHide?: boolean | undefined;
                readonly noninteractive?: boolean | undefined;
                readonly realtime?: boolean | undefined;
                readonly reference?: (string | Readonly<import('vue').ComponentPublicInstance> | Readonly<HTMLElement> | null) | undefined;
                readonly tooltip?: boolean | undefined;
                readonly initialAnimation?: boolean | undefined;
                readonly noAnimation?: boolean | undefined;
                readonly unmountLazy?: boolean | undefined;
                readonly transProps?: Readonly<import('vue').TransitionProps> | undefined;
                readonly visible?: boolean | undefined;
                readonly onBlur?: ((value: import('../..').BvTriggerableEvent) => any) | undefined;
                readonly onShow?: ((value: import('../..').BvTriggerableEvent) => any) | undefined;
                readonly "onUpdate:modelValue"?: ((value: boolean) => any) | undefined;
                readonly onPointerleave?: ((value: import('../..').BvTriggerableEvent) => any) | undefined;
                readonly onToggle?: ((value: import('../..').BvTriggerableEvent) => any) | undefined;
                readonly onHidden?: ((value: import('../..').BvTriggerableEvent) => any) | undefined;
                readonly "onShow-prevented"?: ((value: import('../..').BvTriggerableEvent) => any) | undefined;
                readonly onHide?: ((value: import('../..').BvTriggerableEvent) => any) | undefined;
                readonly "onHide-prevented"?: ((value: import('../..').BvTriggerableEvent) => any) | undefined;
                readonly "onToggle-prevented"?: ((value: import('../..').BvTriggerableEvent) => any) | undefined;
                readonly onShown?: ((value: import('../..').BvTriggerableEvent) => any) | undefined;
                readonly "onClick-outside"?: ((value: import('../..').BvTriggerableEvent) => any) | undefined;
                readonly "onClose-on-hide"?: ((value: import('../..').BvTriggerableEvent) => any) | undefined;
            } & import('vue').VNodeProps & import('vue').AllowedComponentProps & import('vue').ComponentCustomProps;
            $attrs: {
                [x: string]: unknown;
            };
            $refs: {
                [x: string]: unknown;
            } & {
                _placeholder: HTMLSpanElement;
                _element: HTMLDivElement;
                _arrow: HTMLDivElement;
                _content: HTMLDivElement;
            };
            $slots: Readonly<{
                [name: string]: import('vue').Slot<any> | undefined;
            }>;
            $root: import('vue').ComponentPublicInstance | null;
            $parent: import('vue').ComponentPublicInstance | null;
            $host: Element | null;
            $emit: ((event: "blur", value: import('../..').BvTriggerableEvent) => void) & ((event: "show", value: import('../..').BvTriggerableEvent) => void) & ((event: "update:modelValue", value: boolean) => void) & ((event: "pointerleave", value: import('../..').BvTriggerableEvent) => void) & ((event: "toggle", value: import('../..').BvTriggerableEvent) => void) & ((event: "hidden", value: import('../..').BvTriggerableEvent) => void) & ((event: "show-prevented", value: import('../..').BvTriggerableEvent) => void) & ((event: "hide", value: import('../..').BvTriggerableEvent) => void) & ((event: "hide-prevented", value: import('../..').BvTriggerableEvent) => void) & ((event: "toggle-prevented", value: import('../..').BvTriggerableEvent) => void) & ((event: "shown", value: import('../..').BvTriggerableEvent) => void) & ((event: "click-outside", value: import('../..').BvTriggerableEvent) => void) & ((event: "close-on-hide", value: import('../..').BvTriggerableEvent) => void);
            $el: any;
            $options: import('vue').ComponentOptionsBase<Readonly<{
                modelValue?: Exclude<BPopoverProps["modelValue"], undefined>;
            } & {
                id?: string | undefined;
                target?: (string | Readonly<import('vue').ComponentPublicInstance> | Readonly<HTMLElement> | null) | undefined;
                variant?: (import('../..').ColorVariant | null) | undefined;
                placement?: import('../..').PopoverPlacement | undefined;
                title?: string | undefined;
                teleportDisabled?: boolean | undefined;
                teleportTo?: string | import('vue').RendererElement | null | undefined;
                noFade?: boolean | undefined;
                show?: boolean | undefined;
                lazy?: boolean | undefined;
                boundary?: (import('@floating-ui/vue').Boundary | import('../../../node_modules/@floating-ui/core').RootBoundary) | undefined;
                boundaryPadding?: import('../../../node_modules/@floating-ui/core').Padding | undefined;
                floatingMiddleware?: import('@floating-ui/vue').Middleware[] | undefined;
                noFlip?: boolean | undefined;
                noShift?: boolean | undefined;
                noSize?: boolean | undefined;
                offset?: (import('../../types/CommonTypes').Numberish | null) | undefined;
                strategy?: import('../../../node_modules/@floating-ui/core').Strategy | undefined;
                click?: boolean | undefined;
                closeOnHide?: boolean | undefined;
                content?: string | undefined;
                customClass?: import('../../types/AnyValuedAttributes').ClassValue;
                delay?: (number | Readonly<{
                    show: number;
                    hide: number;
                }>) | undefined;
                hideMargin?: number | undefined;
                inline?: boolean | undefined;
                manual?: boolean | undefined;
                noAutoClose?: boolean | undefined;
                noHide?: boolean | undefined;
                noninteractive?: boolean | undefined;
                realtime?: boolean | undefined;
                reference?: (string | Readonly<import('vue').ComponentPublicInstance> | Readonly<HTMLElement> | null) | undefined;
                tooltip?: boolean | undefined;
                initialAnimation?: boolean | undefined;
                noAnimation?: boolean | undefined;
                unmountLazy?: boolean | undefined;
                transProps?: Readonly<import('vue').TransitionProps> | undefined;
                visible?: boolean | undefined;
            }> & Readonly<{
                onBlur?: ((value: import('../..').BvTriggerableEvent) => any) | undefined;
                onShow?: ((value: import('../..').BvTriggerableEvent) => any) | undefined;
                "onUpdate:modelValue"?: ((value: boolean) => any) | undefined;
                onPointerleave?: ((value: import('../..').BvTriggerableEvent) => any) | undefined;
                onToggle?: ((value: import('../..').BvTriggerableEvent) => any) | undefined;
                onHidden?: ((value: import('../..').BvTriggerableEvent) => any) | undefined;
                "onShow-prevented"?: ((value: import('../..').BvTriggerableEvent) => any) | undefined;
                onHide?: ((value: import('../..').BvTriggerableEvent) => any) | undefined;
                "onHide-prevented"?: ((value: import('../..').BvTriggerableEvent) => any) | undefined;
                "onToggle-prevented"?: ((value: import('../..').BvTriggerableEvent) => any) | undefined;
                onShown?: ((value: import('../..').BvTriggerableEvent) => any) | undefined;
                "onClick-outside"?: ((value: import('../..').BvTriggerableEvent) => any) | undefined;
                "onClose-on-hide"?: ((value: import('../..').BvTriggerableEvent) => any) | undefined;
            }>, {
                hide: (trigger?: string) => void;
                show: () => void;
                toggle: () => void;
            }, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {
                blur: (value: import('../..').BvTriggerableEvent) => any;
                show: (value: import('../..').BvTriggerableEvent) => any;
                "update:modelValue": (value: boolean) => any;
                pointerleave: (value: import('../..').BvTriggerableEvent) => any;
                toggle: (value: import('../..').BvTriggerableEvent) => any;
                hidden: (value: import('../..').BvTriggerableEvent) => any;
                "show-prevented": (value: import('../..').BvTriggerableEvent) => any;
                hide: (value: import('../..').BvTriggerableEvent) => any;
                "hide-prevented": (value: import('../..').BvTriggerableEvent) => any;
                "toggle-prevented": (value: import('../..').BvTriggerableEvent) => any;
                shown: (value: import('../..').BvTriggerableEvent) => any;
                "click-outside": (value: import('../..').BvTriggerableEvent) => any;
                "close-on-hide": (value: import('../..').BvTriggerableEvent) => any;
            }, string, {
                id: string;
                target: string | Readonly<import('vue').ComponentPublicInstance> | Readonly<HTMLElement> | null;
                variant: import('../..').ColorVariant | null;
                placement: import('../..').PopoverPlacement;
                title: string;
                teleportDisabled: boolean;
                teleportTo: string | import('vue').RendererElement | null;
                noFade: boolean;
                show: boolean;
                lazy: boolean;
                boundary: import('@floating-ui/vue').Boundary | import('../../../node_modules/@floating-ui/core').RootBoundary;
                boundaryPadding: import('../../../node_modules/@floating-ui/core').Padding;
                floatingMiddleware: {
                    name: string;
                    options?: any;
                    fn: (state: import('@floating-ui/vue').MiddlewareState) => import('../../../node_modules/@floating-ui/core').MiddlewareReturn | Promise<import('../../../node_modules/@floating-ui/core').MiddlewareReturn>;
                }[];
                noFlip: boolean;
                noShift: boolean;
                noSize: boolean;
                offset: import('../../types/CommonTypes').Numberish | null;
                strategy: import('../../../node_modules/@floating-ui/core').Strategy;
                click: boolean;
                closeOnHide: boolean;
                content: string;
                customClass: import('../../types/AnyValuedAttributes').ClassValue;
                delay: number | Readonly<{
                    show: number;
                    hide: number;
                }>;
                hideMargin: number;
                inline: boolean;
                manual: boolean;
                noAutoClose: boolean;
                noHide: boolean;
                noninteractive: boolean;
                realtime: boolean;
                reference: string | Readonly<import('vue').ComponentPublicInstance> | Readonly<HTMLElement> | null;
                tooltip: boolean;
                initialAnimation: boolean;
                unmountLazy: boolean;
                visible: boolean;
            }, {}, string, {}, import('vue').GlobalComponents, import('vue').GlobalDirectives, string, import('vue').ComponentProvideOptions> & {
                beforeCreate?: (() => void) | (() => void)[];
                created?: (() => void) | (() => void)[];
                beforeMount?: (() => void) | (() => void)[];
                mounted?: (() => void) | (() => void)[];
                beforeUpdate?: (() => void) | (() => void)[];
                updated?: (() => void) | (() => void)[];
                activated?: (() => void) | (() => void)[];
                deactivated?: (() => void) | (() => void)[];
                beforeDestroy?: (() => void) | (() => void)[];
                beforeUnmount?: (() => void) | (() => void)[];
                destroyed?: (() => void) | (() => void)[];
                unmounted?: (() => void) | (() => void)[];
                renderTracked?: ((e: import('vue').DebuggerEvent) => void) | ((e: import('vue').DebuggerEvent) => void)[];
                renderTriggered?: ((e: import('vue').DebuggerEvent) => void) | ((e: import('vue').DebuggerEvent) => void)[];
                errorCaptured?: ((err: unknown, instance: import('vue').ComponentPublicInstance | null, info: string) => boolean | void) | ((err: unknown, instance: import('vue').ComponentPublicInstance | null, info: string) => boolean | void)[];
            };
            $forceUpdate: () => void;
            $nextTick: typeof import('vue').nextTick;
            $watch<T extends string | ((...args: any) => any)>(source: T, cb: T extends (...args: any) => infer R ? (...args: [R, R, import('@vue/reactivity').OnCleanup]) => any : (...args: [any, any, import('@vue/reactivity').OnCleanup]) => any, options?: import('vue').WatchOptions): import('vue').WatchStopHandle;
        } & Readonly<{
            id: string;
            target: string | Readonly<import('vue').ComponentPublicInstance> | Readonly<HTMLElement> | null;
            variant: import('../..').ColorVariant | null;
            placement: import('../..').PopoverPlacement;
            title: string;
            teleportDisabled: boolean;
            teleportTo: string | import('vue').RendererElement | null;
            noFade: boolean;
            show: boolean;
            lazy: boolean;
            boundary: import('@floating-ui/vue').Boundary | import('../../../node_modules/@floating-ui/core').RootBoundary;
            boundaryPadding: import('../../../node_modules/@floating-ui/core').Padding;
            floatingMiddleware: {
                name: string;
                options?: any;
                fn: (state: import('@floating-ui/vue').MiddlewareState) => import('../../../node_modules/@floating-ui/core').MiddlewareReturn | Promise<import('../../../node_modules/@floating-ui/core').MiddlewareReturn>;
            }[];
            noFlip: boolean;
            noShift: boolean;
            noSize: boolean;
            offset: import('../../types/CommonTypes').Numberish | null;
            strategy: import('../../../node_modules/@floating-ui/core').Strategy;
            click: boolean;
            closeOnHide: boolean;
            content: string;
            customClass: import('../../types/AnyValuedAttributes').ClassValue;
            delay: number | Readonly<{
                show: number;
                hide: number;
            }>;
            hideMargin: number;
            inline: boolean;
            manual: boolean;
            noAutoClose: boolean;
            noHide: boolean;
            noninteractive: boolean;
            realtime: boolean;
            reference: string | Readonly<import('vue').ComponentPublicInstance> | Readonly<HTMLElement> | null;
            tooltip: boolean;
            initialAnimation: boolean;
            unmountLazy: boolean;
            visible: boolean;
        }> & Omit<Readonly<{
            modelValue?: Exclude<BPopoverProps["modelValue"], undefined>;
        } & {
            id?: string | undefined;
            target?: (string | Readonly<import('vue').ComponentPublicInstance> | Readonly<HTMLElement> | null) | undefined;
            variant?: (import('../..').ColorVariant | null) | undefined;
            placement?: import('../..').PopoverPlacement | undefined;
            title?: string | undefined;
            teleportDisabled?: boolean | undefined;
            teleportTo?: string | import('vue').RendererElement | null | undefined;
            noFade?: boolean | undefined;
            show?: boolean | undefined;
            lazy?: boolean | undefined;
            boundary?: (import('@floating-ui/vue').Boundary | import('../../../node_modules/@floating-ui/core').RootBoundary) | undefined;
            boundaryPadding?: import('../../../node_modules/@floating-ui/core').Padding | undefined;
            floatingMiddleware?: import('@floating-ui/vue').Middleware[] | undefined;
            noFlip?: boolean | undefined;
            noShift?: boolean | undefined;
            noSize?: boolean | undefined;
            offset?: (import('../../types/CommonTypes').Numberish | null) | undefined;
            strategy?: import('../../../node_modules/@floating-ui/core').Strategy | undefined;
            click?: boolean | undefined;
            closeOnHide?: boolean | undefined;
            content?: string | undefined;
            customClass?: import('../../types/AnyValuedAttributes').ClassValue;
            delay?: (number | Readonly<{
                show: number;
                hide: number;
            }>) | undefined;
            hideMargin?: number | undefined;
            inline?: boolean | undefined;
            manual?: boolean | undefined;
            noAutoClose?: boolean | undefined;
            noHide?: boolean | undefined;
            noninteractive?: boolean | undefined;
            realtime?: boolean | undefined;
            reference?: (string | Readonly<import('vue').ComponentPublicInstance> | Readonly<HTMLElement> | null) | undefined;
            tooltip?: boolean | undefined;
            initialAnimation?: boolean | undefined;
            noAnimation?: boolean | undefined;
            unmountLazy?: boolean | undefined;
            transProps?: Readonly<import('vue').TransitionProps> | undefined;
            visible?: boolean | undefined;
        }> & Readonly<{
            onBlur?: ((value: import('../..').BvTriggerableEvent) => any) | undefined;
            onShow?: ((value: import('../..').BvTriggerableEvent) => any) | undefined;
            "onUpdate:modelValue"?: ((value: boolean) => any) | undefined;
            onPointerleave?: ((value: import('../..').BvTriggerableEvent) => any) | undefined;
            onToggle?: ((value: import('../..').BvTriggerableEvent) => any) | undefined;
            onHidden?: ((value: import('../..').BvTriggerableEvent) => any) | undefined;
            "onShow-prevented"?: ((value: import('../..').BvTriggerableEvent) => any) | undefined;
            onHide?: ((value: import('../..').BvTriggerableEvent) => any) | undefined;
            "onHide-prevented"?: ((value: import('../..').BvTriggerableEvent) => any) | undefined;
            "onToggle-prevented"?: ((value: import('../..').BvTriggerableEvent) => any) | undefined;
            onShown?: ((value: import('../..').BvTriggerableEvent) => any) | undefined;
            "onClick-outside"?: ((value: import('../..').BvTriggerableEvent) => any) | undefined;
            "onClose-on-hide"?: ((value: import('../..').BvTriggerableEvent) => any) | undefined;
        }>, "toggle" | "hide" | ("id" | "target" | "variant" | "placement" | "title" | "teleportDisabled" | "teleportTo" | "noFade" | "show" | "lazy" | "boundary" | "boundaryPadding" | "floatingMiddleware" | "noFlip" | "noShift" | "noSize" | "offset" | "strategy" | "click" | "closeOnHide" | "content" | "customClass" | "delay" | "hideMargin" | "inline" | "manual" | "noAutoClose" | "noHide" | "noninteractive" | "realtime" | "reference" | "tooltip" | "initialAnimation" | "unmountLazy" | "visible")> & import('vue').ShallowUnwrapRef<{
            hide: (trigger?: string) => void;
            show: () => void;
            toggle: () => void;
        }> & {} & import('vue').ComponentCustomProperties & {} & {
            $slots: Readonly<{
                default?: (props: Record<string, never>) => any;
                target?: (props: {
                    show: () => void;
                    hide: (trigger?: string) => void;
                    toggle: () => void;
                    visible: boolean;
                }) => any;
                title?: (props: Record<string, never>) => any;
            }> & {
                default?: (props: Record<string, never>) => any;
                target?: (props: {
                    show: () => void;
                    hide: (trigger?: string) => void;
                    toggle: () => void;
                    visible: boolean;
                }) => any;
                title?: (props: Record<string, never>) => any;
            };
        }) | null;
    };
    rootEl: any;
};
type __VLS_TemplateResult = ReturnType<typeof __VLS_template>;
declare const __VLS_component: import('vue').DefineComponent<__VLS_PublicProps, {
    hide: () => void;
    show: () => void;
    toggle: () => void;
}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {
    "update:modelValue": (value: boolean | undefined) => any;
}, string, import('vue').PublicProps, Readonly<__VLS_PublicProps> & Readonly<{
    "onUpdate:modelValue"?: ((value: boolean | undefined) => any) | undefined;
}>, {
    id: string;
    target: string | Readonly<import('vue').ComponentPublicInstance> | Readonly<HTMLElement> | null;
    variant: import('../..').ColorVariant | null;
    placement: import('../..').PopoverPlacement;
    title: string;
    teleportDisabled: boolean;
    teleportTo: string | import('vue').RendererElement | null;
    noFade: boolean;
    show: boolean;
    lazy: boolean;
    floatingMiddleware: {
        name: string;
        options?: any;
        fn: (state: import('@floating-ui/vue').MiddlewareState) => import('../../../node_modules/@floating-ui/core').MiddlewareReturn | Promise<import('../../../node_modules/@floating-ui/core').MiddlewareReturn>;
    }[];
    noFlip: boolean;
    noShift: boolean;
    offset: import('../../types/CommonTypes').Numberish | null;
    strategy: import('../../../node_modules/@floating-ui/core').Strategy;
    click: boolean;
    content: string;
    customClass: import('../../types/AnyValuedAttributes').ClassValue;
    delay: number | Readonly<{
        show: number;
        hide: number;
    }>;
    inline: boolean;
    manual: boolean;
    noAutoClose: boolean;
    noHide: boolean;
    noninteractive: boolean;
    realtime: boolean;
    reference: string | Readonly<import('vue').ComponentPublicInstance> | Readonly<HTMLElement> | null;
    initialAnimation: boolean;
    unmountLazy: boolean;
    visible: boolean;
    interactive: boolean;
}, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {
    _popover: ({
        $: import('vue').ComponentInternalInstance;
        $data: {};
        $props: {
            readonly modelValue?: Exclude<BPopoverProps["modelValue"], undefined> | undefined;
            readonly id?: string | undefined;
            readonly target?: (string | Readonly<import('vue').ComponentPublicInstance> | Readonly<HTMLElement> | null) | undefined;
            readonly variant?: (import('../..').ColorVariant | null) | undefined;
            readonly placement?: import('../..').PopoverPlacement | undefined;
            readonly title?: string | undefined;
            readonly teleportDisabled?: boolean | undefined;
            readonly teleportTo?: string | import('vue').RendererElement | null | undefined;
            readonly noFade?: boolean | undefined;
            readonly show?: boolean | undefined;
            readonly lazy?: boolean | undefined;
            readonly boundary?: (import('@floating-ui/vue').Boundary | import('../../../node_modules/@floating-ui/core').RootBoundary) | undefined;
            readonly boundaryPadding?: import('../../../node_modules/@floating-ui/core').Padding | undefined;
            readonly floatingMiddleware?: import('@floating-ui/vue').Middleware[] | undefined;
            readonly noFlip?: boolean | undefined;
            readonly noShift?: boolean | undefined;
            readonly noSize?: boolean | undefined;
            readonly offset?: (import('../../types/CommonTypes').Numberish | null) | undefined;
            readonly strategy?: import('../../../node_modules/@floating-ui/core').Strategy | undefined;
            readonly click?: boolean | undefined;
            readonly closeOnHide?: boolean | undefined;
            readonly content?: string | undefined;
            readonly customClass?: import('../../types/AnyValuedAttributes').ClassValue;
            readonly delay?: (number | Readonly<{
                show: number;
                hide: number;
            }>) | undefined;
            readonly hideMargin?: number | undefined;
            readonly inline?: boolean | undefined;
            readonly manual?: boolean | undefined;
            readonly noAutoClose?: boolean | undefined;
            readonly noHide?: boolean | undefined;
            readonly noninteractive?: boolean | undefined;
            readonly realtime?: boolean | undefined;
            readonly reference?: (string | Readonly<import('vue').ComponentPublicInstance> | Readonly<HTMLElement> | null) | undefined;
            readonly tooltip?: boolean | undefined;
            readonly initialAnimation?: boolean | undefined;
            readonly noAnimation?: boolean | undefined;
            readonly unmountLazy?: boolean | undefined;
            readonly transProps?: Readonly<import('vue').TransitionProps> | undefined;
            readonly visible?: boolean | undefined;
            readonly onBlur?: ((value: import('../..').BvTriggerableEvent) => any) | undefined;
            readonly onShow?: ((value: import('../..').BvTriggerableEvent) => any) | undefined;
            readonly "onUpdate:modelValue"?: ((value: boolean) => any) | undefined;
            readonly onPointerleave?: ((value: import('../..').BvTriggerableEvent) => any) | undefined;
            readonly onToggle?: ((value: import('../..').BvTriggerableEvent) => any) | undefined;
            readonly onHidden?: ((value: import('../..').BvTriggerableEvent) => any) | undefined;
            readonly "onShow-prevented"?: ((value: import('../..').BvTriggerableEvent) => any) | undefined;
            readonly onHide?: ((value: import('../..').BvTriggerableEvent) => any) | undefined;
            readonly "onHide-prevented"?: ((value: import('../..').BvTriggerableEvent) => any) | undefined;
            readonly "onToggle-prevented"?: ((value: import('../..').BvTriggerableEvent) => any) | undefined;
            readonly onShown?: ((value: import('../..').BvTriggerableEvent) => any) | undefined;
            readonly "onClick-outside"?: ((value: import('../..').BvTriggerableEvent) => any) | undefined;
            readonly "onClose-on-hide"?: ((value: import('../..').BvTriggerableEvent) => any) | undefined;
        } & import('vue').VNodeProps & import('vue').AllowedComponentProps & import('vue').ComponentCustomProps;
        $attrs: {
            [x: string]: unknown;
        };
        $refs: {
            [x: string]: unknown;
        } & {
            _placeholder: HTMLSpanElement;
            _element: HTMLDivElement;
            _arrow: HTMLDivElement;
            _content: HTMLDivElement;
        };
        $slots: Readonly<{
            [name: string]: import('vue').Slot<any> | undefined;
        }>;
        $root: import('vue').ComponentPublicInstance | null;
        $parent: import('vue').ComponentPublicInstance | null;
        $host: Element | null;
        $emit: ((event: "blur", value: import('../..').BvTriggerableEvent) => void) & ((event: "show", value: import('../..').BvTriggerableEvent) => void) & ((event: "update:modelValue", value: boolean) => void) & ((event: "pointerleave", value: import('../..').BvTriggerableEvent) => void) & ((event: "toggle", value: import('../..').BvTriggerableEvent) => void) & ((event: "hidden", value: import('../..').BvTriggerableEvent) => void) & ((event: "show-prevented", value: import('../..').BvTriggerableEvent) => void) & ((event: "hide", value: import('../..').BvTriggerableEvent) => void) & ((event: "hide-prevented", value: import('../..').BvTriggerableEvent) => void) & ((event: "toggle-prevented", value: import('../..').BvTriggerableEvent) => void) & ((event: "shown", value: import('../..').BvTriggerableEvent) => void) & ((event: "click-outside", value: import('../..').BvTriggerableEvent) => void) & ((event: "close-on-hide", value: import('../..').BvTriggerableEvent) => void);
        $el: any;
        $options: import('vue').ComponentOptionsBase<Readonly<{
            modelValue?: Exclude<BPopoverProps["modelValue"], undefined>;
        } & {
            id?: string | undefined;
            target?: (string | Readonly<import('vue').ComponentPublicInstance> | Readonly<HTMLElement> | null) | undefined;
            variant?: (import('../..').ColorVariant | null) | undefined;
            placement?: import('../..').PopoverPlacement | undefined;
            title?: string | undefined;
            teleportDisabled?: boolean | undefined;
            teleportTo?: string | import('vue').RendererElement | null | undefined;
            noFade?: boolean | undefined;
            show?: boolean | undefined;
            lazy?: boolean | undefined;
            boundary?: (import('@floating-ui/vue').Boundary | import('../../../node_modules/@floating-ui/core').RootBoundary) | undefined;
            boundaryPadding?: import('../../../node_modules/@floating-ui/core').Padding | undefined;
            floatingMiddleware?: import('@floating-ui/vue').Middleware[] | undefined;
            noFlip?: boolean | undefined;
            noShift?: boolean | undefined;
            noSize?: boolean | undefined;
            offset?: (import('../../types/CommonTypes').Numberish | null) | undefined;
            strategy?: import('../../../node_modules/@floating-ui/core').Strategy | undefined;
            click?: boolean | undefined;
            closeOnHide?: boolean | undefined;
            content?: string | undefined;
            customClass?: import('../../types/AnyValuedAttributes').ClassValue;
            delay?: (number | Readonly<{
                show: number;
                hide: number;
            }>) | undefined;
            hideMargin?: number | undefined;
            inline?: boolean | undefined;
            manual?: boolean | undefined;
            noAutoClose?: boolean | undefined;
            noHide?: boolean | undefined;
            noninteractive?: boolean | undefined;
            realtime?: boolean | undefined;
            reference?: (string | Readonly<import('vue').ComponentPublicInstance> | Readonly<HTMLElement> | null) | undefined;
            tooltip?: boolean | undefined;
            initialAnimation?: boolean | undefined;
            noAnimation?: boolean | undefined;
            unmountLazy?: boolean | undefined;
            transProps?: Readonly<import('vue').TransitionProps> | undefined;
            visible?: boolean | undefined;
        }> & Readonly<{
            onBlur?: ((value: import('../..').BvTriggerableEvent) => any) | undefined;
            onShow?: ((value: import('../..').BvTriggerableEvent) => any) | undefined;
            "onUpdate:modelValue"?: ((value: boolean) => any) | undefined;
            onPointerleave?: ((value: import('../..').BvTriggerableEvent) => any) | undefined;
            onToggle?: ((value: import('../..').BvTriggerableEvent) => any) | undefined;
            onHidden?: ((value: import('../..').BvTriggerableEvent) => any) | undefined;
            "onShow-prevented"?: ((value: import('../..').BvTriggerableEvent) => any) | undefined;
            onHide?: ((value: import('../..').BvTriggerableEvent) => any) | undefined;
            "onHide-prevented"?: ((value: import('../..').BvTriggerableEvent) => any) | undefined;
            "onToggle-prevented"?: ((value: import('../..').BvTriggerableEvent) => any) | undefined;
            onShown?: ((value: import('../..').BvTriggerableEvent) => any) | undefined;
            "onClick-outside"?: ((value: import('../..').BvTriggerableEvent) => any) | undefined;
            "onClose-on-hide"?: ((value: import('../..').BvTriggerableEvent) => any) | undefined;
        }>, {
            hide: (trigger?: string) => void;
            show: () => void;
            toggle: () => void;
        }, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {
            blur: (value: import('../..').BvTriggerableEvent) => any;
            show: (value: import('../..').BvTriggerableEvent) => any;
            "update:modelValue": (value: boolean) => any;
            pointerleave: (value: import('../..').BvTriggerableEvent) => any;
            toggle: (value: import('../..').BvTriggerableEvent) => any;
            hidden: (value: import('../..').BvTriggerableEvent) => any;
            "show-prevented": (value: import('../..').BvTriggerableEvent) => any;
            hide: (value: import('../..').BvTriggerableEvent) => any;
            "hide-prevented": (value: import('../..').BvTriggerableEvent) => any;
            "toggle-prevented": (value: import('../..').BvTriggerableEvent) => any;
            shown: (value: import('../..').BvTriggerableEvent) => any;
            "click-outside": (value: import('../..').BvTriggerableEvent) => any;
            "close-on-hide": (value: import('../..').BvTriggerableEvent) => any;
        }, string, {
            id: string;
            target: string | Readonly<import('vue').ComponentPublicInstance> | Readonly<HTMLElement> | null;
            variant: import('../..').ColorVariant | null;
            placement: import('../..').PopoverPlacement;
            title: string;
            teleportDisabled: boolean;
            teleportTo: string | import('vue').RendererElement | null;
            noFade: boolean;
            show: boolean;
            lazy: boolean;
            boundary: import('@floating-ui/vue').Boundary | import('../../../node_modules/@floating-ui/core').RootBoundary;
            boundaryPadding: import('../../../node_modules/@floating-ui/core').Padding;
            floatingMiddleware: {
                name: string;
                options?: any;
                fn: (state: import('@floating-ui/vue').MiddlewareState) => import('../../../node_modules/@floating-ui/core').MiddlewareReturn | Promise<import('../../../node_modules/@floating-ui/core').MiddlewareReturn>;
            }[];
            noFlip: boolean;
            noShift: boolean;
            noSize: boolean;
            offset: import('../../types/CommonTypes').Numberish | null;
            strategy: import('../../../node_modules/@floating-ui/core').Strategy;
            click: boolean;
            closeOnHide: boolean;
            content: string;
            customClass: import('../../types/AnyValuedAttributes').ClassValue;
            delay: number | Readonly<{
                show: number;
                hide: number;
            }>;
            hideMargin: number;
            inline: boolean;
            manual: boolean;
            noAutoClose: boolean;
            noHide: boolean;
            noninteractive: boolean;
            realtime: boolean;
            reference: string | Readonly<import('vue').ComponentPublicInstance> | Readonly<HTMLElement> | null;
            tooltip: boolean;
            initialAnimation: boolean;
            unmountLazy: boolean;
            visible: boolean;
        }, {}, string, {}, import('vue').GlobalComponents, import('vue').GlobalDirectives, string, import('vue').ComponentProvideOptions> & {
            beforeCreate?: (() => void) | (() => void)[];
            created?: (() => void) | (() => void)[];
            beforeMount?: (() => void) | (() => void)[];
            mounted?: (() => void) | (() => void)[];
            beforeUpdate?: (() => void) | (() => void)[];
            updated?: (() => void) | (() => void)[];
            activated?: (() => void) | (() => void)[];
            deactivated?: (() => void) | (() => void)[];
            beforeDestroy?: (() => void) | (() => void)[];
            beforeUnmount?: (() => void) | (() => void)[];
            destroyed?: (() => void) | (() => void)[];
            unmounted?: (() => void) | (() => void)[];
            renderTracked?: ((e: import('vue').DebuggerEvent) => void) | ((e: import('vue').DebuggerEvent) => void)[];
            renderTriggered?: ((e: import('vue').DebuggerEvent) => void) | ((e: import('vue').DebuggerEvent) => void)[];
            errorCaptured?: ((err: unknown, instance: import('vue').ComponentPublicInstance | null, info: string) => boolean | void) | ((err: unknown, instance: import('vue').ComponentPublicInstance | null, info: string) => boolean | void)[];
        };
        $forceUpdate: () => void;
        $nextTick: typeof import('vue').nextTick;
        $watch<T extends string | ((...args: any) => any)>(source: T, cb: T extends (...args: any) => infer R ? (...args: [R, R, import('@vue/reactivity').OnCleanup]) => any : (...args: [any, any, import('@vue/reactivity').OnCleanup]) => any, options?: import('vue').WatchOptions): import('vue').WatchStopHandle;
    } & Readonly<{
        id: string;
        target: string | Readonly<import('vue').ComponentPublicInstance> | Readonly<HTMLElement> | null;
        variant: import('../..').ColorVariant | null;
        placement: import('../..').PopoverPlacement;
        title: string;
        teleportDisabled: boolean;
        teleportTo: string | import('vue').RendererElement | null;
        noFade: boolean;
        show: boolean;
        lazy: boolean;
        boundary: import('@floating-ui/vue').Boundary | import('../../../node_modules/@floating-ui/core').RootBoundary;
        boundaryPadding: import('../../../node_modules/@floating-ui/core').Padding;
        floatingMiddleware: {
            name: string;
            options?: any;
            fn: (state: import('@floating-ui/vue').MiddlewareState) => import('../../../node_modules/@floating-ui/core').MiddlewareReturn | Promise<import('../../../node_modules/@floating-ui/core').MiddlewareReturn>;
        }[];
        noFlip: boolean;
        noShift: boolean;
        noSize: boolean;
        offset: import('../../types/CommonTypes').Numberish | null;
        strategy: import('../../../node_modules/@floating-ui/core').Strategy;
        click: boolean;
        closeOnHide: boolean;
        content: string;
        customClass: import('../../types/AnyValuedAttributes').ClassValue;
        delay: number | Readonly<{
            show: number;
            hide: number;
        }>;
        hideMargin: number;
        inline: boolean;
        manual: boolean;
        noAutoClose: boolean;
        noHide: boolean;
        noninteractive: boolean;
        realtime: boolean;
        reference: string | Readonly<import('vue').ComponentPublicInstance> | Readonly<HTMLElement> | null;
        tooltip: boolean;
        initialAnimation: boolean;
        unmountLazy: boolean;
        visible: boolean;
    }> & Omit<Readonly<{
        modelValue?: Exclude<BPopoverProps["modelValue"], undefined>;
    } & {
        id?: string | undefined;
        target?: (string | Readonly<import('vue').ComponentPublicInstance> | Readonly<HTMLElement> | null) | undefined;
        variant?: (import('../..').ColorVariant | null) | undefined;
        placement?: import('../..').PopoverPlacement | undefined;
        title?: string | undefined;
        teleportDisabled?: boolean | undefined;
        teleportTo?: string | import('vue').RendererElement | null | undefined;
        noFade?: boolean | undefined;
        show?: boolean | undefined;
        lazy?: boolean | undefined;
        boundary?: (import('@floating-ui/vue').Boundary | import('../../../node_modules/@floating-ui/core').RootBoundary) | undefined;
        boundaryPadding?: import('../../../node_modules/@floating-ui/core').Padding | undefined;
        floatingMiddleware?: import('@floating-ui/vue').Middleware[] | undefined;
        noFlip?: boolean | undefined;
        noShift?: boolean | undefined;
        noSize?: boolean | undefined;
        offset?: (import('../../types/CommonTypes').Numberish | null) | undefined;
        strategy?: import('../../../node_modules/@floating-ui/core').Strategy | undefined;
        click?: boolean | undefined;
        closeOnHide?: boolean | undefined;
        content?: string | undefined;
        customClass?: import('../../types/AnyValuedAttributes').ClassValue;
        delay?: (number | Readonly<{
            show: number;
            hide: number;
        }>) | undefined;
        hideMargin?: number | undefined;
        inline?: boolean | undefined;
        manual?: boolean | undefined;
        noAutoClose?: boolean | undefined;
        noHide?: boolean | undefined;
        noninteractive?: boolean | undefined;
        realtime?: boolean | undefined;
        reference?: (string | Readonly<import('vue').ComponentPublicInstance> | Readonly<HTMLElement> | null) | undefined;
        tooltip?: boolean | undefined;
        initialAnimation?: boolean | undefined;
        noAnimation?: boolean | undefined;
        unmountLazy?: boolean | undefined;
        transProps?: Readonly<import('vue').TransitionProps> | undefined;
        visible?: boolean | undefined;
    }> & Readonly<{
        onBlur?: ((value: import('../..').BvTriggerableEvent) => any) | undefined;
        onShow?: ((value: import('../..').BvTriggerableEvent) => any) | undefined;
        "onUpdate:modelValue"?: ((value: boolean) => any) | undefined;
        onPointerleave?: ((value: import('../..').BvTriggerableEvent) => any) | undefined;
        onToggle?: ((value: import('../..').BvTriggerableEvent) => any) | undefined;
        onHidden?: ((value: import('../..').BvTriggerableEvent) => any) | undefined;
        "onShow-prevented"?: ((value: import('../..').BvTriggerableEvent) => any) | undefined;
        onHide?: ((value: import('../..').BvTriggerableEvent) => any) | undefined;
        "onHide-prevented"?: ((value: import('../..').BvTriggerableEvent) => any) | undefined;
        "onToggle-prevented"?: ((value: import('../..').BvTriggerableEvent) => any) | undefined;
        onShown?: ((value: import('../..').BvTriggerableEvent) => any) | undefined;
        "onClick-outside"?: ((value: import('../..').BvTriggerableEvent) => any) | undefined;
        "onClose-on-hide"?: ((value: import('../..').BvTriggerableEvent) => any) | undefined;
    }>, "toggle" | "hide" | ("id" | "target" | "variant" | "placement" | "title" | "teleportDisabled" | "teleportTo" | "noFade" | "show" | "lazy" | "boundary" | "boundaryPadding" | "floatingMiddleware" | "noFlip" | "noShift" | "noSize" | "offset" | "strategy" | "click" | "closeOnHide" | "content" | "customClass" | "delay" | "hideMargin" | "inline" | "manual" | "noAutoClose" | "noHide" | "noninteractive" | "realtime" | "reference" | "tooltip" | "initialAnimation" | "unmountLazy" | "visible")> & import('vue').ShallowUnwrapRef<{
        hide: (trigger?: string) => void;
        show: () => void;
        toggle: () => void;
    }> & {} & import('vue').ComponentCustomProperties & {} & {
        $slots: Readonly<{
            default?: (props: Record<string, never>) => any;
            target?: (props: {
                show: () => void;
                hide: (trigger?: string) => void;
                toggle: () => void;
                visible: boolean;
            }) => any;
            title?: (props: Record<string, never>) => any;
        }> & {
            default?: (props: Record<string, never>) => any;
            target?: (props: {
                show: () => void;
                hide: (trigger?: string) => void;
                toggle: () => void;
                visible: boolean;
            }) => any;
            title?: (props: Record<string, never>) => any;
        };
    }) | null;
}, any>;
declare const _default: __VLS_WithTemplateSlots<typeof __VLS_component, __VLS_TemplateResult["slots"]>;
export default _default;
type __VLS_WithTemplateSlots<T, S> = T & {
    new (): {
        $slots: S;
    };
};
