import { BModalProps } from '../../types/ComponentProps';
import { BvTriggerableEvent } from '../../utils';
type __VLS_Props = Omit<BModalProps, 'modelValue'>;
type SharedSlotsData = {
    cancel: () => void;
    close: () => void;
    hide: (trigger?: string) => void;
    ok: () => void;
    active: boolean;
    visible: boolean;
};
type __VLS_PublicProps = {
    modelValue?: Exclude<BModalProps['modelValue'], undefined>;
} & __VLS_Props;
declare function __VLS_template(): {
    attrs: Partial<{}>;
    slots: Readonly<{
        backdrop?: (props: SharedSlotsData) => any;
        cancel?: (props: SharedSlotsData) => any;
        default?: (props: SharedSlotsData) => any;
        footer?: (props: SharedSlotsData) => any;
        header?: (props: SharedSlotsData) => any;
        'header-close'?: (props: Record<string, never>) => any;
        ok?: (props: SharedSlotsData) => any;
        title?: (props: SharedSlotsData) => any;
    }> & {
        backdrop?: (props: SharedSlotsData) => any;
        cancel?: (props: SharedSlotsData) => any;
        default?: (props: SharedSlotsData) => any;
        footer?: (props: SharedSlotsData) => any;
        header?: (props: SharedSlotsData) => any;
        'header-close'?: (props: Record<string, never>) => any;
        ok?: (props: SharedSlotsData) => any;
        title?: (props: SharedSlotsData) => any;
    };
    refs: {
        _element: HTMLDivElement;
        _cancelButton: ({
            $: import('vue').ComponentInternalInstance;
            $data: {};
            $props: {
                readonly pressed?: boolean | undefined;
                readonly disabled?: boolean | undefined;
                readonly to?: import('vue-router').RouteLocationRaw | undefined;
                readonly pill?: boolean | undefined;
                readonly size?: import('../..').Size | undefined;
                readonly underlineOffset?: import('../..').UnderlineOffset | undefined;
                readonly underlineOffsetHover?: import('../..').UnderlineOffset | undefined;
                readonly underlineOpacity?: import('../..').UnderlineOpacity | undefined;
                readonly underlineOpacityHover?: import('../..').UnderlineOpacity | undefined;
                readonly underlineVariant?: (import('../..').ColorVariant | null) | undefined;
                readonly active?: boolean | undefined;
                readonly activeClass?: string | undefined;
                readonly exactActiveClass?: string | undefined;
                readonly href?: string | undefined;
                readonly icon?: boolean | undefined;
                readonly noRel?: boolean | undefined;
                readonly opacity?: import('../..').LinkOpacity | undefined;
                readonly opacityHover?: import('../..').LinkOpacity | undefined;
                readonly prefetch?: boolean | undefined;
                readonly prefetchOn?: Partial<{
                    visibility: boolean;
                    interaction: boolean;
                }> | undefined;
                readonly noPrefetch?: boolean | undefined;
                readonly prefetchedClass?: import('../../types/AnyValuedAttributes').ClassValue;
                readonly rel?: string | undefined;
                readonly replace?: boolean | undefined;
                readonly routerComponentName?: string | undefined;
                readonly routerTag?: string | undefined;
                readonly stretched?: boolean | undefined;
                readonly target?: import('../..').LinkTarget | undefined;
                readonly variant?: ((import('../..').ButtonVariant | ("link-primary" | "link-secondary" | "link-success" | "link-danger" | "link-warning" | "link-info" | "link-light" | "link-dark")) | null) | undefined;
                readonly type?: import('../..').ButtonType | undefined;
                readonly tag?: string | undefined;
                readonly loading?: boolean | undefined;
                readonly loadingFill?: boolean | undefined;
                readonly loadingText?: string | undefined;
                readonly squared?: boolean | undefined;
                readonly onClick?: ((value: MouseEvent) => any) | undefined;
                readonly "onUpdate:pressed"?: ((value: boolean | undefined) => any) | undefined;
            } & import('vue').VNodeProps & import('vue').AllowedComponentProps & import('vue').ComponentCustomProps;
            $attrs: {
                [x: string]: unknown;
            };
            $refs: {
                [x: string]: unknown;
            } & {
                _element: unknown;
            };
            $slots: Readonly<{
                [name: string]: import('vue').Slot<any> | undefined;
            }>;
            $root: import('vue').ComponentPublicInstance | null;
            $parent: import('vue').ComponentPublicInstance | null;
            $host: Element | null;
            $emit: ((event: "click", value: MouseEvent) => void) & ((event: "update:pressed", value: boolean | undefined) => void);
            $el: any;
            $options: import('vue').ComponentOptionsBase<Readonly<{
                pressed?: import('../..').BButtonProps["pressed"];
            } & {
                disabled?: boolean | undefined;
                to?: import('vue-router').RouteLocationRaw | undefined;
                pill?: boolean | undefined;
                size?: import('../..').Size | undefined;
                underlineOffset?: import('../..').UnderlineOffset | undefined;
                underlineOffsetHover?: import('../..').UnderlineOffset | undefined;
                underlineOpacity?: import('../..').UnderlineOpacity | undefined;
                underlineOpacityHover?: import('../..').UnderlineOpacity | undefined;
                underlineVariant?: (import('../..').ColorVariant | null) | undefined;
                active?: boolean | undefined;
                activeClass?: string | undefined;
                exactActiveClass?: string | undefined;
                href?: string | undefined;
                icon?: boolean | undefined;
                noRel?: boolean | undefined;
                opacity?: import('../..').LinkOpacity | undefined;
                opacityHover?: import('../..').LinkOpacity | undefined;
                prefetch?: boolean | undefined;
                prefetchOn?: Partial<{
                    visibility: boolean;
                    interaction: boolean;
                }> | undefined;
                noPrefetch?: boolean | undefined;
                prefetchedClass?: import('../../types/AnyValuedAttributes').ClassValue;
                rel?: string | undefined;
                replace?: boolean | undefined;
                routerComponentName?: string | undefined;
                routerTag?: string | undefined;
                stretched?: boolean | undefined;
                target?: import('../..').LinkTarget | undefined;
                variant?: ((import('../..').ButtonVariant | ("link-primary" | "link-secondary" | "link-success" | "link-danger" | "link-warning" | "link-info" | "link-light" | "link-dark")) | null) | undefined;
                type?: import('../..').ButtonType | undefined;
                tag?: string | undefined;
                loading?: boolean | undefined;
                loadingFill?: boolean | undefined;
                loadingText?: string | undefined;
                squared?: boolean | undefined;
            }> & Readonly<{
                onClick?: ((value: MouseEvent) => any) | undefined;
                "onUpdate:pressed"?: ((value: boolean | undefined) => any) | undefined;
            }>, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {
                click: (value: MouseEvent) => any;
                "update:pressed": (value: boolean | undefined) => any;
            }, string, {
                disabled: boolean;
                to: import('vue-router').RouteLocationRaw;
                pill: boolean;
                size: import('../..').Size;
                underlineOffset: import('../..').UnderlineOffset;
                underlineOffsetHover: import('../..').UnderlineOffset;
                underlineOpacity: import('../..').UnderlineOpacity;
                underlineOpacityHover: import('../..').UnderlineOpacity;
                underlineVariant: import('../..').ColorVariant | null;
                active: boolean;
                activeClass: string;
                exactActiveClass: string;
                href: string;
                icon: boolean;
                opacity: import('../..').LinkOpacity;
                opacityHover: import('../..').LinkOpacity;
                rel: string;
                replace: boolean;
                routerComponentName: string;
                routerTag: string;
                stretched: boolean;
                target: import('../..').LinkTarget;
                variant: (import('../..').ButtonVariant | ("link-primary" | "link-secondary" | "link-success" | "link-danger" | "link-warning" | "link-info" | "link-light" | "link-dark")) | null;
                type: import('../..').ButtonType;
                tag: string;
                loading: boolean;
                loadingFill: boolean;
                loadingText: string;
                squared: boolean;
            }, {}, string, {}, import('vue').GlobalComponents, import('vue').GlobalDirectives, string, import('vue').ComponentProvideOptions> & {
                beforeCreate?: (() => void) | (() => void)[];
                created?: (() => void) | (() => void)[];
                beforeMount?: (() => void) | (() => void)[];
                mounted?: (() => void) | (() => void)[];
                beforeUpdate?: (() => void) | (() => void)[];
                updated?: (() => void) | (() => void)[];
                activated?: (() => void) | (() => void)[];
                deactivated?: (() => void) | (() => void)[];
                beforeDestroy?: (() => void) | (() => void)[];
                beforeUnmount?: (() => void) | (() => void)[];
                destroyed?: (() => void) | (() => void)[];
                unmounted?: (() => void) | (() => void)[];
                renderTracked?: ((e: import('vue').DebuggerEvent) => void) | ((e: import('vue').DebuggerEvent) => void)[];
                renderTriggered?: ((e: import('vue').DebuggerEvent) => void) | ((e: import('vue').DebuggerEvent) => void)[];
                errorCaptured?: ((err: unknown, instance: import('vue').ComponentPublicInstance | null, info: string) => boolean | void) | ((err: unknown, instance: import('vue').ComponentPublicInstance | null, info: string) => boolean | void)[];
            };
            $forceUpdate: () => void;
            $nextTick: typeof import('vue').nextTick;
            $watch<T extends string | ((...args: any) => any)>(source: T, cb: T extends (...args: any) => infer R ? (...args: [R, R, import('@vue/reactivity').OnCleanup]) => any : (...args: [any, any, import('@vue/reactivity').OnCleanup]) => any, options?: import('vue').WatchOptions): import('vue').WatchStopHandle;
        } & Readonly<{
            disabled: boolean;
            to: import('vue-router').RouteLocationRaw;
            pill: boolean;
            size: import('../..').Size;
            underlineOffset: import('../..').UnderlineOffset;
            underlineOffsetHover: import('../..').UnderlineOffset;
            underlineOpacity: import('../..').UnderlineOpacity;
            underlineOpacityHover: import('../..').UnderlineOpacity;
            underlineVariant: import('../..').ColorVariant | null;
            active: boolean;
            activeClass: string;
            exactActiveClass: string;
            href: string;
            icon: boolean;
            opacity: import('../..').LinkOpacity;
            opacityHover: import('../..').LinkOpacity;
            rel: string;
            replace: boolean;
            routerComponentName: string;
            routerTag: string;
            stretched: boolean;
            target: import('../..').LinkTarget;
            variant: (import('../..').ButtonVariant | ("link-primary" | "link-secondary" | "link-success" | "link-danger" | "link-warning" | "link-info" | "link-light" | "link-dark")) | null;
            type: import('../..').ButtonType;
            tag: string;
            loading: boolean;
            loadingFill: boolean;
            loadingText: string;
            squared: boolean;
        }> & Omit<Readonly<{
            pressed?: import('../..').BButtonProps["pressed"];
        } & {
            disabled?: boolean | undefined;
            to?: import('vue-router').RouteLocationRaw | undefined;
            pill?: boolean | undefined;
            size?: import('../..').Size | undefined;
            underlineOffset?: import('../..').UnderlineOffset | undefined;
            underlineOffsetHover?: import('../..').UnderlineOffset | undefined;
            underlineOpacity?: import('../..').UnderlineOpacity | undefined;
            underlineOpacityHover?: import('../..').UnderlineOpacity | undefined;
            underlineVariant?: (import('../..').ColorVariant | null) | undefined;
            active?: boolean | undefined;
            activeClass?: string | undefined;
            exactActiveClass?: string | undefined;
            href?: string | undefined;
            icon?: boolean | undefined;
            noRel?: boolean | undefined;
            opacity?: import('../..').LinkOpacity | undefined;
            opacityHover?: import('../..').LinkOpacity | undefined;
            prefetch?: boolean | undefined;
            prefetchOn?: Partial<{
                visibility: boolean;
                interaction: boolean;
            }> | undefined;
            noPrefetch?: boolean | undefined;
            prefetchedClass?: import('../../types/AnyValuedAttributes').ClassValue;
            rel?: string | undefined;
            replace?: boolean | undefined;
            routerComponentName?: string | undefined;
            routerTag?: string | undefined;
            stretched?: boolean | undefined;
            target?: import('../..').LinkTarget | undefined;
            variant?: ((import('../..').ButtonVariant | ("link-primary" | "link-secondary" | "link-success" | "link-danger" | "link-warning" | "link-info" | "link-light" | "link-dark")) | null) | undefined;
            type?: import('../..').ButtonType | undefined;
            tag?: string | undefined;
            loading?: boolean | undefined;
            loadingFill?: boolean | undefined;
            loadingText?: string | undefined;
            squared?: boolean | undefined;
        }> & Readonly<{
            onClick?: ((value: MouseEvent) => any) | undefined;
            "onUpdate:pressed"?: ((value: boolean | undefined) => any) | undefined;
        }>, "disabled" | "to" | "pill" | "size" | "underlineOffset" | "underlineOffsetHover" | "underlineOpacity" | "underlineOpacityHover" | "underlineVariant" | "active" | "activeClass" | "exactActiveClass" | "href" | "icon" | "opacity" | "opacityHover" | "rel" | "replace" | "routerComponentName" | "routerTag" | "stretched" | "target" | "variant" | "type" | "tag" | "loading" | "loadingFill" | "loadingText" | "squared"> & import('vue').ShallowUnwrapRef<{}> & {} & import('vue').ComponentCustomProperties & {} & {
            $slots: Readonly<{
                default?: (props: Record<string, never>) => any;
                loading?: (props: Record<string, never>) => any;
                'loading-spinner'?: (props: Record<string, never>) => any;
            }> & {
                default?: (props: Record<string, never>) => any;
                loading?: (props: Record<string, never>) => any;
                'loading-spinner'?: (props: Record<string, never>) => any;
            };
        }) | null;
        _okButton: ({
            $: import('vue').ComponentInternalInstance;
            $data: {};
            $props: {
                readonly pressed?: boolean | undefined;
                readonly disabled?: boolean | undefined;
                readonly to?: import('vue-router').RouteLocationRaw | undefined;
                readonly pill?: boolean | undefined;
                readonly size?: import('../..').Size | undefined;
                readonly underlineOffset?: import('../..').UnderlineOffset | undefined;
                readonly underlineOffsetHover?: import('../..').UnderlineOffset | undefined;
                readonly underlineOpacity?: import('../..').UnderlineOpacity | undefined;
                readonly underlineOpacityHover?: import('../..').UnderlineOpacity | undefined;
                readonly underlineVariant?: (import('../..').ColorVariant | null) | undefined;
                readonly active?: boolean | undefined;
                readonly activeClass?: string | undefined;
                readonly exactActiveClass?: string | undefined;
                readonly href?: string | undefined;
                readonly icon?: boolean | undefined;
                readonly noRel?: boolean | undefined;
                readonly opacity?: import('../..').LinkOpacity | undefined;
                readonly opacityHover?: import('../..').LinkOpacity | undefined;
                readonly prefetch?: boolean | undefined;
                readonly prefetchOn?: Partial<{
                    visibility: boolean;
                    interaction: boolean;
                }> | undefined;
                readonly noPrefetch?: boolean | undefined;
                readonly prefetchedClass?: import('../../types/AnyValuedAttributes').ClassValue;
                readonly rel?: string | undefined;
                readonly replace?: boolean | undefined;
                readonly routerComponentName?: string | undefined;
                readonly routerTag?: string | undefined;
                readonly stretched?: boolean | undefined;
                readonly target?: import('../..').LinkTarget | undefined;
                readonly variant?: ((import('../..').ButtonVariant | ("link-primary" | "link-secondary" | "link-success" | "link-danger" | "link-warning" | "link-info" | "link-light" | "link-dark")) | null) | undefined;
                readonly type?: import('../..').ButtonType | undefined;
                readonly tag?: string | undefined;
                readonly loading?: boolean | undefined;
                readonly loadingFill?: boolean | undefined;
                readonly loadingText?: string | undefined;
                readonly squared?: boolean | undefined;
                readonly onClick?: ((value: MouseEvent) => any) | undefined;
                readonly "onUpdate:pressed"?: ((value: boolean | undefined) => any) | undefined;
            } & import('vue').VNodeProps & import('vue').AllowedComponentProps & import('vue').ComponentCustomProps;
            $attrs: {
                [x: string]: unknown;
            };
            $refs: {
                [x: string]: unknown;
            } & {
                _element: unknown;
            };
            $slots: Readonly<{
                [name: string]: import('vue').Slot<any> | undefined;
            }>;
            $root: import('vue').ComponentPublicInstance | null;
            $parent: import('vue').ComponentPublicInstance | null;
            $host: Element | null;
            $emit: ((event: "click", value: MouseEvent) => void) & ((event: "update:pressed", value: boolean | undefined) => void);
            $el: any;
            $options: import('vue').ComponentOptionsBase<Readonly<{
                pressed?: import('../..').BButtonProps["pressed"];
            } & {
                disabled?: boolean | undefined;
                to?: import('vue-router').RouteLocationRaw | undefined;
                pill?: boolean | undefined;
                size?: import('../..').Size | undefined;
                underlineOffset?: import('../..').UnderlineOffset | undefined;
                underlineOffsetHover?: import('../..').UnderlineOffset | undefined;
                underlineOpacity?: import('../..').UnderlineOpacity | undefined;
                underlineOpacityHover?: import('../..').UnderlineOpacity | undefined;
                underlineVariant?: (import('../..').ColorVariant | null) | undefined;
                active?: boolean | undefined;
                activeClass?: string | undefined;
                exactActiveClass?: string | undefined;
                href?: string | undefined;
                icon?: boolean | undefined;
                noRel?: boolean | undefined;
                opacity?: import('../..').LinkOpacity | undefined;
                opacityHover?: import('../..').LinkOpacity | undefined;
                prefetch?: boolean | undefined;
                prefetchOn?: Partial<{
                    visibility: boolean;
                    interaction: boolean;
                }> | undefined;
                noPrefetch?: boolean | undefined;
                prefetchedClass?: import('../../types/AnyValuedAttributes').ClassValue;
                rel?: string | undefined;
                replace?: boolean | undefined;
                routerComponentName?: string | undefined;
                routerTag?: string | undefined;
                stretched?: boolean | undefined;
                target?: import('../..').LinkTarget | undefined;
                variant?: ((import('../..').ButtonVariant | ("link-primary" | "link-secondary" | "link-success" | "link-danger" | "link-warning" | "link-info" | "link-light" | "link-dark")) | null) | undefined;
                type?: import('../..').ButtonType | undefined;
                tag?: string | undefined;
                loading?: boolean | undefined;
                loadingFill?: boolean | undefined;
                loadingText?: string | undefined;
                squared?: boolean | undefined;
            }> & Readonly<{
                onClick?: ((value: MouseEvent) => any) | undefined;
                "onUpdate:pressed"?: ((value: boolean | undefined) => any) | undefined;
            }>, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {
                click: (value: MouseEvent) => any;
                "update:pressed": (value: boolean | undefined) => any;
            }, string, {
                disabled: boolean;
                to: import('vue-router').RouteLocationRaw;
                pill: boolean;
                size: import('../..').Size;
                underlineOffset: import('../..').UnderlineOffset;
                underlineOffsetHover: import('../..').UnderlineOffset;
                underlineOpacity: import('../..').UnderlineOpacity;
                underlineOpacityHover: import('../..').UnderlineOpacity;
                underlineVariant: import('../..').ColorVariant | null;
                active: boolean;
                activeClass: string;
                exactActiveClass: string;
                href: string;
                icon: boolean;
                opacity: import('../..').LinkOpacity;
                opacityHover: import('../..').LinkOpacity;
                rel: string;
                replace: boolean;
                routerComponentName: string;
                routerTag: string;
                stretched: boolean;
                target: import('../..').LinkTarget;
                variant: (import('../..').ButtonVariant | ("link-primary" | "link-secondary" | "link-success" | "link-danger" | "link-warning" | "link-info" | "link-light" | "link-dark")) | null;
                type: import('../..').ButtonType;
                tag: string;
                loading: boolean;
                loadingFill: boolean;
                loadingText: string;
                squared: boolean;
            }, {}, string, {}, import('vue').GlobalComponents, import('vue').GlobalDirectives, string, import('vue').ComponentProvideOptions> & {
                beforeCreate?: (() => void) | (() => void)[];
                created?: (() => void) | (() => void)[];
                beforeMount?: (() => void) | (() => void)[];
                mounted?: (() => void) | (() => void)[];
                beforeUpdate?: (() => void) | (() => void)[];
                updated?: (() => void) | (() => void)[];
                activated?: (() => void) | (() => void)[];
                deactivated?: (() => void) | (() => void)[];
                beforeDestroy?: (() => void) | (() => void)[];
                beforeUnmount?: (() => void) | (() => void)[];
                destroyed?: (() => void) | (() => void)[];
                unmounted?: (() => void) | (() => void)[];
                renderTracked?: ((e: import('vue').DebuggerEvent) => void) | ((e: import('vue').DebuggerEvent) => void)[];
                renderTriggered?: ((e: import('vue').DebuggerEvent) => void) | ((e: import('vue').DebuggerEvent) => void)[];
                errorCaptured?: ((err: unknown, instance: import('vue').ComponentPublicInstance | null, info: string) => boolean | void) | ((err: unknown, instance: import('vue').ComponentPublicInstance | null, info: string) => boolean | void)[];
            };
            $forceUpdate: () => void;
            $nextTick: typeof import('vue').nextTick;
            $watch<T extends string | ((...args: any) => any)>(source: T, cb: T extends (...args: any) => infer R ? (...args: [R, R, import('@vue/reactivity').OnCleanup]) => any : (...args: [any, any, import('@vue/reactivity').OnCleanup]) => any, options?: import('vue').WatchOptions): import('vue').WatchStopHandle;
        } & Readonly<{
            disabled: boolean;
            to: import('vue-router').RouteLocationRaw;
            pill: boolean;
            size: import('../..').Size;
            underlineOffset: import('../..').UnderlineOffset;
            underlineOffsetHover: import('../..').UnderlineOffset;
            underlineOpacity: import('../..').UnderlineOpacity;
            underlineOpacityHover: import('../..').UnderlineOpacity;
            underlineVariant: import('../..').ColorVariant | null;
            active: boolean;
            activeClass: string;
            exactActiveClass: string;
            href: string;
            icon: boolean;
            opacity: import('../..').LinkOpacity;
            opacityHover: import('../..').LinkOpacity;
            rel: string;
            replace: boolean;
            routerComponentName: string;
            routerTag: string;
            stretched: boolean;
            target: import('../..').LinkTarget;
            variant: (import('../..').ButtonVariant | ("link-primary" | "link-secondary" | "link-success" | "link-danger" | "link-warning" | "link-info" | "link-light" | "link-dark")) | null;
            type: import('../..').ButtonType;
            tag: string;
            loading: boolean;
            loadingFill: boolean;
            loadingText: string;
            squared: boolean;
        }> & Omit<Readonly<{
            pressed?: import('../..').BButtonProps["pressed"];
        } & {
            disabled?: boolean | undefined;
            to?: import('vue-router').RouteLocationRaw | undefined;
            pill?: boolean | undefined;
            size?: import('../..').Size | undefined;
            underlineOffset?: import('../..').UnderlineOffset | undefined;
            underlineOffsetHover?: import('../..').UnderlineOffset | undefined;
            underlineOpacity?: import('../..').UnderlineOpacity | undefined;
            underlineOpacityHover?: import('../..').UnderlineOpacity | undefined;
            underlineVariant?: (import('../..').ColorVariant | null) | undefined;
            active?: boolean | undefined;
            activeClass?: string | undefined;
            exactActiveClass?: string | undefined;
            href?: string | undefined;
            icon?: boolean | undefined;
            noRel?: boolean | undefined;
            opacity?: import('../..').LinkOpacity | undefined;
            opacityHover?: import('../..').LinkOpacity | undefined;
            prefetch?: boolean | undefined;
            prefetchOn?: Partial<{
                visibility: boolean;
                interaction: boolean;
            }> | undefined;
            noPrefetch?: boolean | undefined;
            prefetchedClass?: import('../../types/AnyValuedAttributes').ClassValue;
            rel?: string | undefined;
            replace?: boolean | undefined;
            routerComponentName?: string | undefined;
            routerTag?: string | undefined;
            stretched?: boolean | undefined;
            target?: import('../..').LinkTarget | undefined;
            variant?: ((import('../..').ButtonVariant | ("link-primary" | "link-secondary" | "link-success" | "link-danger" | "link-warning" | "link-info" | "link-light" | "link-dark")) | null) | undefined;
            type?: import('../..').ButtonType | undefined;
            tag?: string | undefined;
            loading?: boolean | undefined;
            loadingFill?: boolean | undefined;
            loadingText?: string | undefined;
            squared?: boolean | undefined;
        }> & Readonly<{
            onClick?: ((value: MouseEvent) => any) | undefined;
            "onUpdate:pressed"?: ((value: boolean | undefined) => any) | undefined;
        }>, "disabled" | "to" | "pill" | "size" | "underlineOffset" | "underlineOffsetHover" | "underlineOpacity" | "underlineOpacityHover" | "underlineVariant" | "active" | "activeClass" | "exactActiveClass" | "href" | "icon" | "opacity" | "opacityHover" | "rel" | "replace" | "routerComponentName" | "routerTag" | "stretched" | "target" | "variant" | "type" | "tag" | "loading" | "loadingFill" | "loadingText" | "squared"> & import('vue').ShallowUnwrapRef<{}> & {} & import('vue').ComponentCustomProperties & {} & {
            $slots: Readonly<{
                default?: (props: Record<string, never>) => any;
                loading?: (props: Record<string, never>) => any;
                'loading-spinner'?: (props: Record<string, never>) => any;
            }> & {
                default?: (props: Record<string, never>) => any;
                loading?: (props: Record<string, never>) => any;
                'loading-spinner'?: (props: Record<string, never>) => any;
            };
        }) | null;
        _fallbackFocusElement: HTMLDivElement;
    };
    rootEl: any;
};
type __VLS_TemplateResult = ReturnType<typeof __VLS_template>;
declare const __VLS_component: import('vue').DefineComponent<__VLS_PublicProps, {
    hide: (trigger?: string) => void;
    id: import('vue').ComputedRef<string>;
    show: () => void;
    toggle: () => void;
}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {
    show: (value: BvTriggerableEvent) => any;
    ok: (value: BvTriggerableEvent) => any;
    cancel: (value: BvTriggerableEvent) => any;
    close: (value: BvTriggerableEvent) => any;
    "update:modelValue": (value: boolean) => any;
    toggle: (value: BvTriggerableEvent) => any;
    hidden: (value: BvTriggerableEvent) => any;
    "show-prevented": (value: BvTriggerableEvent) => any;
    hide: (value: BvTriggerableEvent) => any;
    backdrop: (value: BvTriggerableEvent) => any;
    esc: (value: BvTriggerableEvent) => any;
    "hide-prevented": (value: BvTriggerableEvent) => any;
    "toggle-prevented": (value: BvTriggerableEvent) => any;
    shown: (value: BvTriggerableEvent) => any;
}, string, import('vue').PublicProps, Readonly<__VLS_PublicProps> & Readonly<{
    onShow?: ((value: BvTriggerableEvent) => any) | undefined;
    onOk?: ((value: BvTriggerableEvent) => any) | undefined;
    onCancel?: ((value: BvTriggerableEvent) => any) | undefined;
    onClose?: ((value: BvTriggerableEvent) => any) | undefined;
    "onUpdate:modelValue"?: ((value: boolean) => any) | undefined;
    onToggle?: ((value: BvTriggerableEvent) => any) | undefined;
    onHidden?: ((value: BvTriggerableEvent) => any) | undefined;
    "onShow-prevented"?: ((value: BvTriggerableEvent) => any) | undefined;
    onHide?: ((value: BvTriggerableEvent) => any) | undefined;
    onBackdrop?: ((value: BvTriggerableEvent) => any) | undefined;
    onEsc?: ((value: BvTriggerableEvent) => any) | undefined;
    "onHide-prevented"?: ((value: BvTriggerableEvent) => any) | undefined;
    "onToggle-prevented"?: ((value: BvTriggerableEvent) => any) | undefined;
    onShown?: ((value: BvTriggerableEvent) => any) | undefined;
}>, {
    body: string;
    autofocus: boolean;
    id: string;
    size: import('../..').Size | "xl";
    noBackdrop: boolean;
    backdropFirst: boolean;
    bodyAttrs: Readonly<import('../../types/AnyValuedAttributes').AttrsValue>;
    bodyClass: import('../../types/AnyValuedAttributes').ClassValue;
    bodyScrolling: boolean;
    footerClass: import('../../types/AnyValuedAttributes').ClassValue;
    headerClass: import('../../types/AnyValuedAttributes').ClassValue;
    headerCloseClass: import('../../types/AnyValuedAttributes').ClassValue;
    headerCloseLabel: string;
    headerCloseVariant: import('../..').ButtonVariant | null;
    noCloseOnBackdrop: boolean;
    noCloseOnEsc: boolean;
    noHeader: boolean;
    noTrap: boolean;
    noHeaderClose: boolean;
    title: string;
    teleportDisabled: boolean;
    teleportTo: string | import('vue').RendererElement | null;
    noFade: boolean;
    show: boolean;
    bodyBgVariant: import('../../types/ColorTypes').BgColorVariant | null;
    bodyTextVariant: import('../..').TextColorVariant | null;
    footerBgVariant: import('../../types/ColorTypes').BgColorVariant | null;
    footerBorderVariant: import('../../types/ColorTypes').BorderColorVariant | null;
    footerTextVariant: import('../..').TextColorVariant | null;
    footerVariant: import('../..').ColorVariant | null;
    headerBgVariant: import('../../types/ColorTypes').BgColorVariant | null;
    headerBorderVariant: import('../../types/ColorTypes').BorderColorVariant | null;
    headerTextVariant: import('../..').TextColorVariant | null;
    headerVariant: import('../..').ColorVariant | null;
    titleTag: string;
    lazy: boolean;
    busy: boolean;
    initialAnimation: boolean;
    unmountLazy: boolean;
    transProps: Readonly<import('vue').TransitionProps>;
    visible: boolean;
    autofocusButton: "ok" | "cancel" | "close";
    bodyVariant: import('../..').ColorVariant | null;
    buttonSize: import('../..').Size;
    cancelDisabled: boolean;
    cancelTitle: string;
    cancelVariant: import('../..').ButtonVariant | null;
    centered: boolean;
    contentClass: import('../../types/AnyValuedAttributes').ClassValue;
    dialogClass: import('../../types/AnyValuedAttributes').ClassValue;
    fullscreen: boolean | import('../..').Breakpoint;
    noFooter: boolean;
    modalClass: import('../../types/AnyValuedAttributes').ClassValue;
    okDisabled: boolean;
    okOnly: boolean;
    okTitle: string;
    okVariant: import('../..').ButtonVariant | null;
    scrollable: boolean;
    titleClass: import('../../types/AnyValuedAttributes').ClassValue;
    titleVisuallyHidden: boolean;
}, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {
    _element: HTMLDivElement;
    _cancelButton: ({
        $: import('vue').ComponentInternalInstance;
        $data: {};
        $props: {
            readonly pressed?: boolean | undefined;
            readonly disabled?: boolean | undefined;
            readonly to?: import('vue-router').RouteLocationRaw | undefined;
            readonly pill?: boolean | undefined;
            readonly size?: import('../..').Size | undefined;
            readonly underlineOffset?: import('../..').UnderlineOffset | undefined;
            readonly underlineOffsetHover?: import('../..').UnderlineOffset | undefined;
            readonly underlineOpacity?: import('../..').UnderlineOpacity | undefined;
            readonly underlineOpacityHover?: import('../..').UnderlineOpacity | undefined;
            readonly underlineVariant?: (import('../..').ColorVariant | null) | undefined;
            readonly active?: boolean | undefined;
            readonly activeClass?: string | undefined;
            readonly exactActiveClass?: string | undefined;
            readonly href?: string | undefined;
            readonly icon?: boolean | undefined;
            readonly noRel?: boolean | undefined;
            readonly opacity?: import('../..').LinkOpacity | undefined;
            readonly opacityHover?: import('../..').LinkOpacity | undefined;
            readonly prefetch?: boolean | undefined;
            readonly prefetchOn?: Partial<{
                visibility: boolean;
                interaction: boolean;
            }> | undefined;
            readonly noPrefetch?: boolean | undefined;
            readonly prefetchedClass?: import('../../types/AnyValuedAttributes').ClassValue;
            readonly rel?: string | undefined;
            readonly replace?: boolean | undefined;
            readonly routerComponentName?: string | undefined;
            readonly routerTag?: string | undefined;
            readonly stretched?: boolean | undefined;
            readonly target?: import('../..').LinkTarget | undefined;
            readonly variant?: ((import('../..').ButtonVariant | ("link-primary" | "link-secondary" | "link-success" | "link-danger" | "link-warning" | "link-info" | "link-light" | "link-dark")) | null) | undefined;
            readonly type?: import('../..').ButtonType | undefined;
            readonly tag?: string | undefined;
            readonly loading?: boolean | undefined;
            readonly loadingFill?: boolean | undefined;
            readonly loadingText?: string | undefined;
            readonly squared?: boolean | undefined;
            readonly onClick?: ((value: MouseEvent) => any) | undefined;
            readonly "onUpdate:pressed"?: ((value: boolean | undefined) => any) | undefined;
        } & import('vue').VNodeProps & import('vue').AllowedComponentProps & import('vue').ComponentCustomProps;
        $attrs: {
            [x: string]: unknown;
        };
        $refs: {
            [x: string]: unknown;
        } & {
            _element: unknown;
        };
        $slots: Readonly<{
            [name: string]: import('vue').Slot<any> | undefined;
        }>;
        $root: import('vue').ComponentPublicInstance | null;
        $parent: import('vue').ComponentPublicInstance | null;
        $host: Element | null;
        $emit: ((event: "click", value: MouseEvent) => void) & ((event: "update:pressed", value: boolean | undefined) => void);
        $el: any;
        $options: import('vue').ComponentOptionsBase<Readonly<{
            pressed?: import('../..').BButtonProps["pressed"];
        } & {
            disabled?: boolean | undefined;
            to?: import('vue-router').RouteLocationRaw | undefined;
            pill?: boolean | undefined;
            size?: import('../..').Size | undefined;
            underlineOffset?: import('../..').UnderlineOffset | undefined;
            underlineOffsetHover?: import('../..').UnderlineOffset | undefined;
            underlineOpacity?: import('../..').UnderlineOpacity | undefined;
            underlineOpacityHover?: import('../..').UnderlineOpacity | undefined;
            underlineVariant?: (import('../..').ColorVariant | null) | undefined;
            active?: boolean | undefined;
            activeClass?: string | undefined;
            exactActiveClass?: string | undefined;
            href?: string | undefined;
            icon?: boolean | undefined;
            noRel?: boolean | undefined;
            opacity?: import('../..').LinkOpacity | undefined;
            opacityHover?: import('../..').LinkOpacity | undefined;
            prefetch?: boolean | undefined;
            prefetchOn?: Partial<{
                visibility: boolean;
                interaction: boolean;
            }> | undefined;
            noPrefetch?: boolean | undefined;
            prefetchedClass?: import('../../types/AnyValuedAttributes').ClassValue;
            rel?: string | undefined;
            replace?: boolean | undefined;
            routerComponentName?: string | undefined;
            routerTag?: string | undefined;
            stretched?: boolean | undefined;
            target?: import('../..').LinkTarget | undefined;
            variant?: ((import('../..').ButtonVariant | ("link-primary" | "link-secondary" | "link-success" | "link-danger" | "link-warning" | "link-info" | "link-light" | "link-dark")) | null) | undefined;
            type?: import('../..').ButtonType | undefined;
            tag?: string | undefined;
            loading?: boolean | undefined;
            loadingFill?: boolean | undefined;
            loadingText?: string | undefined;
            squared?: boolean | undefined;
        }> & Readonly<{
            onClick?: ((value: MouseEvent) => any) | undefined;
            "onUpdate:pressed"?: ((value: boolean | undefined) => any) | undefined;
        }>, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {
            click: (value: MouseEvent) => any;
            "update:pressed": (value: boolean | undefined) => any;
        }, string, {
            disabled: boolean;
            to: import('vue-router').RouteLocationRaw;
            pill: boolean;
            size: import('../..').Size;
            underlineOffset: import('../..').UnderlineOffset;
            underlineOffsetHover: import('../..').UnderlineOffset;
            underlineOpacity: import('../..').UnderlineOpacity;
            underlineOpacityHover: import('../..').UnderlineOpacity;
            underlineVariant: import('../..').ColorVariant | null;
            active: boolean;
            activeClass: string;
            exactActiveClass: string;
            href: string;
            icon: boolean;
            opacity: import('../..').LinkOpacity;
            opacityHover: import('../..').LinkOpacity;
            rel: string;
            replace: boolean;
            routerComponentName: string;
            routerTag: string;
            stretched: boolean;
            target: import('../..').LinkTarget;
            variant: (import('../..').ButtonVariant | ("link-primary" | "link-secondary" | "link-success" | "link-danger" | "link-warning" | "link-info" | "link-light" | "link-dark")) | null;
            type: import('../..').ButtonType;
            tag: string;
            loading: boolean;
            loadingFill: boolean;
            loadingText: string;
            squared: boolean;
        }, {}, string, {}, import('vue').GlobalComponents, import('vue').GlobalDirectives, string, import('vue').ComponentProvideOptions> & {
            beforeCreate?: (() => void) | (() => void)[];
            created?: (() => void) | (() => void)[];
            beforeMount?: (() => void) | (() => void)[];
            mounted?: (() => void) | (() => void)[];
            beforeUpdate?: (() => void) | (() => void)[];
            updated?: (() => void) | (() => void)[];
            activated?: (() => void) | (() => void)[];
            deactivated?: (() => void) | (() => void)[];
            beforeDestroy?: (() => void) | (() => void)[];
            beforeUnmount?: (() => void) | (() => void)[];
            destroyed?: (() => void) | (() => void)[];
            unmounted?: (() => void) | (() => void)[];
            renderTracked?: ((e: import('vue').DebuggerEvent) => void) | ((e: import('vue').DebuggerEvent) => void)[];
            renderTriggered?: ((e: import('vue').DebuggerEvent) => void) | ((e: import('vue').DebuggerEvent) => void)[];
            errorCaptured?: ((err: unknown, instance: import('vue').ComponentPublicInstance | null, info: string) => boolean | void) | ((err: unknown, instance: import('vue').ComponentPublicInstance | null, info: string) => boolean | void)[];
        };
        $forceUpdate: () => void;
        $nextTick: typeof import('vue').nextTick;
        $watch<T extends string | ((...args: any) => any)>(source: T, cb: T extends (...args: any) => infer R ? (...args: [R, R, import('@vue/reactivity').OnCleanup]) => any : (...args: [any, any, import('@vue/reactivity').OnCleanup]) => any, options?: import('vue').WatchOptions): import('vue').WatchStopHandle;
    } & Readonly<{
        disabled: boolean;
        to: import('vue-router').RouteLocationRaw;
        pill: boolean;
        size: import('../..').Size;
        underlineOffset: import('../..').UnderlineOffset;
        underlineOffsetHover: import('../..').UnderlineOffset;
        underlineOpacity: import('../..').UnderlineOpacity;
        underlineOpacityHover: import('../..').UnderlineOpacity;
        underlineVariant: import('../..').ColorVariant | null;
        active: boolean;
        activeClass: string;
        exactActiveClass: string;
        href: string;
        icon: boolean;
        opacity: import('../..').LinkOpacity;
        opacityHover: import('../..').LinkOpacity;
        rel: string;
        replace: boolean;
        routerComponentName: string;
        routerTag: string;
        stretched: boolean;
        target: import('../..').LinkTarget;
        variant: (import('../..').ButtonVariant | ("link-primary" | "link-secondary" | "link-success" | "link-danger" | "link-warning" | "link-info" | "link-light" | "link-dark")) | null;
        type: import('../..').ButtonType;
        tag: string;
        loading: boolean;
        loadingFill: boolean;
        loadingText: string;
        squared: boolean;
    }> & Omit<Readonly<{
        pressed?: import('../..').BButtonProps["pressed"];
    } & {
        disabled?: boolean | undefined;
        to?: import('vue-router').RouteLocationRaw | undefined;
        pill?: boolean | undefined;
        size?: import('../..').Size | undefined;
        underlineOffset?: import('../..').UnderlineOffset | undefined;
        underlineOffsetHover?: import('../..').UnderlineOffset | undefined;
        underlineOpacity?: import('../..').UnderlineOpacity | undefined;
        underlineOpacityHover?: import('../..').UnderlineOpacity | undefined;
        underlineVariant?: (import('../..').ColorVariant | null) | undefined;
        active?: boolean | undefined;
        activeClass?: string | undefined;
        exactActiveClass?: string | undefined;
        href?: string | undefined;
        icon?: boolean | undefined;
        noRel?: boolean | undefined;
        opacity?: import('../..').LinkOpacity | undefined;
        opacityHover?: import('../..').LinkOpacity | undefined;
        prefetch?: boolean | undefined;
        prefetchOn?: Partial<{
            visibility: boolean;
            interaction: boolean;
        }> | undefined;
        noPrefetch?: boolean | undefined;
        prefetchedClass?: import('../../types/AnyValuedAttributes').ClassValue;
        rel?: string | undefined;
        replace?: boolean | undefined;
        routerComponentName?: string | undefined;
        routerTag?: string | undefined;
        stretched?: boolean | undefined;
        target?: import('../..').LinkTarget | undefined;
        variant?: ((import('../..').ButtonVariant | ("link-primary" | "link-secondary" | "link-success" | "link-danger" | "link-warning" | "link-info" | "link-light" | "link-dark")) | null) | undefined;
        type?: import('../..').ButtonType | undefined;
        tag?: string | undefined;
        loading?: boolean | undefined;
        loadingFill?: boolean | undefined;
        loadingText?: string | undefined;
        squared?: boolean | undefined;
    }> & Readonly<{
        onClick?: ((value: MouseEvent) => any) | undefined;
        "onUpdate:pressed"?: ((value: boolean | undefined) => any) | undefined;
    }>, "disabled" | "to" | "pill" | "size" | "underlineOffset" | "underlineOffsetHover" | "underlineOpacity" | "underlineOpacityHover" | "underlineVariant" | "active" | "activeClass" | "exactActiveClass" | "href" | "icon" | "opacity" | "opacityHover" | "rel" | "replace" | "routerComponentName" | "routerTag" | "stretched" | "target" | "variant" | "type" | "tag" | "loading" | "loadingFill" | "loadingText" | "squared"> & import('vue').ShallowUnwrapRef<{}> & {} & import('vue').ComponentCustomProperties & {} & {
        $slots: Readonly<{
            default?: (props: Record<string, never>) => any;
            loading?: (props: Record<string, never>) => any;
            'loading-spinner'?: (props: Record<string, never>) => any;
        }> & {
            default?: (props: Record<string, never>) => any;
            loading?: (props: Record<string, never>) => any;
            'loading-spinner'?: (props: Record<string, never>) => any;
        };
    }) | null;
    _okButton: ({
        $: import('vue').ComponentInternalInstance;
        $data: {};
        $props: {
            readonly pressed?: boolean | undefined;
            readonly disabled?: boolean | undefined;
            readonly to?: import('vue-router').RouteLocationRaw | undefined;
            readonly pill?: boolean | undefined;
            readonly size?: import('../..').Size | undefined;
            readonly underlineOffset?: import('../..').UnderlineOffset | undefined;
            readonly underlineOffsetHover?: import('../..').UnderlineOffset | undefined;
            readonly underlineOpacity?: import('../..').UnderlineOpacity | undefined;
            readonly underlineOpacityHover?: import('../..').UnderlineOpacity | undefined;
            readonly underlineVariant?: (import('../..').ColorVariant | null) | undefined;
            readonly active?: boolean | undefined;
            readonly activeClass?: string | undefined;
            readonly exactActiveClass?: string | undefined;
            readonly href?: string | undefined;
            readonly icon?: boolean | undefined;
            readonly noRel?: boolean | undefined;
            readonly opacity?: import('../..').LinkOpacity | undefined;
            readonly opacityHover?: import('../..').LinkOpacity | undefined;
            readonly prefetch?: boolean | undefined;
            readonly prefetchOn?: Partial<{
                visibility: boolean;
                interaction: boolean;
            }> | undefined;
            readonly noPrefetch?: boolean | undefined;
            readonly prefetchedClass?: import('../../types/AnyValuedAttributes').ClassValue;
            readonly rel?: string | undefined;
            readonly replace?: boolean | undefined;
            readonly routerComponentName?: string | undefined;
            readonly routerTag?: string | undefined;
            readonly stretched?: boolean | undefined;
            readonly target?: import('../..').LinkTarget | undefined;
            readonly variant?: ((import('../..').ButtonVariant | ("link-primary" | "link-secondary" | "link-success" | "link-danger" | "link-warning" | "link-info" | "link-light" | "link-dark")) | null) | undefined;
            readonly type?: import('../..').ButtonType | undefined;
            readonly tag?: string | undefined;
            readonly loading?: boolean | undefined;
            readonly loadingFill?: boolean | undefined;
            readonly loadingText?: string | undefined;
            readonly squared?: boolean | undefined;
            readonly onClick?: ((value: MouseEvent) => any) | undefined;
            readonly "onUpdate:pressed"?: ((value: boolean | undefined) => any) | undefined;
        } & import('vue').VNodeProps & import('vue').AllowedComponentProps & import('vue').ComponentCustomProps;
        $attrs: {
            [x: string]: unknown;
        };
        $refs: {
            [x: string]: unknown;
        } & {
            _element: unknown;
        };
        $slots: Readonly<{
            [name: string]: import('vue').Slot<any> | undefined;
        }>;
        $root: import('vue').ComponentPublicInstance | null;
        $parent: import('vue').ComponentPublicInstance | null;
        $host: Element | null;
        $emit: ((event: "click", value: MouseEvent) => void) & ((event: "update:pressed", value: boolean | undefined) => void);
        $el: any;
        $options: import('vue').ComponentOptionsBase<Readonly<{
            pressed?: import('../..').BButtonProps["pressed"];
        } & {
            disabled?: boolean | undefined;
            to?: import('vue-router').RouteLocationRaw | undefined;
            pill?: boolean | undefined;
            size?: import('../..').Size | undefined;
            underlineOffset?: import('../..').UnderlineOffset | undefined;
            underlineOffsetHover?: import('../..').UnderlineOffset | undefined;
            underlineOpacity?: import('../..').UnderlineOpacity | undefined;
            underlineOpacityHover?: import('../..').UnderlineOpacity | undefined;
            underlineVariant?: (import('../..').ColorVariant | null) | undefined;
            active?: boolean | undefined;
            activeClass?: string | undefined;
            exactActiveClass?: string | undefined;
            href?: string | undefined;
            icon?: boolean | undefined;
            noRel?: boolean | undefined;
            opacity?: import('../..').LinkOpacity | undefined;
            opacityHover?: import('../..').LinkOpacity | undefined;
            prefetch?: boolean | undefined;
            prefetchOn?: Partial<{
                visibility: boolean;
                interaction: boolean;
            }> | undefined;
            noPrefetch?: boolean | undefined;
            prefetchedClass?: import('../../types/AnyValuedAttributes').ClassValue;
            rel?: string | undefined;
            replace?: boolean | undefined;
            routerComponentName?: string | undefined;
            routerTag?: string | undefined;
            stretched?: boolean | undefined;
            target?: import('../..').LinkTarget | undefined;
            variant?: ((import('../..').ButtonVariant | ("link-primary" | "link-secondary" | "link-success" | "link-danger" | "link-warning" | "link-info" | "link-light" | "link-dark")) | null) | undefined;
            type?: import('../..').ButtonType | undefined;
            tag?: string | undefined;
            loading?: boolean | undefined;
            loadingFill?: boolean | undefined;
            loadingText?: string | undefined;
            squared?: boolean | undefined;
        }> & Readonly<{
            onClick?: ((value: MouseEvent) => any) | undefined;
            "onUpdate:pressed"?: ((value: boolean | undefined) => any) | undefined;
        }>, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {
            click: (value: MouseEvent) => any;
            "update:pressed": (value: boolean | undefined) => any;
        }, string, {
            disabled: boolean;
            to: import('vue-router').RouteLocationRaw;
            pill: boolean;
            size: import('../..').Size;
            underlineOffset: import('../..').UnderlineOffset;
            underlineOffsetHover: import('../..').UnderlineOffset;
            underlineOpacity: import('../..').UnderlineOpacity;
            underlineOpacityHover: import('../..').UnderlineOpacity;
            underlineVariant: import('../..').ColorVariant | null;
            active: boolean;
            activeClass: string;
            exactActiveClass: string;
            href: string;
            icon: boolean;
            opacity: import('../..').LinkOpacity;
            opacityHover: import('../..').LinkOpacity;
            rel: string;
            replace: boolean;
            routerComponentName: string;
            routerTag: string;
            stretched: boolean;
            target: import('../..').LinkTarget;
            variant: (import('../..').ButtonVariant | ("link-primary" | "link-secondary" | "link-success" | "link-danger" | "link-warning" | "link-info" | "link-light" | "link-dark")) | null;
            type: import('../..').ButtonType;
            tag: string;
            loading: boolean;
            loadingFill: boolean;
            loadingText: string;
            squared: boolean;
        }, {}, string, {}, import('vue').GlobalComponents, import('vue').GlobalDirectives, string, import('vue').ComponentProvideOptions> & {
            beforeCreate?: (() => void) | (() => void)[];
            created?: (() => void) | (() => void)[];
            beforeMount?: (() => void) | (() => void)[];
            mounted?: (() => void) | (() => void)[];
            beforeUpdate?: (() => void) | (() => void)[];
            updated?: (() => void) | (() => void)[];
            activated?: (() => void) | (() => void)[];
            deactivated?: (() => void) | (() => void)[];
            beforeDestroy?: (() => void) | (() => void)[];
            beforeUnmount?: (() => void) | (() => void)[];
            destroyed?: (() => void) | (() => void)[];
            unmounted?: (() => void) | (() => void)[];
            renderTracked?: ((e: import('vue').DebuggerEvent) => void) | ((e: import('vue').DebuggerEvent) => void)[];
            renderTriggered?: ((e: import('vue').DebuggerEvent) => void) | ((e: import('vue').DebuggerEvent) => void)[];
            errorCaptured?: ((err: unknown, instance: import('vue').ComponentPublicInstance | null, info: string) => boolean | void) | ((err: unknown, instance: import('vue').ComponentPublicInstance | null, info: string) => boolean | void)[];
        };
        $forceUpdate: () => void;
        $nextTick: typeof import('vue').nextTick;
        $watch<T extends string | ((...args: any) => any)>(source: T, cb: T extends (...args: any) => infer R ? (...args: [R, R, import('@vue/reactivity').OnCleanup]) => any : (...args: [any, any, import('@vue/reactivity').OnCleanup]) => any, options?: import('vue').WatchOptions): import('vue').WatchStopHandle;
    } & Readonly<{
        disabled: boolean;
        to: import('vue-router').RouteLocationRaw;
        pill: boolean;
        size: import('../..').Size;
        underlineOffset: import('../..').UnderlineOffset;
        underlineOffsetHover: import('../..').UnderlineOffset;
        underlineOpacity: import('../..').UnderlineOpacity;
        underlineOpacityHover: import('../..').UnderlineOpacity;
        underlineVariant: import('../..').ColorVariant | null;
        active: boolean;
        activeClass: string;
        exactActiveClass: string;
        href: string;
        icon: boolean;
        opacity: import('../..').LinkOpacity;
        opacityHover: import('../..').LinkOpacity;
        rel: string;
        replace: boolean;
        routerComponentName: string;
        routerTag: string;
        stretched: boolean;
        target: import('../..').LinkTarget;
        variant: (import('../..').ButtonVariant | ("link-primary" | "link-secondary" | "link-success" | "link-danger" | "link-warning" | "link-info" | "link-light" | "link-dark")) | null;
        type: import('../..').ButtonType;
        tag: string;
        loading: boolean;
        loadingFill: boolean;
        loadingText: string;
        squared: boolean;
    }> & Omit<Readonly<{
        pressed?: import('../..').BButtonProps["pressed"];
    } & {
        disabled?: boolean | undefined;
        to?: import('vue-router').RouteLocationRaw | undefined;
        pill?: boolean | undefined;
        size?: import('../..').Size | undefined;
        underlineOffset?: import('../..').UnderlineOffset | undefined;
        underlineOffsetHover?: import('../..').UnderlineOffset | undefined;
        underlineOpacity?: import('../..').UnderlineOpacity | undefined;
        underlineOpacityHover?: import('../..').UnderlineOpacity | undefined;
        underlineVariant?: (import('../..').ColorVariant | null) | undefined;
        active?: boolean | undefined;
        activeClass?: string | undefined;
        exactActiveClass?: string | undefined;
        href?: string | undefined;
        icon?: boolean | undefined;
        noRel?: boolean | undefined;
        opacity?: import('../..').LinkOpacity | undefined;
        opacityHover?: import('../..').LinkOpacity | undefined;
        prefetch?: boolean | undefined;
        prefetchOn?: Partial<{
            visibility: boolean;
            interaction: boolean;
        }> | undefined;
        noPrefetch?: boolean | undefined;
        prefetchedClass?: import('../../types/AnyValuedAttributes').ClassValue;
        rel?: string | undefined;
        replace?: boolean | undefined;
        routerComponentName?: string | undefined;
        routerTag?: string | undefined;
        stretched?: boolean | undefined;
        target?: import('../..').LinkTarget | undefined;
        variant?: ((import('../..').ButtonVariant | ("link-primary" | "link-secondary" | "link-success" | "link-danger" | "link-warning" | "link-info" | "link-light" | "link-dark")) | null) | undefined;
        type?: import('../..').ButtonType | undefined;
        tag?: string | undefined;
        loading?: boolean | undefined;
        loadingFill?: boolean | undefined;
        loadingText?: string | undefined;
        squared?: boolean | undefined;
    }> & Readonly<{
        onClick?: ((value: MouseEvent) => any) | undefined;
        "onUpdate:pressed"?: ((value: boolean | undefined) => any) | undefined;
    }>, "disabled" | "to" | "pill" | "size" | "underlineOffset" | "underlineOffsetHover" | "underlineOpacity" | "underlineOpacityHover" | "underlineVariant" | "active" | "activeClass" | "exactActiveClass" | "href" | "icon" | "opacity" | "opacityHover" | "rel" | "replace" | "routerComponentName" | "routerTag" | "stretched" | "target" | "variant" | "type" | "tag" | "loading" | "loadingFill" | "loadingText" | "squared"> & import('vue').ShallowUnwrapRef<{}> & {} & import('vue').ComponentCustomProperties & {} & {
        $slots: Readonly<{
            default?: (props: Record<string, never>) => any;
            loading?: (props: Record<string, never>) => any;
            'loading-spinner'?: (props: Record<string, never>) => any;
        }> & {
            default?: (props: Record<string, never>) => any;
            loading?: (props: Record<string, never>) => any;
            'loading-spinner'?: (props: Record<string, never>) => any;
        };
    }) | null;
    _fallbackFocusElement: HTMLDivElement;
}, any>;
declare const _default: __VLS_WithTemplateSlots<typeof __VLS_component, __VLS_TemplateResult["slots"]>;
export default _default;
type __VLS_WithTemplateSlots<T, S> = T & {
    new (): {
        $slots: S;
    };
};
