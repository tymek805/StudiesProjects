{"version":3,"file":"index.umd.js","sources":["../../../../src/directives/BToggle/index.ts"],"sourcesContent":["import {RX_HASH, RX_HASH_ID, RX_SPACE_SPLIT} from '../../utils/constants'\nimport type {Directive, DirectiveBinding, VNode} from 'vue'\nimport {findProvides} from '../utils'\nimport {globalShowHideStorageInjectionKey, type RegisterShowHideValue} from '../../utils/keys'\n\nconst getTargets = (\n  binding: DirectiveBinding<string | readonly string[] | undefined>,\n  el: Readonly<HTMLElement>\n) => {\n  const {modifiers, arg, value} = binding\n  // Any modifiers are considered target Ids\n  const targets = Object.keys(modifiers || {})\n\n  // If value is a string, split out individual targets (if space delimited)\n  const localValue = typeof value === 'string' ? value.split(RX_SPACE_SPLIT) : value\n\n  // Support target Id as link href (`href=\"#id\"`)\n  if (el.tagName.toLowerCase() === 'a') {\n    const href = el.getAttribute('href') || ''\n    if (RX_HASH_ID.test(href)) {\n      targets.push(href.replace(RX_HASH, ''))\n    }\n  }\n\n  // Add Id from `arg` (if provided), and support value\n  // as a single string Id or an array of string Ids\n  // If `value` is not an array or string, then it gets filtered out\n  Array.prototype.concat\n    .apply([], [arg, localValue])\n    .forEach((t) => typeof t === 'string' && targets.push(t))\n\n  // Return only unique and truthy target Ids\n  return targets.filter((t, index, arr) => t && arr.indexOf(t) === index)\n}\n\nconst toggle = (\n  targetIds: readonly string[],\n  el: Readonly<HTMLElement>,\n  binding: DirectiveBinding,\n  vnode: VNode\n) => {\n  const provides = findProvides(binding, vnode)\n  const showHide = (provides as Record<symbol, RegisterShowHideValue>)[\n    globalShowHideStorageInjectionKey\n  ]?.map\n\n  targetIds.forEach((targetId) => {\n    if (showHide?.[targetId]) {\n      showHide[targetId].toggle()\n      return\n    }\n    const target = document.getElementById(targetId)\n\n    if (target !== null) {\n      target.dispatchEvent(new Event('bv-toggle'))\n    }\n  })\n  setTimeout(() => checkVisibility(targetIds, el), 50)\n}\n\nconst checkVisibility = (targetIds: readonly string[], el: Readonly<HTMLElement>) => {\n  let visible = false\n  targetIds.forEach((targetId) => {\n    const target = document.getElementById(targetId)\n\n    if (target?.classList.contains('show')) {\n      visible = true\n    }\n    if (target?.classList.contains('closing')) {\n      visible = false\n    }\n  })\n  el.setAttribute('aria-expanded', visible ? 'true' : 'false')\n  el.classList.remove(visible ? 'collapsed' : 'not-collapsed')\n  el.classList.add(visible ? 'not-collapsed' : 'collapsed')\n}\n\nconst handleUpdate = (\n  el: WithToggle,\n  binding: DirectiveBinding<string | readonly string[] | undefined>,\n  vnode: VNode\n) => {\n  // Determine targets\n  const targets = getTargets(binding, el)\n  if (targets.length === 0) return\n\n  // Set up click handler\n  if (el.__toggle) {\n    setTimeout(() => {\n      el.removeEventListener('click', el.__toggle)\n      el.__toggle = () => toggle(targets, el, binding, vnode)\n      el.addEventListener('click', el.__toggle)\n    }, 0)\n  } else {\n    el.__toggle = () => toggle(targets, el, binding, vnode)\n    el.addEventListener('click', el.__toggle)\n  }\n\n  // Update attributes\n  el.setAttribute('aria-controls', targets.join(' '))\n  checkVisibility(targets, el)\n}\n\nexport interface WithToggle extends HTMLElement {\n  __toggle: () => void\n}\n\nexport const vBToggle: Directive<WithToggle> = {\n  mounted: handleUpdate,\n  updated: handleUpdate,\n  unmounted(el: WithToggle): void {\n    el.removeEventListener('click', el.__toggle)\n    el.removeAttribute('aria-controls')\n    el.removeAttribute('aria-expanded')\n  },\n}\n"],"names":["toggle","targetIds","el","binding","vnode","showHide","_a","findProvides","globalShowHideStorageInjectionKey","map","forEach","targetId","target","document","getElementById","dispatchEvent","Event","setTimeout","checkVisibility","visible","classList","contains","setAttribute","remove","add","handleUpdate","targets","modifiers","arg","value","Object","keys","localValue","split","RX_SPACE_SPLIT","tagName","toLowerCase","href","getAttribute","RX_HASH_ID","test","push","replace","RX_HASH","Array","prototype","concat","apply","t","filter","index","arr","indexOf","getTargets","length","__toggle","removeEventListener","addEventListener","join","vBToggle","mounted","updated","unmounted","removeAttribute"],"mappings":"iNAmCMA,EAAS,CACbC,EACAC,EACAC,EACAC,WAEM,MACAC,EAAY,OAAAC,EADDC,EAAAA,aAAaJ,EAASC,GAErCI,EACFA,yCAAG,EAAAF,EAAAG,IAEOR,EAAAS,SAASC,IACb,SAAAN,WAAWM,GAEb,YADSN,EAAAM,GAAUX,SAGf,MAAAY,EAASC,SAASC,eAAeH,GAExB,OAAXC,GACFA,EAAOG,cAAc,IAAIC,MAAM,aAAY,IAG/CC,YAAW,IAAMC,EAAgBjB,EAAWC,IAAK,GAAE,EAG/CgB,EAAkB,CAACjB,EAA8BC,KACrD,IAAIiB,GAAU,EACJlB,EAAAS,SAASC,IACX,MAAAC,EAASC,SAASC,eAAeH,IAEnC,MAAAC,OAAA,EAAAA,EAAQQ,UAAUC,SAAS,WACnBF,GAAA,IAER,MAAAP,OAAA,EAAAA,EAAQQ,UAAUC,SAAS,cACnBF,GAAA,EAAA,IAGdjB,EAAGoB,aAAa,gBAAiBH,EAAU,OAAS,SACpDjB,EAAGkB,UAAUG,OAAOJ,EAAU,YAAc,iBAC5CjB,EAAGkB,UAAUI,IAAIL,EAAU,gBAAkB,YAAW,EAGpDM,EAAe,CACnBvB,EACAC,EACAC,KAGM,MAAAsB,EA9EW,EACjBvB,EACAD,KAEA,MAAMyB,UAACA,EAAAC,IAAWA,EAAKC,MAAAA,GAAS1B,EAE1BuB,EAAUI,OAAOC,KAAKJ,GAAa,CAAA,GAGnCK,EAA8B,iBAAVH,EAAqBA,EAAMI,MAAMC,EAAcA,gBAAIL,EAG7E,GAAiC,MAA7B3B,EAAGiC,QAAQC,cAAuB,CACpC,MAAMC,EAAOnC,EAAGoC,aAAa,SAAW,GACpCC,EAAAA,WAAWC,KAAKH,IAClBX,EAAQe,KAAKJ,EAAKK,QAAQC,EAAAA,QAAS,IACrC,CAWK,OALPC,MAAMC,UAAUC,OACbC,MAAM,GAAI,CAACnB,EAAKI,IAChBtB,SAASsC,GAAmB,iBAANA,GAAkBtB,EAAQe,KAAKO,KAGjDtB,EAAQuB,QAAO,CAACD,EAAGE,EAAOC,IAAQH,GAAKG,EAAIC,QAAQJ,KAAOE,GAAK,EAmDtDG,CAAWlD,EAASD,GACb,IAAnBwB,EAAQ4B,SAGRpD,EAAGqD,SACLtC,YAAW,KACNf,EAAAsD,oBAAoB,QAAStD,EAAGqD,UACnCrD,EAAGqD,SAAW,IAAMvD,EAAO0B,EAASxB,EAAIC,EAASC,GAC9CF,EAAAuD,iBAAiB,QAASvD,EAAGqD,SAAQ,GACvC,IAEHrD,EAAGqD,SAAW,IAAMvD,EAAO0B,EAASxB,EAAIC,EAASC,GAC9CF,EAAAuD,iBAAiB,QAASvD,EAAGqD,WAIlCrD,EAAGoB,aAAa,gBAAiBI,EAAQgC,KAAK,MAC9CxC,EAAgBQ,EAASxB,GAAE,EAOhByD,EAAkC,CAC7CC,QAASnC,EACToC,QAASpC,EACT,SAAAqC,CAAU5D,GACLA,EAAAsD,oBAAoB,QAAStD,EAAGqD,UACnCrD,EAAG6D,gBAAgB,iBACnB7D,EAAG6D,gBAAgB,gBAAe"}