import { MaybeRefOrGetter } from 'vue';
import { RouteLocationRaw } from 'vue-router';
export declare const useBLinkHelper: <T extends Record<string, unknown>, const B extends ReadonlyArray<PropertyKey>>(props: MaybeRefOrGetter<T>, pickProps?: MaybeRefOrGetter<B | (keyof T)[]>) => {
    computedLink: import('vue').ComputedRef<boolean>;
    computedLinkProps: import('vue').ComputedRef<Pick<{
        [x: string]: /*elided*/ any;
    }, PropertyKey>>;
};
export declare const useBLinkTagResolver: (props: MaybeRefOrGetter<{
    routerComponentName: string;
    disabled: boolean;
    to: RouteLocationRaw | undefined;
    href: string | undefined;
    replace: boolean;
}>) => {
    isNonStandardTag: import('vue').ComputedRef<boolean>;
    tag: import('vue').ComputedRef<string>;
    isRouterLink: import('vue').ComputedRef<boolean>;
    isNuxtLink: import('vue').ComputedRef<boolean>;
    computedHref: import('vue').ComputedRef<string>;
    routerName: import('vue').ComputedRef<string>;
    router: import('vue-router').Router | undefined;
    route: import('vue-router').RouteLocationNormalizedLoadedGeneric | undefined;
    link: import('vue').ComputedRef<import('vue-router').UseLinkReturn<string | symbol> | null | undefined>;
    linkProps: import('vue').ComputedRef<{
        to: string | import('vue-router').RouteLocationAsRelativeGeneric | import('vue-router').RouteLocationAsPathGeneric;
        replace: boolean;
    }>;
};
