import { BTabProps } from '../../types/ComponentProps';
type __VLS_Props = Omit<BTabProps, 'active'>;
type __VLS_PublicProps = {
    'active'?: Exclude<BTabProps['active'], undefined>;
} & __VLS_Props;
declare function __VLS_template(): {
    attrs: Partial<{}>;
    slots: Readonly<{
        default?: (props: Record<string, never>) => any;
        title?: (props: Record<string, never>) => any;
    }> & {
        default?: (props: Record<string, never>) => any;
        title?: (props: Record<string, never>) => any;
    };
    refs: {
        _el: unknown;
    };
    rootEl: any;
};
type __VLS_TemplateResult = ReturnType<typeof __VLS_template>;
declare const __VLS_component: import('vue').DefineComponent<__VLS_PublicProps, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {
    "update:active": (value: boolean) => any;
}, string, import('vue').PublicProps, Readonly<__VLS_PublicProps> & Readonly<{
    "onUpdate:active"?: ((value: boolean) => any) | undefined;
}>, {
    disabled: boolean;
    id: string;
    tag: string;
    title: string;
    noBody: boolean;
    lazy: boolean;
    buttonId: string;
    lazyOnce: boolean;
    titleItemClass: import('../../types/AnyValuedAttributes').ClassValue;
    titleLinkAttrs: Readonly<import('../../types/AnyValuedAttributes').AttrsValue>;
    titleLinkClass: import('../../types/AnyValuedAttributes').ClassValue;
}, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {
    _el: unknown;
}, any>;
declare const _default: __VLS_WithTemplateSlots<typeof __VLS_component, __VLS_TemplateResult["slots"]>;
export default _default;
type __VLS_WithTemplateSlots<T, S> = T & {
    new (): {
        $slots: S;
    };
};
