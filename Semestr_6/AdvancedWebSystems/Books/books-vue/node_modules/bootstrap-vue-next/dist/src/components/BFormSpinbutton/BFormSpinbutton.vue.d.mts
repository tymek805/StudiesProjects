import { BFormSpinbuttonProps } from '../../types/ComponentProps';
declare const _default: __VLS_WithTemplateSlots<import('vue').DefineComponent<{
    modelValue?: Exclude<BFormSpinbuttonProps["modelValue"], undefined>;
} & Omit<BFormSpinbuttonProps, "modelValue">, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {
    "update:modelValue": (value: number | null) => any;
    change: (value: number | null) => any;
}, string, import('vue').PublicProps, Readonly<{
    modelValue?: Exclude<BFormSpinbuttonProps["modelValue"], undefined>;
} & Omit<BFormSpinbuttonProps, "modelValue">> & Readonly<{
    "onUpdate:modelValue"?: ((value: number | null) => any) | undefined;
    onChange?: ((value: number | null) => any) | undefined;
}>, {
    disabled: boolean;
    form: string;
    id: string;
    name: string;
    placeholder: string;
    readonly: boolean;
    required: boolean;
    size: import('../..').Size;
    state: import('../..').ValidationState;
    max: import('../../types/CommonTypes').Numberish;
    min: import('../../types/CommonTypes').Numberish;
    step: import('../../types/CommonTypes').Numberish;
    wrap: boolean;
    ariaLabel: string;
    inline: boolean;
    vertical: boolean;
    ariaControls: string;
    formatterFn: (value: number) => string;
    labelDecrement: string;
    labelIncrement: string;
    locale: string;
    repeatDelay: import('../../types/CommonTypes').Numberish;
    repeatInterval: import('../../types/CommonTypes').Numberish;
    repeatStepMultiplier: import('../../types/CommonTypes').Numberish;
    repeatThreshold: import('../../types/CommonTypes').Numberish;
}, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {
    _element: HTMLDivElement;
}, HTMLDivElement>, Readonly<{
    decrement?: (props: {
        hasFocus: boolean;
    }) => any;
    increment?: (props: {
        hasFocus: boolean;
    }) => any;
}> & {
    decrement?: (props: {
        hasFocus: boolean;
    }) => any;
    increment?: (props: {
        hasFocus: boolean;
    }) => any;
}>;
export default _default;
type __VLS_WithTemplateSlots<T, S> = T & {
    new (): {
        $slots: S;
    };
};
