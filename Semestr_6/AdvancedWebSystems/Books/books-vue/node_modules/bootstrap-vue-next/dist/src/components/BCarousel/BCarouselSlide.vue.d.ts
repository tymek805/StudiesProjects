import { BCarouselSlideProps } from '../../types/ComponentProps';
declare function __VLS_template(): {
    attrs: Partial<{}>;
    slots: Readonly<{
        caption?: (props: Record<string, never>) => any;
        default?: (props: Record<string, never>) => any;
        img?: (props: Record<string, never>) => any;
        text?: (props: Record<string, never>) => any;
    }> & {
        caption?: (props: Record<string, never>) => any;
        default?: (props: Record<string, never>) => any;
        img?: (props: Record<string, never>) => any;
        text?: (props: Record<string, never>) => any;
    };
    refs: {};
    rootEl: HTMLDivElement;
};
type __VLS_TemplateResult = ReturnType<typeof __VLS_template>;
declare const __VLS_component: import('vue').DefineComponent<BCarouselSlideProps, {
    _interval: Readonly<import('vue').Ref<number | "requestAnimationFrame" | undefined, number | "requestAnimationFrame" | undefined>>;
    _id: import('vue').ComputedRef<string>;
}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<BCarouselSlideProps> & Readonly<{}>, {
    id: string;
    text: string;
    imgAlt: string;
    imgHeight: import('../../types/CommonTypes').Numberish;
    imgSrc: string;
    imgWidth: import('../../types/CommonTypes').Numberish;
    caption: string;
    interval: number | "requestAnimationFrame";
    background: string;
    captionTag: string;
    contentTag: string;
    contentVisibleUp: string;
    imgBlank: boolean;
    imgBlankColor: string;
    imgSrcset: string | readonly string[];
    textTag: string;
}, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {}, HTMLDivElement>;
declare const _default: __VLS_WithTemplateSlots<typeof __VLS_component, __VLS_TemplateResult["slots"]>;
export default _default;
type __VLS_WithTemplateSlots<T, S> = T & {
    new (): {
        $slots: S;
    };
};
