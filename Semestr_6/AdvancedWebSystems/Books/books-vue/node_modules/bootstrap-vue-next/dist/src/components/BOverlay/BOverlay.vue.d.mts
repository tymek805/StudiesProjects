import { BOverlayProps } from '../../types/ComponentProps';
import { BgColorVariant } from '../../types/ColorTypes';
declare const spinnerAttrs: import('vue').ComputedRef<{
    type: import('../..').SpinnerType;
    variant: keyof import('../..').BaseColorVariant | null | undefined;
    small: boolean;
}>;
declare function __VLS_template(): {
    attrs: Partial<{}>;
    slots: Readonly<{
        default?: (props: Record<string, never>) => any;
        overlay?: (props: typeof spinnerAttrs.value) => any;
    }> & {
        default?: (props: Record<string, never>) => any;
        overlay?: (props: typeof spinnerAttrs.value) => any;
    };
    refs: {};
    rootEl: any;
};
type __VLS_TemplateResult = ReturnType<typeof __VLS_template>;
declare const __VLS_component: import('vue').DefineComponent<BOverlayProps, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {
    click: (value: MouseEvent) => any;
    hidden: () => any;
    shown: () => any;
}, string, import('vue').PublicProps, Readonly<BOverlayProps> & Readonly<{
    onClick?: ((value: MouseEvent) => any) | undefined;
    onHidden?: (() => any) | undefined;
    onShown?: (() => any) | undefined;
}>, {
    opacity: import('../../types/CommonTypes').Numberish;
    variant: BgColorVariant | "white" | "transparent" | null;
    bgColor: string;
    blur: string | null;
    fixed: boolean;
    noCenter: boolean;
    noFade: boolean;
    noSpinner: boolean;
    noWrap: boolean;
    overlayTag: string;
    show: boolean;
    spinnerSmall: boolean;
    spinnerType: import('../..').SpinnerType;
    spinnerVariant: import('../..').ColorVariant | null;
    wrapTag: string;
    zIndex: import('../../types/CommonTypes').Numberish;
    rounded: boolean | import('../..').RadiusElement;
    roundedTop: boolean | import('../..').RadiusElement;
    roundedBottom: boolean | import('../..').RadiusElement;
    roundedStart: boolean | import('../..').RadiusElement;
    roundedEnd: boolean | import('../..').RadiusElement;
}, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {}, any>;
declare const _default: __VLS_WithTemplateSlots<typeof __VLS_component, __VLS_TemplateResult["slots"]>;
export default _default;
type __VLS_WithTemplateSlots<T, S> = T & {
    new (): {
        $slots: S;
    };
};
