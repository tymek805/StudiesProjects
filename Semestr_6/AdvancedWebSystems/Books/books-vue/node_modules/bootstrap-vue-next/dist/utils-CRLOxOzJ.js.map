{"version":3,"file":"utils-CRLOxOzJ.js","sources":["../src/directives/utils.ts"],"sourcesContent":["import type {ComponentInternalInstance, DirectiveBinding, VNode} from 'vue'\n\ninterface _ComponentInternalInstance extends ComponentInternalInstance {\n  provides?: Record<string, unknown>\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  setupState?: any\n}\n\ninterface _VNode extends VNode {\n  ctx?: _ComponentInternalInstance | null\n  ssContent?: VNode | null\n}\n\n// taken from vuetify https://github.com/vuetifyjs/vuetify/blob/master/packages/vuetify/src/composables/directiveComponent.ts\n\nexport function findProvides(binding: DirectiveBinding, vnode: _VNode): Record<string, unknown> {\n  const provides =\n    (vnode.ctx === binding.instance!.$\n      ? findComponentParent(vnode, binding.instance!.$)?.provides\n      : vnode.ctx?.provides) ?? binding.instance!.$.provides\n\n  return provides\n}\n\nexport function findComponentParent(\n  vnode: VNode,\n  root: ComponentInternalInstance\n): _ComponentInternalInstance | null {\n  // Walk the tree from root until we find the child vnode\n  const stack = new Set<VNode>()\n  const walk = (children: _VNode[]): boolean => {\n    for (const child of children) {\n      if (!child) continue\n\n      if (child === vnode || (child.el && vnode.el && child.el === vnode.el)) {\n        return true\n      }\n\n      stack.add(child)\n      let result\n      if (child.suspense) {\n        result = walk([child.ssContent!])\n      } else if (Array.isArray(child.children)) {\n        result = walk(child.children as VNode[])\n      } else if (child.component?.vnode) {\n        result = walk([child.component?.subTree])\n      }\n      if (result) {\n        return result\n      }\n      stack.delete(child)\n    }\n\n    return false\n  }\n  if (!walk([root.subTree])) {\n    // eslint-disable-next-line no-console\n    console.error('Could not find original vnode,  will not inherit provides')\n    return root\n  }\n\n  // Return the first component parent\n  const result = Array.from(stack).reverse()\n  for (const child of result) {\n    if (child.component) {\n      return child.component\n    }\n  }\n  return root\n}\n"],"names":["binding","vnode","ctx","instance","$","_a","root","stack","Set","walk","children","child","el","result","add","suspense","ssContent","Array","isArray","result2","component","_b","subTree","delete","console","error","from","reverse","findComponentParent","provides"],"mappings":"kCAegB,SAAaA,EAA2BC,WAM/C,OAJJA,EAAMC,MAAQF,EAAQG,SAAUC,EAC7B,OAAAC,EAMQ,SACdJ,EACAK,GAGM,MAAAC,MAAYC,IACZC,EAAQC,YACZ,IAAA,MAAWC,KAASD,EAAU,CAC5B,IAAKC,EAAO,SAER,GAAAA,IAAUV,GAAUU,EAAMC,IAAMX,EAAMW,IAAMD,EAAMC,KAAOX,EAAMW,GAC1D,OAAA,EAILC,IAAAA,EAQJ,GATAN,EAAMO,IAAIH,GAENA,EAAMI,SACRF,EAASJ,EAAK,CAACE,EAAMK,YACZC,MAAMC,QAAQP,EAAMD,UACpBS,EAAAV,EAAKE,EAAMD,WACX,OAAAL,EAAAM,EAAMS,gBAAN,EAAAf,EAAiBJ,SAC1BY,EAASJ,EAAK,CAAC,OAAAY,EAAAV,EAAMS,gBAAN,EAAAC,EAAiBC,WAE9BT,EACKA,OAAAA,EAETN,EAAMgB,OAAOZ,EAAK,CAGb,OAAA,CAAA,EAET,IAAKF,EAAK,CAACH,EAAKgB,UAGP,OADPE,QAAQC,MAAM,6DACPnB,EAIT,MAAMO,EAASI,MAAMS,KAAKnB,GAAOoB,UACjC,IAAA,MAAWhB,KAASE,EAClB,GAAIF,EAAMS,UACR,OAAOT,EAAMS,UAGV,OAAAd,CACT,CAnDQsB,CAAoB3B,EAAOD,EAAQG,SAAUC,SAA7C,EAAAC,EAAiDwB,SACjD,OAAAR,EAAMpB,EAAAC,cAAK2B,WAAa7B,EAAQG,SAAUC,EAAEyB,QAGpD"}