{"version":3,"file":"useFormInput-ByUM6zh5.js","sources":["../src/utils/normalizeInput.ts","../src/composables/useFormInput.ts"],"sourcesContent":["import type {Numberish} from '../types/CommonTypes'\n\nexport const normalizeInput = (\n  v: Numberish | null,\n  modelModifiers: Record<'number' | 'lazy' | 'trim', true | undefined>\n) => {\n  if (v === null) return\n  let update = v\n  if (modelModifiers.number && typeof update === 'string' && update !== '') {\n    const parsed = Number.parseFloat(update)\n    update = Number.isNaN(parsed) ? update : parsed\n  }\n  return update\n}\n","import type {Numberish} from '../types/CommonTypes'\nimport {\n  computed,\n  inject,\n  nextTick,\n  onActivated,\n  onMounted,\n  ref,\n  type Ref,\n  type ShallowRef,\n} from 'vue'\nimport {useAriaInvalid} from './useAriaInvalid'\nimport {useId} from './useId'\nimport {useDebounceFn, useFocus, useToNumber} from '@vueuse/core'\nimport type {CommonInputProps} from '../types/FormCommonInputProps'\nimport {formGroupPluginKey} from '../utils/keys'\nimport {useStateClass} from './useStateClass'\n\nexport const useFormInput = (\n  props: Readonly<CommonInputProps>,\n  input:\n    | Readonly<ShallowRef<HTMLInputElement | null>>\n    | Readonly<ShallowRef<HTMLTextAreaElement | null>>,\n  modelValue: Ref<Numberish | null>,\n  modelModifiers: Record<'number' | 'lazy' | 'trim', true | undefined>\n) => {\n  const forceUpdateKey = ref(0)\n\n  const computedId = useId(() => props.id, 'input')\n  const debounceNumber = useToNumber(() => props.debounce ?? 0)\n  const debounceMaxWaitNumber = useToNumber(() => props.debounceMaxWait ?? NaN)\n\n  // This automatically adds the appropriate \"for\" attribute to a BFormGroup label\n  const formGroupData = inject(formGroupPluginKey, null)?.(computedId)\n  const computedState = computed(() =>\n    props.state !== undefined ? props.state : (formGroupData?.state.value ?? null)\n  )\n  const computedAriaInvalid = useAriaInvalid(() => props.ariaInvalid, computedState)\n  const stateClass = useStateClass(computedState)\n\n  const internalUpdateModelValue = useDebounceFn(\n    (value: Numberish) => {\n      modelValue.value = value\n    },\n    () => (modelModifiers.lazy === true ? 0 : debounceNumber.value),\n    {maxWait: () => (modelModifiers.lazy === true ? NaN : debounceMaxWaitNumber.value)}\n  )\n\n  const updateModelValue = (value: Numberish, force = false) => {\n    if (modelModifiers.lazy === true && force === false) return\n    internalUpdateModelValue(value)\n  }\n\n  const {focused} = useFocus(input, {\n    initialValue: props.autofocus,\n  })\n\n  const _formatValue = (value: string, evt: Readonly<Event>, force = false) => {\n    if (props.formatter !== undefined && (!props.lazyFormatter || force)) {\n      return props.formatter(value, evt)\n    }\n    return value\n  }\n  onMounted(() => {\n    if (input.value) {\n      input.value.value = modelValue.value?.toString() ?? ''\n    }\n  })\n\n  onActivated(() => {\n    nextTick(() => {\n      if (props.autofocus) {\n        focused.value = true\n      }\n    })\n  })\n\n  const onInput = (evt: Readonly<Event>) => {\n    const {value} = evt.target as HTMLInputElement\n    const formattedValue = _formatValue(value, evt)\n    if (evt.defaultPrevented) {\n      evt.preventDefault()\n      return\n    }\n\n    const nextModel = formattedValue\n\n    updateModelValue(nextModel)\n  }\n\n  const onChange = (evt: Readonly<Event>) => {\n    const {value} = evt.target as HTMLInputElement\n    const formattedValue = _formatValue(value, evt)\n    if (evt.defaultPrevented) {\n      evt.preventDefault()\n      return\n    }\n\n    const nextModel = formattedValue\n    if (modelValue.value !== nextModel) {\n      updateModelValue(formattedValue, true)\n    }\n  }\n\n  const onBlur = (evt: Readonly<FocusEvent>) => {\n    if (!modelModifiers.lazy && !props.lazyFormatter && !modelModifiers.trim) return\n\n    const {value} = evt.target as HTMLInputElement\n    const formattedValue = _formatValue(value, evt, true)\n\n    const nextModel = modelModifiers.trim ? formattedValue.trim() : formattedValue\n    const needsForceUpdate = nextModel.length !== formattedValue.length\n    if (modelValue.value !== nextModel) {\n      updateModelValue(formattedValue, true)\n    }\n    if (modelModifiers.trim && needsForceUpdate) {\n      // The value is trimmed but there would still exist some white space\n      // So, force update the value. You need to bind this to :key on the input element\n      forceUpdateKey.value = forceUpdateKey.value + 1\n    }\n  }\n\n  const focus = () => {\n    if (!props.disabled) {\n      focused.value = true\n    }\n  }\n\n  const blur = () => {\n    if (!props.disabled) {\n      focused.value = false\n    }\n  }\n\n  return {\n    input,\n    computedId,\n    computedAriaInvalid,\n    onInput,\n    onChange,\n    onBlur,\n    focus,\n    blur,\n    forceUpdateKey,\n    stateClass,\n  }\n}\n"],"names":["v","modelModifiers","update","number","parsed","Number","parseFloat","isNaN","props","input","modelValue","forceUpdateKey","ref","computedId","useId","id","debounceNumber","useToNumber","debounce","debounceMaxWaitNumber","debounceMaxWait","NaN","formGroupData","inject","vue","formGroupPluginKey","_a","computedState","computed","state","value","computedAriaInvalid","useAriaInvalid","ariaInvalid","stateClass","useStateClass","internalUpdateModelValue","useDebounceFn","lazy","maxWait","updateModelValue","force","focused","useFocus","initialValue","autofocus","_formatValue","evt","formatter","lazyFormatter","onMounted","toString","onActivated","nextTick","onInput","target","formattedValue","defaultPrevented","preventDefault","onChange","nextModel","onBlur","trim","needsForceUpdate","length","focus","disabled","blur"],"mappings":"iRAE8B,CAC5BA,EACAC,KAEA,GAAU,OAAND,EAAY,OAChB,IAAIE,EAASF,EACb,GAAIC,EAAeE,QAA4B,iBAAXD,GAAkC,KAAXA,EAAe,CAClE,MAAAE,EAASC,OAAOC,WAAWJ,GACjCA,EAASG,OAAOE,MAAMH,GAAUF,EAASE,CAAA,CAEpC,OAAAF,CAAA,uBCMmB,CAC1BM,EACAC,EAGAC,EACAT,WAEM,MAAAU,EAAiBC,MAAI,GAErBC,EAAaC,EAAAA,OAAM,IAAMN,EAAMO,IAAI,SACnCC,EAAiBC,EAAAA,aAAY,IAAMT,EAAMU,UAAY,IACrDC,EAAwBF,EAAAA,aAAY,IAAMT,EAAMY,iBAAmBC,MAGnEC,EAAgBC,OAAAA,EAAAC,EAAAD,OAAOE,EAAoBA,mBAAA,YAAQ,EAAAC,EAAAb,GACnDc,EAAgBC,EAAAA,UAAS,SACb,IAAhBpB,EAAMqB,MAAsBrB,EAAMqB,OAAS,MAAAP,OAAA,EAAAA,EAAeO,MAAMC,QAAS,OAErEC,EAAsBC,EAAAA,gBAAe,IAAMxB,EAAMyB,aAAaN,GAC9DO,EAAaC,gBAAcR,GAE3BS,EAA2BC,EAAAA,eAC9BP,IACCpB,EAAWoB,MAAQA,CAAA,IAErB,KAA+B,IAAxB7B,EAAeqC,KAAgB,EAAItB,EAAec,OACzD,CAACS,QAAS,KAA+B,IAAxBtC,EAAeqC,KAAgBjB,IAAMF,EAAsBW,QAGxEU,EAAmB,CAACV,EAAkBW,GAAQ,MACtB,IAAxBxC,EAAeqC,OAA2B,IAAVG,GACpCL,EAAyBN,EAAK,GAG1BY,QAACA,GAAWC,EAAAA,SAASlC,EAAO,CAChCmC,aAAcpC,EAAMqC,YAGhBC,EAAe,CAAChB,EAAeiB,EAAsBN,GAAQ,SACzC,IAApBjC,EAAMwC,WAA6BxC,EAAMyC,gBAAiBR,EAGvDX,EAFEtB,EAAMwC,UAAUlB,EAAOiB,GAIlCG,EAAAA,WAAU,WACJzC,EAAMqB,QACRrB,EAAMqB,MAAMA,OAAQ,OAAAJ,EAAAhB,EAAWoB,YAAX,EAAAJ,EAAkByB,aAAc,GAAA,IAIxDC,EAAAA,aAAY,KACVC,EAAAA,UAAS,KACH7C,EAAMqC,YACRH,EAAQZ,OAAQ,EAAA,GAEnB,IA4DI,MAAA,CACLrB,QACAI,aACAkB,sBACAuB,QA7DeP,IACT,MAAAjB,MAACA,GAASiB,EAAIQ,OACdC,EAAiBV,EAAahB,EAAOiB,GAC3C,GAAIA,EAAIU,iBAEN,YADAV,EAAIW,iBAMNlB,EAFkBgB,EAEQ,EAoD1BG,SAjDgBZ,IACV,MAAAjB,MAACA,GAASiB,EAAIQ,OACdC,EAAiBV,EAAahB,EAAOiB,GAC3C,GAAIA,EAAIU,iBAEN,YADAV,EAAIW,iBAIN,MAAME,EAAYJ,EACd9C,EAAWoB,QAAU8B,GACvBpB,EAAiBgB,GAAgB,EAAI,EAwCvCK,OApCcd,IACV,IAAC9C,EAAeqC,OAAS9B,EAAMyC,gBAAkBhD,EAAe6D,KAAM,OAEpE,MAAAhC,MAACA,GAASiB,EAAIQ,OACdC,EAAiBV,EAAahB,EAAOiB,GAAK,GAE1Ca,EAAY3D,EAAe6D,KAAON,EAAeM,OAASN,EAC1DO,EAAmBH,EAAUI,SAAWR,EAAeQ,OACzDtD,EAAWoB,QAAU8B,GACvBpB,EAAiBgB,GAAgB,GAE/BvD,EAAe6D,MAAQC,IAGVpD,EAAAmB,MAAQnB,EAAemB,MAAQ,EAAA,EAuBhDmC,MAnBY,KACPzD,EAAM0D,WACTxB,EAAQZ,OAAQ,EAAA,EAkBlBqC,KAdW,KACN3D,EAAM0D,WACTxB,EAAQZ,OAAQ,EAAA,EAalBnB,iBACAuB,aACF"}