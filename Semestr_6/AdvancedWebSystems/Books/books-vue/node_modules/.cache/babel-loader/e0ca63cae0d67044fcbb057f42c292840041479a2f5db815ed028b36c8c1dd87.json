{"ast":null,"code":"import { computed, toValue } from \"vue\";\nimport { R as RX_NUMBER } from \"./constants-COk0ugyL.mjs\";\nconst useNumberishToStyle = (el, unit = \"px\") => computed(() => {\n  const value = toValue(el);\n  const resolvedUnit = toValue(unit);\n  return RX_NUMBER.test(String(value)) ? `${Number(value)}${resolvedUnit}` : value;\n});\nexport { useNumberishToStyle as u };","map":{"version":3,"names":["useNumberishToStyle","el","unit","computed","value","toValue","resolvedUnit","RX_NUMBER","test","String","Number"],"sources":["../src/composables/useNumberishToStyle.ts"],"sourcesContent":["import {computed, type MaybeRefOrGetter, toValue} from 'vue'\nimport type {Numberish} from '../types/CommonTypes'\nimport {RX_NUMBER} from '../utils/constants'\n\nexport const useNumberishToStyle = (\n  el: MaybeRefOrGetter<Numberish | undefined>,\n  /**\n   * The unit to use when converting a numeric value to a string\n   *\n   * @default 'px'\n   */\n  unit: MaybeRefOrGetter<string> = 'px'\n) =>\n  computed(() => {\n    const value = toValue(el)\n    const resolvedUnit = toValue(unit)\n    // If num is non-numeric, return val as-is (sm, md, lg, undefined or any other custom value), otherwise return num as a px value\n    return RX_NUMBER.test(String(value))\n      ? `${Number(value)}${resolvedUnit}`\n      : (value as string | undefined)\n  })\n"],"mappings":";;AAIO,MAAMA,mBAAA,GAAsBA,CACjCC,EAAA,EAMAC,IAAA,GAAiC,SAEjCC,QAAA,CAAS,MAAM;EACP,MAAAC,KAAA,GAAQC,OAAA,CAAQJ,EAAE;EAClB,MAAAK,YAAA,GAAeD,OAAA,CAAQH,IAAI;EAEjC,OAAOK,SAAA,CAAUC,IAAA,CAAKC,MAAA,CAAOL,KAAK,CAAC,IAC/B,GAAGM,MAAA,CAAON,KAAK,CAAC,GAAGE,YAAY,KAC9BF,KAAA;AACP,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}