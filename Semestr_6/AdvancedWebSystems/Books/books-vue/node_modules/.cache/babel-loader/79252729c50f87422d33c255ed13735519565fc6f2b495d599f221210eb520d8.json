{"ast":null,"code":"import \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport \"core-js/modules/es.iterator.some.js\";\nimport { computed, toValue, defineComponent, provide, toRef, createBlock, openBlock, resolveDynamicComponent, unref, normalizeClass, withCtx, createElementBlock, renderSlot, mergeProps, inject, createElementVNode } from \"vue\";\nimport { u as useDefaults } from \"./useDefaults-DANje4tM.mjs\";\nimport { v as navbarInjectionKey, g as globalShowHideStorageInjectionKey } from \"./keys-D3gOZjD-.mjs\";\nimport { u as useColorVariantClasses } from \"./useColorVariantClasses-ZDE19TZw.mjs\";\nimport { u as useBLinkHelper, _ as _sfc_main$4 } from \"./BLink.vue_vue_type_script_setup_true_lang-CinzoAgQ.mjs\";\nimport { u as useAlignment } from \"./useAlignment-Cw-9AVid.mjs\";\nconst useContainerClasses = value => computed(() => {\n  const resolvedValue = toValue(value);\n  return {\n    container: resolvedValue === true,\n    [`container-${resolvedValue}`]: typeof resolvedValue === \"string\"\n  };\n});\nconst _sfc_main$3 = /* @__PURE__ */defineComponent({\n  __name: \"BNavbar\",\n  props: {\n    autoClose: {\n      type: Boolean,\n      default: true\n    },\n    container: {\n      type: [Boolean, String],\n      default: \"fluid\"\n    },\n    fixed: {\n      default: void 0\n    },\n    print: {\n      type: Boolean,\n      default: false\n    },\n    sticky: {\n      default: void 0\n    },\n    tag: {\n      default: \"nav\"\n    },\n    toggleable: {\n      type: [Boolean, String],\n      default: false\n    },\n    variant: {\n      default: null\n    }\n  },\n  setup(__props) {\n    const _props = __props;\n    const props = useDefaults(_props, \"BNavbar\");\n    const computedRole = computed(() => props.tag === \"nav\" ? void 0 : \"navigation\");\n    const containerClass = useContainerClasses(() => props.container);\n    const colorClasses = useColorVariantClasses(computed(() => ({\n      bgVariant: props.variant\n    })));\n    const computedClasses = computed(() => [colorClasses.value, {\n      \"d-print\": props.print,\n      [`sticky-${props.sticky}`]: props.sticky !== void 0,\n      [`fixed-${props.fixed}`]: props.fixed !== void 0,\n      \"navbar-expand\": props.toggleable === false,\n      [`navbar-expand-${props.toggleable}`]: typeof props.toggleable === \"string\"\n    }]);\n    provide(navbarInjectionKey, {\n      tag: toRef(() => props.tag),\n      autoClose: toRef(() => props.autoClose)\n    });\n    return (_ctx, _cache) => {\n      return openBlock(), createBlock(resolveDynamicComponent(unref(props).tag), {\n        class: normalizeClass([\"navbar\", computedClasses.value]),\n        role: computedRole.value\n      }, {\n        default: withCtx(() => [unref(props).container !== false ? (openBlock(), createElementBlock(\"div\", {\n          key: 0,\n          class: normalizeClass(unref(containerClass))\n        }, [renderSlot(_ctx.$slots, \"default\")], 2)) : renderSlot(_ctx.$slots, \"default\", {\n          key: 1\n        })]),\n        _: 3\n      }, 8, [\"class\", \"role\"]);\n    };\n  }\n});\nconst _sfc_main$2 = /* @__PURE__ */defineComponent({\n  __name: \"BNavbarBrand\",\n  props: {\n    tag: {\n      default: \"div\"\n    },\n    active: {\n      type: Boolean,\n      default: void 0\n    },\n    activeClass: {\n      default: void 0\n    },\n    disabled: {\n      type: Boolean,\n      default: void 0\n    },\n    exactActiveClass: {\n      default: void 0\n    },\n    href: {\n      default: void 0\n    },\n    icon: {\n      type: Boolean,\n      default: void 0\n    },\n    noRel: {\n      type: Boolean\n    },\n    opacity: {\n      default: void 0\n    },\n    opacityHover: {\n      default: void 0\n    },\n    prefetch: {\n      type: Boolean\n    },\n    prefetchOn: {},\n    noPrefetch: {\n      type: Boolean\n    },\n    prefetchedClass: {},\n    rel: {\n      default: void 0\n    },\n    replace: {\n      type: Boolean,\n      default: void 0\n    },\n    routerComponentName: {\n      default: void 0\n    },\n    stretched: {\n      type: Boolean,\n      default: false\n    },\n    target: {\n      default: void 0\n    },\n    to: {\n      default: void 0\n    },\n    underlineOffset: {\n      default: void 0\n    },\n    underlineOffsetHover: {\n      default: void 0\n    },\n    underlineOpacity: {\n      default: void 0\n    },\n    underlineOpacityHover: {\n      default: void 0\n    },\n    underlineVariant: {\n      default: void 0\n    },\n    variant: {\n      default: void 0\n    }\n  },\n  setup(__props) {\n    const _props = __props;\n    const props = useDefaults(_props, \"BNavbarBrand\");\n    const {\n      computedLink,\n      computedLinkProps\n    } = useBLinkHelper(props, [\"active\", \"activeClass\", \"append\", \"disabled\", \"href\", \"rel\", \"replace\", \"routerComponentName\", \"target\", \"to\", \"variant\", \"opacity\", \"opacityHover\", \"underlineVariant\", \"underlineOffset\", \"underlineOffsetHover\", \"underlineOpacity\", \"underlineOpacityHover\", \"icon\"]);\n    const computedTag = computed(() => computedLink.value ? _sfc_main$4 : props.tag);\n    return (_ctx, _cache) => {\n      return openBlock(), createBlock(resolveDynamicComponent(computedTag.value), mergeProps({\n        class: \"navbar-brand\"\n      }, unref(computedLinkProps)), {\n        default: withCtx(() => [renderSlot(_ctx.$slots, \"default\")]),\n        _: 3\n      }, 16);\n    };\n  }\n});\nconst _sfc_main$1 = /* @__PURE__ */defineComponent({\n  __name: \"BNavbarNav\",\n  props: {\n    align: {\n      default: void 0\n    },\n    fill: {\n      type: Boolean,\n      default: false\n    },\n    justified: {\n      type: Boolean,\n      default: false\n    },\n    small: {\n      type: Boolean,\n      default: false\n    },\n    tag: {\n      default: \"ul\"\n    }\n  },\n  setup(__props) {\n    const _props = __props;\n    const props = useDefaults(_props, \"BNavbarNav\");\n    const alignment = useAlignment(() => props.align);\n    const computedClasses = computed(() => ({\n      \"nav-fill\": props.fill,\n      \"nav-justified\": props.justified,\n      [alignment.value]: props.align !== void 0,\n      \"small\": props.small\n    }));\n    return (_ctx, _cache) => {\n      return openBlock(), createElementBlock(\"ul\", {\n        class: normalizeClass([\"navbar-nav\", computedClasses.value])\n      }, [renderSlot(_ctx.$slots, \"default\")], 2);\n    };\n  }\n});\nconst _hoisted_1 = [\"disabled\", \"aria-label\"];\nconst _sfc_main = /* @__PURE__ */defineComponent({\n  __name: \"BNavbarToggle\",\n  props: {\n    disabled: {\n      type: Boolean,\n      default: false\n    },\n    label: {\n      default: \"Toggle navigation\"\n    },\n    target: {\n      default: void 0\n    }\n  },\n  emits: [\"click\"],\n  setup(__props, {\n    emit: __emit\n  }) {\n    const _props = __props;\n    const props = useDefaults(_props, \"BNavbarToggle\");\n    const emit = __emit;\n    const computedClasses = computed(() => ({\n      disabled: props.disabled\n    }));\n    const showHideData = inject(globalShowHideStorageInjectionKey, void 0);\n    const collapseExpanded = computed(() => {\n      var _a;\n      if (!props.target || !showHideData) return false;\n      if (typeof props.target === \"string\") return ((_a = showHideData.map[props.target]) == null ? void 0 : _a.value) || false;\n      return props.target.some(target => {\n        var _a2;\n        return (_a2 = showHideData.map[target]) == null ? void 0 : _a2.value;\n      });\n    });\n    const toggleExpand = () => {\n      var _a;\n      if (!props.target || !showHideData) return;\n      if (typeof props.target === \"string\") {\n        (_a = showHideData.map[props.target]) == null ? void 0 : _a.toggle();\n        return;\n      }\n      props.target.forEach(target => {\n        var _a2;\n        return (_a2 = showHideData.map[target]) == null ? void 0 : _a2.toggle();\n      });\n    };\n    const onClick = e => {\n      if (!props.disabled) {\n        emit(\"click\", e);\n        toggleExpand();\n      }\n    };\n    return (_ctx, _cache) => {\n      return openBlock(), createElementBlock(\"button\", {\n        class: normalizeClass([\"navbar-toggler\", computedClasses.value]),\n        type: \"button\",\n        disabled: unref(props).disabled,\n        \"aria-label\": unref(props).label,\n        onClick\n      }, [renderSlot(_ctx.$slots, \"default\", {\n        expanded: collapseExpanded.value\n      }, () => [_cache[0] || (_cache[0] = createElementVNode(\"span\", {\n        class: \"navbar-toggler-icon\"\n      }, null, -1))])], 10, _hoisted_1);\n    };\n  }\n});\nexport { _sfc_main$3 as _, _sfc_main$2 as a, _sfc_main$1 as b, _sfc_main as c };","map":{"version":3,"names":["useContainerClasses","value","computed","resolvedValue","toValue","container","_props","__props","props","useDefaults","computedRole","tag","containerClass","colorClasses","useColorVariantClasses","bgVariant","variant","computedClasses","print","sticky","fixed","toggleable","provide","navbarInjectionKey","toRef","autoClose","computedLink","computedLinkProps","useBLinkHelper","computedTag","_sfc_main$4","alignment","useAlignment","align","fill","justified","small","emit","__emit","disabled","showHideData","inject","globalShowHideStorageInjectionKey","collapseExpanded","target","_a","map","some","_a2","toggleExpand","toggle","forEach","onClick","e"],"sources":["../src/composables/useContainerClasses.ts","../src/components/BNavbar/BNavbar.vue","../src/components/BNavbar/BNavbarBrand.vue","../src/components/BNavbar/BNavbarNav.vue","../src/components/BNavbar/BNavbarToggle.vue"],"sourcesContent":["import type {Breakpoint} from '../types/BreakpointProps'\nimport {computed, type MaybeRefOrGetter, toValue} from 'vue'\n\nexport const useContainerClasses = (value: MaybeRefOrGetter<boolean | Breakpoint | 'fluid'>) =>\n  computed(() => {\n    const resolvedValue = toValue(value)\n    return {\n      container: resolvedValue === true,\n      [`container-${resolvedValue}`]: typeof resolvedValue === 'string',\n    }\n  })\n","<template>\n  <component :is=\"props.tag\" class=\"navbar\" :class=\"computedClasses\" :role=\"computedRole\">\n    <div v-if=\"props.container !== false\" :class=\"containerClass\">\n      <slot />\n    </div>\n    <slot v-else />\n  </component>\n</template>\n\n<script setup lang=\"ts\">\nimport {computed, provide, toRef} from 'vue'\nimport type {BNavbarProps} from '../../types/ComponentProps'\nimport {useDefaults} from '../../composables/useDefaults'\nimport {useContainerClasses} from '../../composables/useContainerClasses'\nimport {navbarInjectionKey} from '../../utils/keys'\nimport {useColorVariantClasses} from '../../composables/useColorVariantClasses'\n\nconst _props = withDefaults(defineProps<BNavbarProps>(), {\n  autoClose: true,\n  container: 'fluid',\n  fixed: undefined,\n  print: false,\n  sticky: undefined,\n  tag: 'nav',\n  toggleable: false,\n  variant: null,\n})\nconst props = useDefaults(_props, 'BNavbar')\n\ndefineSlots<{\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  default?: (props: Record<string, never>) => any\n}>()\n\nconst computedRole = computed(() => (props.tag === 'nav' ? undefined : 'navigation'))\n\nconst containerClass = useContainerClasses(() => props.container)\n\nconst colorClasses = useColorVariantClasses(\n  computed(() => ({\n    bgVariant: props.variant,\n  }))\n)\nconst computedClasses = computed(() => [\n  colorClasses.value,\n  {\n    'd-print': props.print,\n    [`sticky-${props.sticky}`]: props.sticky !== undefined,\n    [`fixed-${props.fixed}`]: props.fixed !== undefined,\n    'navbar-expand': props.toggleable === false,\n    [`navbar-expand-${props.toggleable}`]: typeof props.toggleable === 'string',\n  },\n])\n\nprovide(navbarInjectionKey, {\n  tag: toRef(() => props.tag),\n  autoClose: toRef(() => props.autoClose),\n})\n</script>\n","<template>\n  <component :is=\"computedTag\" class=\"navbar-brand\" v-bind=\"computedLinkProps\">\n    <slot />\n  </component>\n</template>\n\n<script setup lang=\"ts\">\nimport BLink from '../BLink/BLink.vue'\nimport type {BNavbarBrandProps} from '../../types/ComponentProps'\nimport {useBLinkHelper} from '../../composables/useBLinkHelper'\nimport {useDefaults} from '../../composables/useDefaults'\nimport {computed} from 'vue'\n\ndefineSlots<{\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  default?: (props: Record<string, never>) => any\n}>()\n\nconst _props = withDefaults(defineProps<BNavbarBrandProps>(), {\n  tag: 'div',\n  // Link props\n  active: undefined,\n  activeClass: undefined,\n  disabled: undefined,\n  exactActiveClass: undefined,\n  href: undefined,\n  stretched: false,\n  icon: undefined,\n  opacity: undefined,\n  opacityHover: undefined,\n  rel: undefined,\n  replace: undefined,\n  routerComponentName: undefined,\n  target: undefined,\n  to: undefined,\n  underlineOffset: undefined,\n  underlineOffsetHover: undefined,\n  underlineOpacity: undefined,\n  underlineOpacityHover: undefined,\n  underlineVariant: undefined,\n  variant: undefined,\n  // End link props\n})\nconst props = useDefaults(_props, 'BNavbarBrand')\n\nconst {computedLink, computedLinkProps} = useBLinkHelper(props, [\n  'active',\n  'activeClass',\n  'append',\n  'disabled',\n  'href',\n  'rel',\n  'replace',\n  'routerComponentName',\n  'target',\n  'to',\n  'variant',\n  'opacity',\n  'opacityHover',\n  'underlineVariant',\n  'underlineOffset',\n  'underlineOffsetHover',\n  'underlineOpacity',\n  'underlineOpacityHover',\n  'icon',\n])\n\nconst computedTag = computed(() => (computedLink.value ? BLink : props.tag))\n</script>\n","<template>\n  <ul class=\"navbar-nav\" :class=\"computedClasses\">\n    <slot />\n  </ul>\n</template>\n\n<script setup lang=\"ts\">\nimport type {BNavbarNavProps} from '../../types/ComponentProps'\nimport {computed} from 'vue'\nimport {useAlignment} from '../../composables/useAlignment'\nimport {useDefaults} from '../../composables/useDefaults'\n\nconst _props = withDefaults(defineProps<BNavbarNavProps>(), {\n  align: undefined,\n  fill: false,\n  justified: false,\n  small: false,\n  tag: 'ul',\n})\nconst props = useDefaults(_props, 'BNavbarNav')\n\ndefineSlots<{\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  default?: (props: Record<string, never>) => any\n}>()\n\nconst alignment = useAlignment(() => props.align)\n\nconst computedClasses = computed(() => ({\n  'nav-fill': props.fill,\n  'nav-justified': props.justified,\n  [alignment.value]: props.align !== undefined,\n  'small': props.small,\n}))\n</script>\n","<template>\n  <button\n    class=\"navbar-toggler\"\n    type=\"button\"\n    :class=\"computedClasses\"\n    :disabled=\"props.disabled\"\n    :aria-label=\"props.label\"\n    @click=\"onClick\"\n  >\n    <slot :expanded=\"collapseExpanded\">\n      <span class=\"navbar-toggler-icon\" />\n    </slot>\n  </button>\n</template>\n\n<script setup lang=\"ts\">\nimport type {BNavbarToggleProps} from '../../types/ComponentProps'\nimport {computed, inject} from 'vue'\nimport {useDefaults} from '../../composables/useDefaults'\nimport {globalShowHideStorageInjectionKey} from '../../utils/keys'\n\nconst _props = withDefaults(defineProps<BNavbarToggleProps>(), {\n  label: 'Toggle navigation',\n  disabled: false,\n  target: undefined,\n})\nconst props = useDefaults(_props, 'BNavbarToggle')\n\nconst emit = defineEmits<{\n  click: [value: MouseEvent]\n}>()\n\ndefineSlots<{\n  default?: (props: {\n    expanded: boolean\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  }) => any\n}>()\n\nconst computedClasses = computed(() => ({\n  disabled: props.disabled,\n}))\n\nconst showHideData = inject(globalShowHideStorageInjectionKey, undefined)\n\nconst collapseExpanded = computed(() => {\n  if (!props.target || !showHideData) return false\n  if (typeof props.target === 'string') return showHideData.map[props.target]?.value || false\n  return props.target.some((target) => showHideData.map[target]?.value)\n})\nconst toggleExpand = () => {\n  if (!props.target || !showHideData) return\n  if (typeof props.target === 'string') {\n    showHideData.map[props.target]?.toggle()\n    return\n  }\n  props.target.forEach((target) => showHideData.map[target]?.toggle())\n}\n\nconst onClick = (e: Readonly<MouseEvent>): void => {\n  if (!props.disabled) {\n    emit('click', e)\n    toggleExpand()\n  }\n}\n</script>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}