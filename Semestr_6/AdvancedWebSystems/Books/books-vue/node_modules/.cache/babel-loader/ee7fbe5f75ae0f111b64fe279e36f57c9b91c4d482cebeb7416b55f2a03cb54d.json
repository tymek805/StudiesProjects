{"ast":null,"code":"import { defineComponent, mergeModels, useModel, useTemplateRef, computed, createElementBlock, openBlock, unref, normalizeClass } from \"vue\";\nimport { u as useDefaults } from \"./useDefaults-DANje4tM.mjs\";\nimport { n as normalizeInput, u as useFormInput } from \"./useFormInput-BA20uvAP.mjs\";\nconst _hoisted_1 = [\"id\", \"value\", \"name\", \"form\", \"type\", \"disabled\", \"placeholder\", \"required\", \"autocomplete\", \"readonly\", \"min\", \"max\", \"step\", \"list\", \"aria-required\", \"aria-invalid\"];\nconst _sfc_main = /* @__PURE__ */defineComponent({\n  __name: \"BFormInput\",\n  props: /* @__PURE__ */mergeModels({\n    max: {\n      default: void 0\n    },\n    min: {\n      default: void 0\n    },\n    step: {\n      default: void 0\n    },\n    type: {\n      default: \"text\"\n    },\n    ariaInvalid: {\n      type: [Boolean, String],\n      default: void 0\n    },\n    autocomplete: {\n      default: void 0\n    },\n    autofocus: {\n      type: Boolean,\n      default: false\n    },\n    disabled: {\n      type: Boolean,\n      default: false\n    },\n    form: {\n      default: void 0\n    },\n    formatter: {\n      type: Function,\n      default: void 0\n    },\n    id: {\n      default: void 0\n    },\n    lazyFormatter: {\n      type: Boolean,\n      default: false\n    },\n    list: {\n      default: void 0\n    },\n    name: {\n      default: void 0\n    },\n    placeholder: {\n      default: void 0\n    },\n    plaintext: {\n      type: Boolean,\n      default: false\n    },\n    readonly: {\n      type: Boolean,\n      default: false\n    },\n    required: {\n      type: Boolean,\n      default: false\n    },\n    size: {\n      default: void 0\n    },\n    state: {\n      type: [Boolean, null],\n      default: void 0\n    },\n    debounce: {\n      default: 0\n    },\n    debounceMaxWait: {\n      default: NaN\n    }\n  }, {\n    \"modelValue\": {\n      default: \"\"\n    },\n    \"modelModifiers\": {}\n  }),\n  emits: [\"update:modelValue\"],\n  setup(__props, {\n    expose: __expose\n  }) {\n    const _props = __props;\n    const props = useDefaults(_props, \"BFormInput\");\n    const [modelValue, modelModifiers] = useModel(__props, \"modelValue\", {\n      set: v => normalizeInput(v, modelModifiers)\n    });\n    const input = useTemplateRef(\"_input\");\n    const {\n      computedId,\n      computedAriaInvalid,\n      onInput,\n      onChange,\n      onBlur,\n      stateClass,\n      focus,\n      blur,\n      forceUpdateKey\n    } = useFormInput(props, input, modelValue, modelModifiers);\n    const computedClasses = computed(() => {\n      const isRange = props.type === \"range\";\n      const isColor = props.type === \"color\";\n      return [stateClass.value, {\n        \"form-range\": isRange,\n        \"form-control\": isColor || !props.plaintext && !isRange,\n        \"form-control-color\": isColor,\n        \"form-control-plaintext\": props.plaintext && !isRange && !isColor,\n        [`form-control-${props.size}`]: !!props.size\n      }];\n    });\n    __expose({\n      blur,\n      element: input,\n      focus\n    });\n    return (_ctx, _cache) => {\n      return openBlock(), createElementBlock(\"input\", {\n        id: unref(computedId),\n        ref: \"_input\",\n        key: unref(forceUpdateKey),\n        value: unref(modelValue),\n        class: normalizeClass(computedClasses.value),\n        name: unref(props).name || void 0,\n        form: unref(props).form || void 0,\n        type: unref(props).type,\n        disabled: unref(props).disabled,\n        placeholder: unref(props).placeholder,\n        required: unref(props).required || void 0,\n        autocomplete: unref(props).autocomplete || void 0,\n        readonly: unref(props).readonly || unref(props).plaintext,\n        min: unref(props).min,\n        max: unref(props).max,\n        step: unref(props).step,\n        list: unref(props).type !== \"password\" ? unref(props).list : void 0,\n        \"aria-required\": unref(props).required || void 0,\n        \"aria-invalid\": unref(computedAriaInvalid),\n        onInput: _cache[0] || (_cache[0] =\n        //@ts-ignore\n        (...args) => unref(onInput) && unref(onInput)(...args)),\n        onChange: _cache[1] || (_cache[1] =\n        //@ts-ignore\n        (...args) => unref(onChange) && unref(onChange)(...args)),\n        onBlur: _cache[2] || (_cache[2] =\n        //@ts-ignore\n        (...args) => unref(onBlur) && unref(onBlur)(...args))\n      }, null, 42, _hoisted_1);\n    };\n  }\n});\nexport { _sfc_main as _ };","map":{"version":3,"names":["_props","__props","props","useDefaults","modelValue","modelModifiers","useModel","set","v","normalizeInput","input","useTemplateRef","computedId","computedAriaInvalid","onInput","onChange","onBlur","stateClass","focus","blur","forceUpdateKey","useFormInput","computedClasses","computed","isRange","type","isColor","value","plaintext","size","__expose","element"],"sources":["../src/components/BFormInput/BFormInput.vue"],"sourcesContent":["<template>\n  <input\n    :id=\"computedId\"\n    ref=\"_input\"\n    :key=\"forceUpdateKey\"\n    :value=\"modelValue\"\n    :class=\"computedClasses\"\n    :name=\"props.name || undefined\"\n    :form=\"props.form || undefined\"\n    :type=\"props.type\"\n    :disabled=\"props.disabled\"\n    :placeholder=\"props.placeholder\"\n    :required=\"props.required || undefined\"\n    :autocomplete=\"props.autocomplete || undefined\"\n    :readonly=\"props.readonly || props.plaintext\"\n    :min=\"props.min\"\n    :max=\"props.max\"\n    :step=\"props.step\"\n    :list=\"props.type !== 'password' ? props.list : undefined\"\n    :aria-required=\"props.required || undefined\"\n    :aria-invalid=\"computedAriaInvalid\"\n    @input=\"onInput\"\n    @change=\"onChange\"\n    @blur=\"onBlur\"\n  />\n</template>\n\n<script setup lang=\"ts\">\nimport {computed, useTemplateRef} from 'vue'\nimport {useDefaults} from '../../composables/useDefaults'\nimport {normalizeInput} from '../../utils/normalizeInput'\nimport type {BFormInputProps} from '../../types/ComponentProps'\nimport {useFormInput} from '../../composables/useFormInput'\n\nconst _props = withDefaults(defineProps<Omit<BFormInputProps, 'modelValue'>>(), {\n  max: undefined,\n  min: undefined,\n  step: undefined,\n  type: 'text',\n  // CommonInputProps\n  ariaInvalid: undefined,\n  autocomplete: undefined,\n  autofocus: false,\n  debounce: 0,\n  debounceMaxWait: NaN,\n  disabled: false,\n  form: undefined,\n  formatter: undefined,\n  id: undefined,\n  lazyFormatter: false,\n  list: undefined,\n  modelValue: '',\n  name: undefined,\n  placeholder: undefined,\n  plaintext: false,\n  readonly: false,\n  required: false,\n  size: undefined,\n  state: undefined,\n  // End CommonInputProps\n})\nconst props = useDefaults(_props, 'BFormInput')\n\nconst [modelValue, modelModifiers] = defineModel<\n  Exclude<BFormInputProps['modelValue'], undefined>,\n  'trim' | 'lazy' | 'number'\n>({\n  default: '',\n  set: (v) => normalizeInput(v, modelModifiers),\n})\n\nconst input = useTemplateRef<HTMLInputElement>('_input')\n\nconst {\n  computedId,\n  computedAriaInvalid,\n  onInput,\n  onChange,\n  onBlur,\n  stateClass,\n  focus,\n  blur,\n  forceUpdateKey,\n} = useFormInput(props, input, modelValue, modelModifiers)\n\nconst computedClasses = computed(() => {\n  const isRange = props.type === 'range'\n  const isColor = props.type === 'color'\n  return [\n    stateClass.value,\n    {\n      'form-range': isRange,\n      'form-control': isColor || (!props.plaintext && !isRange),\n      'form-control-color': isColor,\n      'form-control-plaintext': props.plaintext && !isRange && !isColor,\n      [`form-control-${props.size}`]: !!props.size,\n    },\n  ]\n})\n\ndefineExpose({\n  blur,\n  element: input,\n  focus,\n})\n</script>\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAkCA,MAAMA,MAAA,GAASC,OAAA;IA2BT,MAAAC,KAAA,GAAQC,WAAA,CAAYH,MAAA,EAAQ,YAAY;IAE9C,MAAM,CAACI,UAAA,EAAYC,cAAc,IAAIC,QAAA,CAGnCL,OAAA;MAEAM,GAAA,EAAMC,CAAA,IAAMC,cAAA,CAAeD,CAAA,EAAGH,cAAc;IAAA,CAC7C;IAEK,MAAAK,KAAA,GAAQC,cAAA,CAAiC,QAAQ;IAEjD;MACJC,UAAA;MACAC,mBAAA;MACAC,OAAA;MACAC,QAAA;MACAC,MAAA;MACAC,UAAA;MACAC,KAAA;MACAC,IAAA;MACAC;IACE,IAAAC,YAAA,CAAanB,KAAA,EAAOQ,KAAA,EAAON,UAAA,EAAYC,cAAc;IAEnD,MAAAiB,eAAA,GAAkBC,QAAA,CAAS,MAAM;MAC/B,MAAAC,OAAA,GAAUtB,KAAA,CAAMuB,IAAA,KAAS;MACzB,MAAAC,OAAA,GAAUxB,KAAA,CAAMuB,IAAA,KAAS;MACxB,QACLR,UAAA,CAAWU,KAAA,EACX;QACE,cAAcH,OAAA;QACd,gBAAgBE,OAAA,IAAY,CAACxB,KAAA,CAAM0B,SAAA,IAAa,CAACJ,OAAA;QACjD,sBAAsBE,OAAA;QACtB,0BAA0BxB,KAAA,CAAM0B,SAAA,IAAa,CAACJ,OAAA,IAAW,CAACE,OAAA;QAC1D,CAAC,gBAAgBxB,KAAA,CAAM2B,IAAI,EAAE,GAAG,CAAC,CAAC3B,KAAA,CAAM2B;MAAA,EAE5C;IAAA,CACD;IAEYC,QAAA;MACXX,IAAA;MACAY,OAAA,EAASrB,KAAA;MACTQ;IAAA,CACD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}