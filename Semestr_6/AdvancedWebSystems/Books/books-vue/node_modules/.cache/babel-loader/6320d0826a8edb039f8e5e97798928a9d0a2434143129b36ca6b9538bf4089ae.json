{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport { n as RX_SPACE_SPLIT, o as RX_HASH_ID, p as RX_HASH } from \"../../../constants-COk0ugyL.mjs\";\nimport { f as findProvides } from \"../../../utils-DPq73bs8.mjs\";\nimport { g as globalShowHideStorageInjectionKey } from \"../../../keys-D3gOZjD-.mjs\";\nconst getTargets = (binding, el) => {\n  const {\n    modifiers,\n    arg,\n    value\n  } = binding;\n  const targets = Object.keys(modifiers || {});\n  const localValue = typeof value === \"string\" ? value.split(RX_SPACE_SPLIT) : value;\n  if (el.tagName.toLowerCase() === \"a\") {\n    const href = el.getAttribute(\"href\") || \"\";\n    if (RX_HASH_ID.test(href)) {\n      targets.push(href.replace(RX_HASH, \"\"));\n    }\n  }\n  Array.prototype.concat.apply([], [arg, localValue]).forEach(t => typeof t === \"string\" && targets.push(t));\n  return targets.filter((t, index, arr) => t && arr.indexOf(t) === index);\n};\nconst toggle = (targetIds, el, binding, vnode) => {\n  var _a;\n  const provides = findProvides(binding, vnode);\n  const showHide = (_a = provides[globalShowHideStorageInjectionKey]) == null ? void 0 : _a.map;\n  targetIds.forEach(targetId => {\n    if (showHide == null ? void 0 : showHide[targetId]) {\n      showHide[targetId].toggle();\n      return;\n    }\n    const target = document.getElementById(targetId);\n    if (target !== null) {\n      target.dispatchEvent(new Event(\"bv-toggle\"));\n    }\n  });\n  setTimeout(() => checkVisibility(targetIds, el), 50);\n};\nconst checkVisibility = (targetIds, el) => {\n  let visible = false;\n  targetIds.forEach(targetId => {\n    const target = document.getElementById(targetId);\n    if (target == null ? void 0 : target.classList.contains(\"show\")) {\n      visible = true;\n    }\n    if (target == null ? void 0 : target.classList.contains(\"closing\")) {\n      visible = false;\n    }\n  });\n  el.setAttribute(\"aria-expanded\", visible ? \"true\" : \"false\");\n  el.classList.remove(visible ? \"collapsed\" : \"not-collapsed\");\n  el.classList.add(visible ? \"not-collapsed\" : \"collapsed\");\n};\nconst handleUpdate = (el, binding, vnode) => {\n  const targets = getTargets(binding, el);\n  if (targets.length === 0) return;\n  if (el.__toggle) {\n    setTimeout(() => {\n      el.removeEventListener(\"click\", el.__toggle);\n      el.__toggle = () => toggle(targets, el, binding, vnode);\n      el.addEventListener(\"click\", el.__toggle);\n    }, 0);\n  } else {\n    el.__toggle = () => toggle(targets, el, binding, vnode);\n    el.addEventListener(\"click\", el.__toggle);\n  }\n  el.setAttribute(\"aria-controls\", targets.join(\" \"));\n  checkVisibility(targets, el);\n};\nconst vBToggle = {\n  mounted: handleUpdate,\n  updated: handleUpdate,\n  unmounted(el) {\n    el.removeEventListener(\"click\", el.__toggle);\n    el.removeAttribute(\"aria-controls\");\n    el.removeAttribute(\"aria-expanded\");\n  }\n};\nexport { vBToggle };","map":{"version":3,"names":["getTargets","binding","el","modifiers","arg","value","targets","Object","keys","localValue","split","RX_SPACE_SPLIT","tagName","toLowerCase","href","getAttribute","RX_HASH_ID","test","push","replace","RX_HASH","Array","prototype","concat","apply","forEach","t","filter","index","arr","indexOf","toggle","targetIds","vnode","provides","findProvides","showHide","_a","globalShowHideStorageInjectionKey","map","targetId","target","document","getElementById","dispatchEvent","Event","setTimeout","checkVisibility","visible","classList","contains","setAttribute","remove","add","handleUpdate","length","__toggle","removeEventListener","addEventListener","join","vBToggle","mounted","updated","unmounted","removeAttribute"],"sources":["../../../../src/directives/BToggle/index.ts"],"sourcesContent":["import {RX_HASH, RX_HASH_ID, RX_SPACE_SPLIT} from '../../utils/constants'\nimport type {Directive, DirectiveBinding, VNode} from 'vue'\nimport {findProvides} from '../utils'\nimport {globalShowHideStorageInjectionKey, type RegisterShowHideValue} from '../../utils/keys'\n\nconst getTargets = (\n  binding: DirectiveBinding<string | readonly string[] | undefined>,\n  el: Readonly<HTMLElement>\n) => {\n  const {modifiers, arg, value} = binding\n  // Any modifiers are considered target Ids\n  const targets = Object.keys(modifiers || {})\n\n  // If value is a string, split out individual targets (if space delimited)\n  const localValue = typeof value === 'string' ? value.split(RX_SPACE_SPLIT) : value\n\n  // Support target Id as link href (`href=\"#id\"`)\n  if (el.tagName.toLowerCase() === 'a') {\n    const href = el.getAttribute('href') || ''\n    if (RX_HASH_ID.test(href)) {\n      targets.push(href.replace(RX_HASH, ''))\n    }\n  }\n\n  // Add Id from `arg` (if provided), and support value\n  // as a single string Id or an array of string Ids\n  // If `value` is not an array or string, then it gets filtered out\n  Array.prototype.concat\n    .apply([], [arg, localValue])\n    .forEach((t) => typeof t === 'string' && targets.push(t))\n\n  // Return only unique and truthy target Ids\n  return targets.filter((t, index, arr) => t && arr.indexOf(t) === index)\n}\n\nconst toggle = (\n  targetIds: readonly string[],\n  el: Readonly<HTMLElement>,\n  binding: DirectiveBinding,\n  vnode: VNode\n) => {\n  const provides = findProvides(binding, vnode)\n  const showHide = (provides as Record<symbol, RegisterShowHideValue>)[\n    globalShowHideStorageInjectionKey\n  ]?.map\n\n  targetIds.forEach((targetId) => {\n    if (showHide?.[targetId]) {\n      showHide[targetId].toggle()\n      return\n    }\n    const target = document.getElementById(targetId)\n\n    if (target !== null) {\n      target.dispatchEvent(new Event('bv-toggle'))\n    }\n  })\n  setTimeout(() => checkVisibility(targetIds, el), 50)\n}\n\nconst checkVisibility = (targetIds: readonly string[], el: Readonly<HTMLElement>) => {\n  let visible = false\n  targetIds.forEach((targetId) => {\n    const target = document.getElementById(targetId)\n\n    if (target?.classList.contains('show')) {\n      visible = true\n    }\n    if (target?.classList.contains('closing')) {\n      visible = false\n    }\n  })\n  el.setAttribute('aria-expanded', visible ? 'true' : 'false')\n  el.classList.remove(visible ? 'collapsed' : 'not-collapsed')\n  el.classList.add(visible ? 'not-collapsed' : 'collapsed')\n}\n\nconst handleUpdate = (\n  el: WithToggle,\n  binding: DirectiveBinding<string | readonly string[] | undefined>,\n  vnode: VNode\n) => {\n  // Determine targets\n  const targets = getTargets(binding, el)\n  if (targets.length === 0) return\n\n  // Set up click handler\n  if (el.__toggle) {\n    setTimeout(() => {\n      el.removeEventListener('click', el.__toggle)\n      el.__toggle = () => toggle(targets, el, binding, vnode)\n      el.addEventListener('click', el.__toggle)\n    }, 0)\n  } else {\n    el.__toggle = () => toggle(targets, el, binding, vnode)\n    el.addEventListener('click', el.__toggle)\n  }\n\n  // Update attributes\n  el.setAttribute('aria-controls', targets.join(' '))\n  checkVisibility(targets, el)\n}\n\nexport interface WithToggle extends HTMLElement {\n  __toggle: () => void\n}\n\nexport const vBToggle: Directive<WithToggle> = {\n  mounted: handleUpdate,\n  updated: handleUpdate,\n  unmounted(el: WithToggle): void {\n    el.removeEventListener('click', el.__toggle)\n    el.removeAttribute('aria-controls')\n    el.removeAttribute('aria-expanded')\n  },\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}