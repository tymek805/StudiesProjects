{"ast":null,"code":"import \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport { defineComponent, computed, createElementBlock, openBlock, unref, renderSlot, Fragment, renderList, createBlock, mergeProps, withCtx, createTextVNode, toDisplayString, createElementVNode } from \"vue\";\nimport { u as useFormSelect, _ as _sfc_main$2 } from \"./useFormSelect-BrGF20vO.mjs\";\nimport { u as useDefaults } from \"./useDefaults-DANje4tM.mjs\";\nimport { u as useId } from \"./useId-BzCLXIGF.mjs\";\nconst _hoisted_1$1 = [\"id\"];\nconst _sfc_main$1 = /* @__PURE__ */defineComponent({\n  __name: \"BFormDatalist\",\n  props: {\n    disabledField: {\n      default: \"disabled\"\n    },\n    id: {\n      default: void 0\n    },\n    options: {\n      default: () => []\n    },\n    textField: {\n      default: \"text\"\n    },\n    valueField: {\n      default: \"value\"\n    }\n  },\n  setup(__props) {\n    const _props = __props;\n    const props = useDefaults(_props, \"BFormDatalist\");\n    const computedId = useId(() => props.id, \"datalist\");\n    const {\n      normalizedOptions,\n      isComplex\n    } = useFormSelect(() => props.options, computed(() => ({\n      ...props,\n      optionsField: \"options\",\n      labelField: \"label\"\n    })));\n    const normalizedOptsWrapper = computed(() =>\n    // Datalist doesn't support complex options\n    normalizedOptions.value.filter(opt => !isComplex(opt)));\n    return (_ctx, _cache) => {\n      return openBlock(), createElementBlock(\"datalist\", {\n        id: unref(computedId)\n      }, [renderSlot(_ctx.$slots, \"first\"), (openBlock(true), createElementBlock(Fragment, null, renderList(normalizedOptsWrapper.value, (option, index) => {\n        return openBlock(), createBlock(_sfc_main$2, mergeProps({\n          key: index,\n          ref_for: true\n        }, option), {\n          default: withCtx(() => [renderSlot(_ctx.$slots, \"option\", mergeProps({\n            ref_for: true\n          }, option), () => [createTextVNode(toDisplayString(option.text), 1)])]),\n          _: 2\n        }, 1040);\n      }), 128)), renderSlot(_ctx.$slots, \"default\")], 8, _hoisted_1$1);\n    };\n  }\n});\nconst _hoisted_1 = {\n  class: \"form-floating\"\n};\nconst _hoisted_2 = [\"for\"];\nconst _sfc_main = /* @__PURE__ */defineComponent({\n  __name: \"BFormFloatingLabel\",\n  props: {\n    label: {\n      default: void 0\n    },\n    labelFor: {\n      default: void 0\n    }\n  },\n  setup(__props) {\n    const _props = __props;\n    const props = useDefaults(_props, \"BFormFloatingLabel\");\n    return (_ctx, _cache) => {\n      return openBlock(), createElementBlock(\"div\", _hoisted_1, [renderSlot(_ctx.$slots, \"default\"), createElementVNode(\"label\", {\n        for: unref(props).labelFor\n      }, [renderSlot(_ctx.$slots, \"label\", {}, () => [createTextVNode(toDisplayString(unref(props).label), 1)])], 8, _hoisted_2)]);\n    };\n  }\n});\nexport { _sfc_main$1 as _, _sfc_main as a };","map":{"version":3,"names":["_props","__props","props","useDefaults","computedId","useId","id","normalizedOptions","isComplex","useFormSelect","options","computed","optionsField","labelField","normalizedOptsWrapper","value","filter","opt"],"sources":["../src/components/BForm/BFormDatalist.vue","../src/components/BForm/BFormFloatingLabel.vue"],"sourcesContent":["<template>\n  <datalist :id=\"computedId\">\n    <slot name=\"first\" />\n    <BFormSelectOption\n      v-for=\"(option, index) in normalizedOptsWrapper\"\n      :key=\"index\"\n      v-bind=\"option\"\n    >\n      <slot name=\"option\" v-bind=\"option\">\n        {{ option.text }}\n      </slot>\n    </BFormSelectOption>\n    <slot />\n  </datalist>\n</template>\n\n<script setup lang=\"ts\" generic=\"T\">\nimport type {BFormDatalistProps} from '../../types/ComponentProps'\nimport {computed} from 'vue'\nimport BFormSelectOption from '../BFormSelect/BFormSelectOption.vue'\nimport {useDefaults} from '../../composables/useDefaults'\nimport {useId} from '../../composables/useId'\nimport {useFormSelect} from '../../composables/useFormSelect'\nimport type {SelectOption} from '../../types/SelectTypes'\n\nconst _props = withDefaults(defineProps<BFormDatalistProps>(), {\n  disabled: false,\n  disabledField: 'disabled',\n  id: undefined,\n  options: () => [],\n  textField: 'text',\n  valueField: 'value',\n})\nconst props = useDefaults(_props, 'BFormDatalist')\n\ndefineSlots<{\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  default?: (props: Record<string, never>) => any\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  first?: (props: Record<string, never>) => any\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  option: (props: SelectOption<T>) => any\n}>()\n\nconst computedId = useId(() => props.id, 'datalist')\n\nconst {normalizedOptions, isComplex} = useFormSelect(\n  () => props.options,\n  computed(() => ({...props, optionsField: 'options', labelField: 'label'}))\n)\n\nconst normalizedOptsWrapper = computed(\n  () =>\n    // Datalist doesn't support complex options\n    normalizedOptions.value.filter((opt) => !isComplex(opt)) as readonly SelectOption<T>[]\n)\n</script>\n","<template>\n  <div class=\"form-floating\">\n    <slot />\n    <label :for=\"props.labelFor\">\n      <slot name=\"label\">\n        {{ props.label }}\n      </slot>\n    </label>\n  </div>\n</template>\n\n<script setup lang=\"ts\">\nimport {useDefaults} from '../../composables/useDefaults'\nimport type {BFormFloatingLabelProps} from '../../types/ComponentProps'\n\nconst _props = withDefaults(defineProps<BFormFloatingLabelProps>(), {\n  label: undefined,\n  labelFor: undefined,\n  text: undefined,\n})\nconst props = useDefaults(_props, 'BFormFloatingLabel')\n\ndefineSlots<{\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  default: (props: Record<string, never>) => any\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  label?: (props: Record<string, never>) => any\n}>()\n</script>\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;IAyBA,MAAMA,MAAA,GAASC,OAAA;IAQT,MAAAC,KAAA,GAAQC,WAAA,CAAYH,MAAA,EAAQ,eAAe;IAWjD,MAAMI,UAAA,GAAaC,KAAA,CAAM,MAAMH,KAAA,CAAMI,EAAA,EAAI,UAAU;IAE7C;MAACC,iBAAA;MAAmBC;IAAA,IAAaC,aAAA,CACrC,MAAMP,KAAA,CAAMQ,OAAA,EACZC,QAAA,CAAS,OAAO;MAAC,GAAGT,KAAA;MAAOU,YAAA,EAAc;MAAWC,UAAA,EAAY;IAAA,EAAS,CAC3E;IAEA,MAAMC,qBAAA,GAAwBH,QAAA,CAC5B;IAAA;IAEEJ,iBAAA,CAAkBQ,KAAA,CAAMC,MAAA,CAAQC,GAAA,IAAQ,CAACT,SAAA,CAAUS,GAAG,CAAC,CAC3D;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ICxCA,MAAMjB,MAAA,GAASC,OAAA;IAKT,MAAAC,KAAA,GAAQC,WAAA,CAAYH,MAAA,EAAQ,oBAAoB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}