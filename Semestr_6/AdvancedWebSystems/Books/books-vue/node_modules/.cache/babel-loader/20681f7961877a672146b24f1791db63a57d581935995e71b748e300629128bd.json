{"ast":null,"code":"import { defineComponent, computed, createElementBlock, openBlock, unref, renderSlot, Fragment, renderList, createBlock, mergeProps, withCtx, createTextVNode, toDisplayString, mergeModels, useModel, useTemplateRef, withDirectives, normalizeClass, vModelSelect } from \"vue\";\nimport { u as useFormSelect, _ as _sfc_main$2 } from \"./useFormSelect-BrGF20vO.mjs\";\nimport { u as useDefaults } from \"./useDefaults-DANje4tM.mjs\";\nimport { u as useAriaInvalid } from \"./useAriaInvalid-BTUbGj3Y.mjs\";\nimport { u as useFocus } from \"./index-cC189kCW.mjs\";\nimport { u as useId } from \"./useId-BzCLXIGF.mjs\";\nimport { u as useStateClass } from \"./useStateClass-BGbSLWFN.mjs\";\nimport { u as useToNumber } from \"./index-CLgoGrAV.mjs\";\nconst _hoisted_1$1 = [\"label\"];\nconst _sfc_main$1 = /* @__PURE__ */defineComponent({\n  __name: \"BFormSelectOptionGroup\",\n  props: {\n    disabledField: {\n      default: \"disabled\"\n    },\n    label: {\n      default: void 0\n    },\n    options: {\n      default: () => []\n    },\n    textField: {\n      default: \"text\"\n    },\n    valueField: {\n      default: \"value\"\n    }\n  },\n  setup(__props) {\n    const _props = __props;\n    const props = useDefaults(_props, \"BFormSelectOptionGroup\");\n    const {\n      normalizedOptions\n    } = useFormSelect(() => props.options, props);\n    const normalizedOptsWrapper = computed(() => normalizedOptions.value);\n    return (_ctx, _cache) => {\n      return openBlock(), createElementBlock(\"optgroup\", {\n        label: unref(props).label\n      }, [renderSlot(_ctx.$slots, \"first\"), (openBlock(true), createElementBlock(Fragment, null, renderList(normalizedOptsWrapper.value, (option, index) => {\n        return openBlock(), createBlock(_sfc_main$2, mergeProps({\n          key: index,\n          disabled: option.disabled,\n          value: option.value,\n          ref_for: true\n        }, _ctx.$attrs), {\n          default: withCtx(() => [renderSlot(_ctx.$slots, \"option\", mergeProps({\n            ref_for: true\n          }, option), () => [createTextVNode(toDisplayString(option.text), 1)])]),\n          _: 2\n        }, 1040, [\"disabled\", \"value\"]);\n      }), 128)), renderSlot(_ctx.$slots, \"default\")], 8, _hoisted_1$1);\n    };\n  }\n});\nconst _hoisted_1 = [\"id\", \"name\", \"form\", \"multiple\", \"size\", \"disabled\", \"required\", \"aria-required\", \"aria-invalid\"];\nconst _sfc_main = /* @__PURE__ */defineComponent({\n  __name: \"BFormSelect\",\n  props: /* @__PURE__ */mergeModels({\n    ariaInvalid: {\n      type: [Boolean, String],\n      default: void 0\n    },\n    autofocus: {\n      type: Boolean,\n      default: false\n    },\n    disabled: {\n      type: Boolean,\n      default: false\n    },\n    disabledField: {\n      default: \"disabled\"\n    },\n    form: {\n      default: void 0\n    },\n    id: {\n      default: void 0\n    },\n    labelField: {\n      default: \"label\"\n    },\n    multiple: {\n      type: Boolean,\n      default: false\n    },\n    name: {\n      default: void 0\n    },\n    options: {\n      default: () => []\n    },\n    optionsField: {\n      default: \"options\"\n    },\n    plain: {\n      type: Boolean,\n      default: false\n    },\n    required: {\n      type: Boolean,\n      default: false\n    },\n    selectSize: {\n      default: 0\n    },\n    size: {\n      default: \"md\"\n    },\n    state: {\n      type: [Boolean, null],\n      default: null\n    },\n    textField: {\n      default: \"text\"\n    },\n    valueField: {\n      default: \"value\"\n    }\n  }, {\n    \"modelValue\": {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      default: \"\"\n    },\n    \"modelModifiers\": {}\n  }),\n  emits: [\"update:modelValue\"],\n  setup(__props, {\n    expose: __expose\n  }) {\n    const _props = __props;\n    const props = useDefaults(_props, \"BFormSelect\");\n    const modelValue = useModel(__props, \"modelValue\");\n    const computedId = useId(() => props.id, \"input\");\n    const selectSizeNumber = useToNumber(() => props.selectSize);\n    const stateClass = useStateClass(() => props.state);\n    const input = useTemplateRef(\"_input\");\n    const {\n      focused\n    } = useFocus(input, {\n      initialValue: props.autofocus\n    });\n    const computedClasses = computed(() => [stateClass.value, {\n      \"form-control\": props.plain,\n      [`form-control-${props.size}`]: props.size !== \"md\" && props.plain,\n      \"form-select\": !props.plain,\n      [`form-select-${props.size}`]: props.size !== \"md\" && !props.plain\n    }]);\n    const computedSelectSize = computed(() => selectSizeNumber.value || props.plain ? selectSizeNumber.value : void 0);\n    const computedAriaInvalid = useAriaInvalid(() => props.ariaInvalid, () => props.state);\n    const {\n      normalizedOptions,\n      isComplex\n    } = useFormSelect(() => props.options, props);\n    const normalizedOptsWrapper = computed(() => normalizedOptions.value);\n    const localValue = computed({\n      get: () => modelValue.value,\n      set: newValue => {\n        modelValue.value = newValue;\n      }\n    });\n    __expose({\n      blur: () => {\n        focused.value = false;\n      },\n      element: input,\n      focus: () => {\n        focused.value = true;\n      }\n    });\n    return (_ctx, _cache) => {\n      return withDirectives((openBlock(), createElementBlock(\"select\", {\n        id: unref(computedId),\n        ref: \"_input\",\n        \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => localValue.value = $event),\n        class: normalizeClass(computedClasses.value),\n        name: unref(props).name,\n        form: unref(props).form || void 0,\n        multiple: unref(props).multiple || void 0,\n        size: computedSelectSize.value,\n        disabled: unref(props).disabled,\n        required: unref(props).required || void 0,\n        \"aria-required\": unref(props).required || void 0,\n        \"aria-invalid\": unref(computedAriaInvalid)\n      }, [renderSlot(_ctx.$slots, \"first\"), (openBlock(true), createElementBlock(Fragment, null, renderList(normalizedOptsWrapper.value, (option, index) => {\n        return openBlock(), createElementBlock(Fragment, {\n          key: index\n        }, [unref(isComplex)(option) ? (openBlock(), createBlock(_sfc_main$1, {\n          key: 0,\n          label: option.label,\n          options: option.options,\n          \"value-field\": unref(props).valueField,\n          \"text-field\": unref(props).textField,\n          \"disabled-field\": unref(props).disabledField\n        }, null, 8, [\"label\", \"options\", \"value-field\", \"text-field\", \"disabled-field\"])) : (openBlock(), createBlock(_sfc_main$2, {\n          key: 1,\n          value: option.value,\n          disabled: option.disabled\n        }, {\n          default: withCtx(() => [renderSlot(_ctx.$slots, \"option\", mergeProps({\n            ref_for: true\n          }, option), () => [createTextVNode(toDisplayString(option.text), 1)])]),\n          _: 2\n        }, 1032, [\"value\", \"disabled\"]))], 64);\n      }), 128)), renderSlot(_ctx.$slots, \"default\")], 10, _hoisted_1)), [[vModelSelect, localValue.value]]);\n    };\n  }\n});\nexport { _sfc_main as _, _sfc_main$1 as a };","map":{"version":3,"names":["_props","__props","props","useDefaults","normalizedOptions","useFormSelect","options","normalizedOptsWrapper","computed","value","modelValue","useModel","computedId","useId","id","selectSizeNumber","useToNumber","selectSize","stateClass","useStateClass","state","input","useTemplateRef","focused","useFocus","initialValue","autofocus","computedClasses","plain","size","computedSelectSize","computedAriaInvalid","useAriaInvalid","ariaInvalid","isComplex","localValue","get","set","newValue","__expose","blur","element","focus"],"sources":["../src/components/BFormSelect/BFormSelectOptionGroup.vue","../src/components/BFormSelect/BFormSelect.vue"],"sourcesContent":["<template>\n  <optgroup :label=\"props.label\">\n    <slot name=\"first\" />\n    <BFormSelectOption\n      v-for=\"(option, index) in normalizedOptsWrapper\"\n      :key=\"index\"\n      :disabled=\"option.disabled\"\n      :value=\"option.value\"\n      v-bind=\"$attrs\"\n    >\n      <slot name=\"option\" v-bind=\"option\">\n        {{ option.text }}\n      </slot>\n    </BFormSelectOption>\n    <slot />\n  </optgroup>\n</template>\n\n<script setup lang=\"ts\" generic=\"T\">\nimport BFormSelectOption from './BFormSelectOption.vue'\nimport {useDefaults} from '../../composables/useDefaults'\nimport type {BFormSelectOptionGroupProps} from '../../types/ComponentProps'\nimport {computed} from 'vue'\nimport {useFormSelect} from '../../composables/useFormSelect'\nimport type {SelectOption} from '../../types/SelectTypes'\n\nconst _props = withDefaults(defineProps<BFormSelectOptionGroupProps>(), {\n  disabledField: 'disabled',\n  label: undefined,\n  options: () => [],\n  textField: 'text',\n  valueField: 'value',\n})\nconst props = useDefaults(_props, 'BFormSelectOptionGroup')\n\ndefineSlots<{\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  default?: (props: Record<string, never>) => any\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  first?: (props: Record<string, never>) => any\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  option: (props: SelectOption<T>) => any\n}>()\n\nconst {normalizedOptions} = useFormSelect(() => props.options, props)\n\nconst normalizedOptsWrapper = computed(() => normalizedOptions.value as SelectOption<T>[])\n</script>\n","<template>\n  <select\n    :id=\"computedId\"\n    ref=\"_input\"\n    v-model=\"localValue\"\n    :class=\"computedClasses\"\n    :name=\"props.name\"\n    :form=\"props.form || undefined\"\n    :multiple=\"props.multiple || undefined\"\n    :size=\"computedSelectSize\"\n    :disabled=\"props.disabled\"\n    :required=\"props.required || undefined\"\n    :aria-required=\"props.required || undefined\"\n    :aria-invalid=\"computedAriaInvalid\"\n  >\n    <slot name=\"first\" />\n    <template v-for=\"(option, index) in normalizedOptsWrapper\" :key=\"index\">\n      <BFormSelectOptionGroup\n        v-if=\"isComplex(option)\"\n        :label=\"option.label\"\n        :options=\"option.options\"\n        :value-field=\"props.valueField\"\n        :text-field=\"props.textField\"\n        :disabled-field=\"props.disabledField\"\n      />\n      <BFormSelectOption v-else :value=\"option.value\" :disabled=\"option.disabled\">\n        <slot name=\"option\" v-bind=\"option\">\n          {{ option.text }}\n        </slot>\n      </BFormSelectOption>\n    </template>\n    <slot />\n  </select>\n</template>\n\n<script setup lang=\"ts\" generic=\"T\">\nimport type {BFormSelectProps} from '../../types/ComponentProps'\nimport {computed, useTemplateRef} from 'vue'\nimport BFormSelectOption from './BFormSelectOption.vue'\nimport BFormSelectOptionGroup from './BFormSelectOptionGroup.vue'\nimport {useAriaInvalid} from '../../composables/useAriaInvalid'\nimport {useFocus, useToNumber} from '@vueuse/core'\nimport {useDefaults} from '../../composables/useDefaults'\nimport {useId} from '../../composables/useId'\nimport {useStateClass} from '../../composables/useStateClass'\nimport {useFormSelect} from '../../composables/useFormSelect'\nimport type {ComplexSelectOptionRaw, SelectOption} from '../../types/SelectTypes'\n\nconst _props = withDefaults(defineProps<Omit<BFormSelectProps, 'modelValue'>>(), {\n  ariaInvalid: undefined,\n  autofocus: false,\n  disabled: false,\n  disabledField: 'disabled',\n  form: undefined,\n  id: undefined,\n  labelField: 'label',\n  multiple: false,\n  name: undefined,\n  options: () => [],\n  optionsField: 'options',\n  plain: false,\n  required: false,\n  selectSize: 0,\n  size: 'md',\n  state: null,\n  textField: 'text',\n  valueField: 'value',\n})\nconst props = useDefaults(_props, 'BFormSelect')\n\ndefineSlots<{\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  default?: (props: Record<string, never>) => any\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  first?: (props: Record<string, never>) => any\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  option: (props: SelectOption<T>) => any\n}>()\n\nconst modelValue = defineModel<T>({\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  default: '' as any,\n})\n\nconst computedId = useId(() => props.id, 'input')\n\nconst selectSizeNumber = useToNumber(() => props.selectSize)\n\nconst stateClass = useStateClass(() => props.state)\n\nconst input = useTemplateRef<HTMLElement>('_input')\n\nconst {focused} = useFocus(input, {\n  initialValue: props.autofocus,\n})\n\nconst computedClasses = computed(() => [\n  stateClass.value,\n  {\n    'form-control': props.plain,\n    [`form-control-${props.size}`]: props.size !== 'md' && props.plain,\n    'form-select': !props.plain,\n    [`form-select-${props.size}`]: props.size !== 'md' && !props.plain,\n  },\n])\n\nconst computedSelectSize = computed(() =>\n  selectSizeNumber.value || props.plain ? selectSizeNumber.value : undefined\n)\n\nconst computedAriaInvalid = useAriaInvalid(\n  () => props.ariaInvalid,\n  () => props.state\n)\n\nconst {normalizedOptions, isComplex} = useFormSelect(() => props.options, props)\n\nconst normalizedOptsWrapper = computed(\n  () => normalizedOptions.value as readonly (ComplexSelectOptionRaw<T> | SelectOption<T>)[]\n)\n\nconst localValue = computed({\n  get: () => modelValue.value,\n  set: (newValue) => {\n    modelValue.value = newValue\n  },\n})\n\ndefineExpose({\n  blur: () => {\n    focused.value = false\n  },\n  element: input,\n  focus: () => {\n    focused.value = true\n  },\n})\n</script>\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;IA0BA,MAAMA,MAAA,GAASC,OAAA;IAOT,MAAAC,KAAA,GAAQC,WAAA,CAAYH,MAAA,EAAQ,wBAAwB;IAW1D,MAAM;MAACI;IAAiB,IAAIC,aAAA,CAAc,MAAMH,KAAA,CAAMI,OAAA,EAASJ,KAAK;IAEpE,MAAMK,qBAAA,GAAwBC,QAAA,CAAS,MAAMJ,iBAAA,CAAkBK,KAA0B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ICEzF,MAAMT,MAAA,GAASC,OAAA;IAoBT,MAAAC,KAAA,GAAQC,WAAA,CAAYH,MAAA,EAAQ,aAAa;IAWzC,MAAAU,UAAA,GAAaC,QAAA,CAGlBV,OAAA;IAED,MAAMW,UAAA,GAAaC,KAAA,CAAM,MAAMX,KAAA,CAAMY,EAAA,EAAI,OAAO;IAEhD,MAAMC,gBAAA,GAAmBC,WAAA,CAAY,MAAMd,KAAA,CAAMe,UAAU;IAE3D,MAAMC,UAAA,GAAaC,aAAA,CAAc,MAAMjB,KAAA,CAAMkB,KAAK;IAE5C,MAAAC,KAAA,GAAQC,cAAA,CAA4B,QAAQ;IAElD,MAAM;MAACC;IAAA,IAAWC,QAAA,CAASH,KAAA,EAAO;MAChCI,YAAA,EAAcvB,KAAA,CAAMwB;IAAA,CACrB;IAEK,MAAAC,eAAA,GAAkBnB,QAAA,CAAS,MAAM,CACrCU,UAAA,CAAWT,KAAA,EACX;MACE,gBAAgBP,KAAA,CAAM0B,KAAA;MACtB,CAAC,gBAAgB1B,KAAA,CAAM2B,IAAI,EAAE,GAAG3B,KAAA,CAAM2B,IAAA,KAAS,QAAQ3B,KAAA,CAAM0B,KAAA;MAC7D,eAAe,CAAC1B,KAAA,CAAM0B,KAAA;MACtB,CAAC,eAAe1B,KAAA,CAAM2B,IAAI,EAAE,GAAG3B,KAAA,CAAM2B,IAAA,KAAS,QAAQ,CAAC3B,KAAA,CAAM0B;IAAA,EAEhE;IAED,MAAME,kBAAA,GAAqBtB,QAAA,CAAS,MAClCO,gBAAA,CAAiBN,KAAA,IAASP,KAAA,CAAM0B,KAAA,GAAQb,gBAAA,CAAiBN,KAAA,GAAQ,MACnE;IAEA,MAAMsB,mBAAA,GAAsBC,cAAA,CAC1B,MAAM9B,KAAA,CAAM+B,WAAA,EACZ,MAAM/B,KAAA,CAAMkB,KACd;IAEM;MAAChB,iBAAA;MAAmB8B;IAAS,IAAI7B,aAAA,CAAc,MAAMH,KAAA,CAAMI,OAAA,EAASJ,KAAK;IAE/E,MAAMK,qBAAA,GAAwBC,QAAA,CAC5B,MAAMJ,iBAAA,CAAkBK,KAC1B;IAEA,MAAM0B,UAAA,GAAa3B,QAAA,CAAS;MAC1B4B,GAAA,EAAKA,CAAA,KAAM1B,UAAA,CAAWD,KAAA;MACtB4B,GAAA,EAAMC,QAAA,IAAa;QACjB5B,UAAA,CAAWD,KAAA,GAAQ6B,QAAA;MAAA;IACrB,CACD;IAEYC,QAAA;MACXC,IAAA,EAAMA,CAAA,KAAM;QACVjB,OAAA,CAAQd,KAAA,GAAQ;MAClB;MACAgC,OAAA,EAASpB,KAAA;MACTqB,KAAA,EAAOA,CAAA,KAAM;QACXnB,OAAA,CAAQd,KAAA,GAAQ;MAAA;IAClB,CACD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}