{"ast":null,"code":"import \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nimport { inject } from \"vue\";\nimport { u as useSharedModalStack } from \"../../../useModalManager-tL74pLur.mjs\";\nimport { m as modalControllerPluginKey } from \"../../../keys-D3gOZjD-.mjs\";\nconst useModalController = () => {\n  const {\n    lastStack,\n    stack\n  } = useSharedModalStack();\n  const modalControllerPlugin = inject(modalControllerPluginKey);\n  const hide = (trigger = \"\") => {\n    var _a;\n    if (lastStack == null ? void 0 : lastStack.value) {\n      (_a = lastStack == null ? void 0 : lastStack.value.exposed) == null ? void 0 : _a.hide(trigger);\n    }\n  };\n  const hideAll = (trigger = \"\") => {\n    stack == null ? void 0 : stack.value.forEach(modal => {\n      var _a;\n      (_a = modal.exposed) == null ? void 0 : _a.hide(trigger);\n    });\n  };\n  return {\n    ...modalControllerPlugin,\n    hide,\n    hideAll\n    // Todo: Supports listening events globally in the future\n  };\n};\nexport { useModalController };","map":{"version":3,"names":["useModalController","lastStack","stack","useSharedModalStack","modalControllerPlugin","inject","modalControllerPluginKey","hide","trigger","value","_a","exposed","hideAll","forEach","modal"],"sources":["../../../../src/composables/useModalController/index.ts"],"sourcesContent":["import {inject} from 'vue'\nimport {useSharedModalStack} from '../useModalManager'\nimport {modalControllerPluginKey} from '../../utils/keys'\n\nexport const useModalController = () => {\n  const {lastStack, stack} = useSharedModalStack()\n\n  const modalControllerPlugin = inject(modalControllerPluginKey)\n\n  const hide = (trigger = '') => {\n    if (lastStack?.value) {\n      lastStack?.value.exposed?.hide(trigger)\n    }\n  }\n\n  const hideAll = (trigger = '') => {\n    stack?.value.forEach((modal) => {\n      modal.exposed?.hide(trigger)\n    })\n  }\n\n  return {\n    ...modalControllerPlugin,\n    hide,\n    hideAll,\n    // Todo: Supports listening events globally in the future\n  }\n}\n"],"mappings":";;;;;AAIO,MAAMA,kBAAA,GAAqBA,CAAA,KAAM;EACtC,MAAM;IAACC,SAAA;IAAWC;EAAK,IAAIC,mBAAA,CAAoB;EAEzC,MAAAC,qBAAA,GAAwBC,MAAA,CAAOC,wBAAwB;EAEvD,MAAAC,IAAA,GAAOA,CAACC,OAAA,GAAU,OAAO;;IAC7B,IAAIP,SAAA,oBAAAA,SAAA,CAAWQ,KAAA,EAAO;MACT,CAAAC,EAAA,GAAAT,SAAA,oBAAAA,SAAA,CAAAQ,KAAA,CAAME,OAAA,KAAN,gBAAAD,EAAA,CAAeH,IAAA,CAAKC,OAAA;IAAO;EAE1C;EAEM,MAAAI,OAAA,GAAUA,CAACJ,OAAA,GAAU,OAAO;IACzBN,KAAA,oBAAAA,KAAA,CAAAO,KAAA,CAAMI,OAAA,CAASC,KAAA,IAAU;;MACxB,CAAAJ,EAAA,GAAAI,KAAA,CAAAH,OAAA,qBAAAD,EAAA,CAASH,IAAA,CAAKC,OAAA;IAAO;EAE/B;EAEO;IACL,GAAGJ,qBAAA;IACHG,IAAA;IACAK;IAAA;EAEF;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}