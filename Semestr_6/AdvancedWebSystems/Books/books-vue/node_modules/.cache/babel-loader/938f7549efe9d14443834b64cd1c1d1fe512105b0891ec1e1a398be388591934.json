{"ast":null,"code":"import { defineComponent, inject, computed, createElementBlock, openBlock, normalizeStyle, normalizeClass, renderSlot, createTextVNode, toDisplayString, provide, toRef, unref, createVNode } from \"vue\";\nimport { u as useColorVariantClasses } from \"./useColorVariantClasses-ZDE19TZw.mjs\";\nimport { u as useDefaults } from \"./useDefaults-DANje4tM.mjs\";\nimport { o as progressInjectionKey } from \"./keys-D3gOZjD-.mjs\";\nimport { u as useToNumber } from \"./index-CLgoGrAV.mjs\";\nconst _sfc_main$1 = /* @__PURE__ */defineComponent({\n  __name: \"BProgressBar\",\n  props: {\n    animated: {\n      type: Boolean,\n      default: false\n    },\n    label: {\n      default: void 0\n    },\n    max: {\n      default: void 0\n    },\n    precision: {\n      default: 0\n    },\n    showProgress: {\n      type: Boolean,\n      default: false\n    },\n    showValue: {\n      type: Boolean,\n      default: false\n    },\n    striped: {\n      type: Boolean,\n      default: false\n    },\n    value: {\n      default: 0\n    },\n    variant: {\n      default: null\n    },\n    bgVariant: {\n      default: null\n    },\n    textVariant: {\n      default: null\n    }\n  },\n  setup(__props) {\n    const _props = __props;\n    const props = useDefaults(_props, \"BProgressBar\");\n    const parentData = inject(progressInjectionKey, null);\n    const colorClasses = useColorVariantClasses(props);\n    const computedClasses = computed(() => [colorClasses.value, {\n      \"progress-bar-animated\": props.animated || (parentData == null ? void 0 : parentData.animated.value),\n      \"progress-bar-striped\": props.striped || (parentData == null ? void 0 : parentData.striped.value) || props.animated || (parentData == null ? void 0 : parentData.animated.value)\n    }]);\n    const numberPrecision = useToNumber(() => props.precision);\n    const numberValue = useToNumber(() => props.value);\n    const numberMax = useToNumber(() => props.max ?? NaN);\n    const parentMaxNumber = useToNumber(() => (parentData == null ? void 0 : parentData.max.value) ?? NaN);\n    const computedLabel = computed(() => props.showValue || (parentData == null ? void 0 : parentData.showValue.value) ? numberValue.value.toFixed(numberPrecision.value) : props.showProgress || (parentData == null ? void 0 : parentData.showProgress.value) ? (numberValue.value * 100 / (numberMax.value || 100)).toFixed(numberPrecision.value) : props.label !== void 0 ? props.label : \"\");\n    const computedWidth = computed(() => parentMaxNumber.value ? `${numberValue.value * 100 / parentMaxNumber.value}%` : numberMax.value ? `${numberValue.value * 100 / numberMax.value}%` : typeof props.value === \"string\" ? props.value : `${props.value}%`);\n    return (_ctx, _cache) => {\n      return openBlock(), createElementBlock(\"div\", {\n        class: normalizeClass([\"progress-bar\", computedClasses.value]),\n        style: normalizeStyle({\n          width: computedWidth.value\n        })\n      }, [renderSlot(_ctx.$slots, \"default\", {}, () => [createTextVNode(toDisplayString(computedLabel.value), 1)])], 6);\n    };\n  }\n});\nconst _hoisted_1 = [\"aria-valuenow\", \"aria-valuemax\"];\nconst _sfc_main = /* @__PURE__ */defineComponent({\n  __name: \"BProgress\",\n  props: {\n    height: {\n      default: void 0\n    },\n    animated: {\n      type: Boolean,\n      default: void 0\n    },\n    max: {\n      default: 100\n    },\n    precision: {\n      default: void 0\n    },\n    showProgress: {\n      type: Boolean,\n      default: void 0\n    },\n    showValue: {\n      type: Boolean,\n      default: void 0\n    },\n    striped: {\n      type: Boolean,\n      default: void 0\n    },\n    value: {\n      default: void 0\n    },\n    variant: {\n      default: void 0\n    },\n    bgVariant: {\n      default: void 0\n    },\n    textVariant: {\n      default: void 0\n    }\n  },\n  setup(__props) {\n    const _props = __props;\n    const props = useDefaults(_props, \"BProgress\");\n    provide(progressInjectionKey, {\n      animated: toRef(() => props.animated),\n      max: toRef(() => props.max),\n      showProgress: toRef(() => props.showProgress),\n      showValue: toRef(() => props.showValue),\n      striped: toRef(() => props.striped)\n    });\n    return (_ctx, _cache) => {\n      return openBlock(), createElementBlock(\"div\", {\n        class: \"progress\",\n        role: \"progressbar\",\n        style: normalizeStyle({\n          height: unref(props).height\n        }),\n        \"aria-valuenow\": unref(props).value,\n        \"aria-valuemin\": \"0\",\n        \"aria-valuemax\": unref(props).max\n      }, [renderSlot(_ctx.$slots, \"default\", {}, () => [createVNode(_sfc_main$1, {\n        animated: unref(props).animated,\n        max: unref(props).max,\n        precision: unref(props).precision,\n        \"show-progress\": unref(props).showProgress,\n        \"show-value\": unref(props).showValue,\n        striped: unref(props).striped,\n        value: unref(props).value,\n        variant: unref(props).variant,\n        \"text-variant\": unref(props).textVariant,\n        \"bg-variant\": unref(props).bgVariant\n      }, null, 8, [\"animated\", \"max\", \"precision\", \"show-progress\", \"show-value\", \"striped\", \"value\", \"variant\", \"text-variant\", \"bg-variant\"])])], 12, _hoisted_1);\n    };\n  }\n});\nexport { _sfc_main as _, _sfc_main$1 as a };","map":{"version":3,"names":["_props","__props","props","useDefaults","parentData","inject","progressInjectionKey","colorClasses","useColorVariantClasses","computedClasses","computed","value","animated","striped","numberPrecision","useToNumber","precision","numberValue","numberMax","max","NaN","parentMaxNumber","computedLabel","showValue","toFixed","showProgress","label","computedWidth","provide","toRef"],"sources":["../src/components/BProgress/BProgressBar.vue","../src/components/BProgress/BProgress.vue"],"sourcesContent":["<template>\n  <div class=\"progress-bar\" :class=\"computedClasses\" :style=\"{width: computedWidth}\">\n    <slot>\n      {{ computedLabel }}\n    </slot>\n  </div>\n</template>\n\n<script setup lang=\"ts\">\nimport type {BProgressBarProps} from '../../types/ComponentProps'\nimport {useColorVariantClasses} from '../../composables/useColorVariantClasses'\nimport {useDefaults} from '../../composables/useDefaults'\nimport {computed, inject} from 'vue'\nimport {progressInjectionKey} from '../../utils/keys'\nimport {useToNumber} from '@vueuse/core'\n\nconst _props = withDefaults(defineProps<BProgressBarProps>(), {\n  animated: false,\n  bgVariant: null,\n  label: undefined,\n  max: undefined,\n  precision: 0,\n  showProgress: false,\n  showValue: false,\n  striped: false,\n  textVariant: null,\n  value: 0,\n  variant: null,\n})\nconst props = useDefaults(_props, 'BProgressBar')\n\ndefineSlots<{\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  default?: (props: Record<string, never>) => any\n}>()\n\nconst parentData = inject(progressInjectionKey, null)\n\nconst colorClasses = useColorVariantClasses(props)\nconst computedClasses = computed(() => [\n  colorClasses.value,\n  {\n    'progress-bar-animated': props.animated || parentData?.animated.value,\n    'progress-bar-striped':\n      props.striped || parentData?.striped.value || props.animated || parentData?.animated.value,\n  },\n])\n\nconst numberPrecision = useToNumber(() => props.precision)\nconst numberValue = useToNumber(() => props.value)\nconst numberMax = useToNumber(() => props.max ?? NaN)\nconst parentMaxNumber = useToNumber(() => parentData?.max.value ?? NaN)\n\nconst computedLabel = computed(() =>\n  props.showValue || parentData?.showValue.value\n    ? numberValue.value.toFixed(numberPrecision.value)\n    : props.showProgress || parentData?.showProgress.value\n      ? ((numberValue.value * 100) / (numberMax.value || 100)).toFixed(numberPrecision.value)\n      : props.label !== undefined\n        ? props.label\n        : ''\n)\n\nconst computedWidth = computed(() =>\n  parentMaxNumber.value\n    ? `${(numberValue.value * 100) / parentMaxNumber.value}%`\n    : numberMax.value\n      ? `${(numberValue.value * 100) / numberMax.value}%`\n      : typeof props.value === 'string'\n        ? props.value\n        : `${props.value}%`\n)\n</script>\n","<template>\n  <div\n    class=\"progress\"\n    role=\"progressbar\"\n    :style=\"{height: props.height}\"\n    :aria-valuenow=\"props.value\"\n    aria-valuemin=\"0\"\n    :aria-valuemax=\"props.max\"\n  >\n    <slot>\n      <BProgressBar\n        :animated=\"props.animated\"\n        :max=\"props.max\"\n        :precision=\"props.precision\"\n        :show-progress=\"props.showProgress\"\n        :show-value=\"props.showValue\"\n        :striped=\"props.striped\"\n        :value=\"props.value\"\n        :variant=\"props.variant\"\n        :text-variant=\"props.textVariant\"\n        :bg-variant=\"props.bgVariant\"\n      />\n    </slot>\n  </div>\n</template>\n\n<script setup lang=\"ts\">\nimport BProgressBar from './BProgressBar.vue'\nimport type {BProgressProps} from '../../types/ComponentProps'\nimport {provide, toRef} from 'vue'\nimport {progressInjectionKey} from '../../utils/keys'\nimport {useDefaults} from '../../composables/useDefaults'\n\nconst _props = withDefaults(defineProps<BProgressProps>(), {\n  height: undefined,\n  // BProgressBar props\n  animated: undefined,\n  bgVariant: undefined,\n  max: 100,\n  precision: undefined,\n  showProgress: undefined,\n  showValue: undefined,\n  striped: undefined,\n  textVariant: undefined,\n  value: undefined,\n  variant: undefined,\n  // End BProgressBar props\n})\nconst props = useDefaults(_props, 'BProgress')\n\ndefineSlots<{\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  default?: (props: Record<string, never>) => any\n}>()\n\nprovide(progressInjectionKey, {\n  animated: toRef(() => props.animated),\n  max: toRef(() => props.max),\n  showProgress: toRef(() => props.showProgress),\n  showValue: toRef(() => props.showValue),\n  striped: toRef(() => props.striped),\n})\n</script>\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAgBA,MAAMA,MAAA,GAASC,OAAA;IAaT,MAAAC,KAAA,GAAQC,WAAA,CAAYH,MAAA,EAAQ,cAAc;IAO1C,MAAAI,UAAA,GAAaC,MAAA,CAAOC,oBAAA,EAAsB,IAAI;IAE9C,MAAAC,YAAA,GAAeC,sBAAA,CAAuBN,KAAK;IAC3C,MAAAO,eAAA,GAAkBC,QAAA,CAAS,MAAM,CACrCH,YAAA,CAAaI,KAAA,EACb;MACE,yBAAyBT,KAAA,CAAMU,QAAA,KAAYR,UAAA,oBAAAA,UAAA,CAAYQ,QAAA,CAASD,KAAA;MAChE,wBACET,KAAA,CAAMW,OAAA,KAAWT,UAAA,oBAAAA,UAAA,CAAYS,OAAA,CAAQF,KAAA,KAAST,KAAA,CAAMU,QAAA,KAAYR,UAAA,oBAAAA,UAAA,CAAYQ,QAAA,CAASD,KAAA;IAAA,EAE1F;IAED,MAAMG,eAAA,GAAkBC,WAAA,CAAY,MAAMb,KAAA,CAAMc,SAAS;IACzD,MAAMC,WAAA,GAAcF,WAAA,CAAY,MAAMb,KAAA,CAAMS,KAAK;IACjD,MAAMO,SAAA,GAAYH,WAAA,CAAY,MAAMb,KAAA,CAAMiB,GAAA,IAAOC,GAAG;IACpD,MAAMC,eAAA,GAAkBN,WAAA,CAAY,OAAMX,UAAA,oBAAAA,UAAA,CAAYe,GAAA,CAAIR,KAAA,KAASS,GAAG;IAEtE,MAAME,aAAA,GAAgBZ,QAAA,CAAS,MAC7BR,KAAA,CAAMqB,SAAA,KAAanB,UAAA,oBAAAA,UAAA,CAAYmB,SAAA,CAAUZ,KAAA,IACrCM,WAAA,CAAYN,KAAA,CAAMa,OAAA,CAAQV,eAAA,CAAgBH,KAAK,IAC/CT,KAAA,CAAMuB,YAAA,KAAgBrB,UAAA,oBAAAA,UAAA,CAAYqB,YAAA,CAAad,KAAA,KAC3CM,WAAA,CAAYN,KAAA,GAAQ,OAAQO,SAAA,CAAUP,KAAA,IAAS,MAAMa,OAAA,CAAQV,eAAA,CAAgBH,KAAK,IACpFT,KAAA,CAAMwB,KAAA,KAAU,SACdxB,KAAA,CAAMwB,KAAA,GACN,EACV;IAEA,MAAMC,aAAA,GAAgBjB,QAAA,CAAS,MAC7BW,eAAA,CAAgBV,KAAA,GACZ,GAAIM,WAAA,CAAYN,KAAA,GAAQ,MAAOU,eAAA,CAAgBV,KAAK,MACpDO,SAAA,CAAUP,KAAA,GACR,GAAIM,WAAA,CAAYN,KAAA,GAAQ,MAAOO,SAAA,CAAUP,KAAK,MAC9C,OAAOT,KAAA,CAAMS,KAAA,KAAU,WACrBT,KAAA,CAAMS,KAAA,GACN,GAAGT,KAAA,CAAMS,KAAK,GACxB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ICtCA,MAAMX,MAAA,GAASC,OAAA;IAeT,MAAAC,KAAA,GAAQC,WAAA,CAAYH,MAAA,EAAQ,WAAW;IAO7C4B,OAAA,CAAQtB,oBAAA,EAAsB;MAC5BM,QAAA,EAAUiB,KAAA,CAAM,MAAM3B,KAAA,CAAMU,QAAQ;MACpCO,GAAA,EAAKU,KAAA,CAAM,MAAM3B,KAAA,CAAMiB,GAAG;MAC1BM,YAAA,EAAcI,KAAA,CAAM,MAAM3B,KAAA,CAAMuB,YAAY;MAC5CF,SAAA,EAAWM,KAAA,CAAM,MAAM3B,KAAA,CAAMqB,SAAS;MACtCV,OAAA,EAASgB,KAAA,CAAM,MAAM3B,KAAA,CAAMW,OAAO;IAAA,CACnC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}