{"ast":null,"code":"import \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport Api from '../Api.js';\nexport default {\n  name: 'BooksTable',\n  data() {\n    return {\n      books: [],\n      columns: [{\n        label: 'ID',\n        field: 'id',\n        type: 'number',\n        sortable: true\n      }, {\n        label: 'Title',\n        field: 'title',\n        sortable: true\n      }, {\n        label: 'Author',\n        field: 'authorFullName',\n        sortable: true\n      }, {\n        label: 'Pages',\n        field: 'pages',\n        type: 'number',\n        sortable: true\n      }, {\n        label: 'Actions',\n        field: 'actions'\n      } // used for buttons\n      ]\n    };\n  },\n  mounted() {\n    this.fetchBooks();\n  },\n  methods: {\n    fetchBooks() {\n      Api.getBooks().then(response => {\n        this.books = response.data.data.map(book => ({\n          ...book,\n          authorFullName: `${book.author.name} ${book.author.surname}`\n        }));\n      }).catch(error => {\n        console.error('Failed to fetch books:', error);\n      });\n    },\n    addBook() {\n      console.log('Add Book clicked');\n      // Open a modal or navigate to add form\n    },\n    editBook(book) {\n      console.log('Edit clicked:', book);\n      // Open a modal with book info\n    },\n    deleteBook(book) {\n      console.log('Delete clicked:', book);\n      // Confirm and call API to delete, then refetch\n    }\n  }\n};","map":{"version":3,"names":["Api","name","data","books","columns","label","field","type","sortable","mounted","fetchBooks","methods","getBooks","then","response","map","book","authorFullName","author","surname","catch","error","console","addBook","log","editBook","deleteBook"],"sources":["/home/tymoteusz/Projects/StudiesProjects/Semestr_6/AdvancedWebSystems/Books/books-vue/src/components/BooksTable.vue"],"sourcesContent":["<template>\n  <div class=\"p-6 bg-white shadow-lg rounded-2xl\">\n    <div class=\"flex justify-between items-center mb-4\">\n      <h2 class=\"text-2xl font-bold\">üìò Book List</h2>\n      <button\n          class=\"bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700 transition\"\n          @click=\"addBook\"\n      >\n        ‚ûï Add Book\n      </button>\n    </div>\n\n    <vue-good-table\n        :columns=\"columns\"\n        :rows=\"books\"\n        :pagination-options=\"{ enabled: true, perPage: 5 }\"\n        :search-options=\"{ enabled: true, placeholder: 'Search books...' }\"\n        :sort-options=\"{ enabled: true }\"\n    >\n      <template #table-row=\"props\">\n        <span v-if=\"props.column.field === 'actions'\">\n          <button\n              class=\"text-sm text-white bg-yellow-500 hover:bg-yellow-600 px-3 py-1 rounded mr-2\"\n              @click=\"editBook(props.row)\"\n          >\n            ‚úèÔ∏è Edit\n          </button>\n          <button\n              class=\"text-sm text-white bg-red-500 hover:bg-red-600 px-3 py-1 rounded\"\n              @click=\"deleteBook(props.row)\"\n          >\n            üóë Delete\n          </button>\n        </span>\n        <span v-else>\n          {{ props.formattedRow[props.column.field] }}\n        </span>\n      </template>\n    </vue-good-table>\n  </div>\n</template>\n\n<script>\nimport Api from '../Api.js';\n\nexport default {\n  name: 'BooksTable',\n  data() {\n    return {\n      books: [],\n      columns: [\n        { label: 'ID', field: 'id', type: 'number', sortable: true },\n        { label: 'Title', field: 'title', sortable: true },\n        { label: 'Author', field: 'authorFullName', sortable: true },\n        { label: 'Pages', field: 'pages', type: 'number', sortable: true },\n        { label: 'Actions', field: 'actions' }, // used for buttons\n      ],\n    };\n  },\n  mounted() {\n    this.fetchBooks();\n  },\n  methods: {\n    fetchBooks() {\n      Api.getBooks()\n          .then((response) => {\n            this.books = response.data.data.map((book) => ({\n              ...book,\n              authorFullName: `${book.author.name} ${book.author.surname}`,\n            }));\n          })\n          .catch((error) => {\n            console.error('Failed to fetch books:', error);\n          });\n    },\n    addBook() {\n      console.log('Add Book clicked');\n      // Open a modal or navigate to add form\n    },\n    editBook(book) {\n      console.log('Edit clicked:', book);\n      // Open a modal with book info\n    },\n    deleteBook(book) {\n      console.log('Delete clicked:', book);\n      // Confirm and call API to delete, then refetch\n    },\n  },\n};\n</script>\n"],"mappings":";;AA2CA,OAAOA,GAAE,MAAO,WAAW;AAE3B,eAAe;EACbC,IAAI,EAAE,YAAY;EAClBC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,KAAK,EAAE,EAAE;MACTC,OAAO,EAAE,CACP;QAAEC,KAAK,EAAE,IAAI;QAAEC,KAAK,EAAE,IAAI;QAAEC,IAAI,EAAE,QAAQ;QAAEC,QAAQ,EAAE;MAAK,CAAC,EAC5D;QAAEH,KAAK,EAAE,OAAO;QAAEC,KAAK,EAAE,OAAO;QAAEE,QAAQ,EAAE;MAAK,CAAC,EAClD;QAAEH,KAAK,EAAE,QAAQ;QAAEC,KAAK,EAAE,gBAAgB;QAAEE,QAAQ,EAAE;MAAK,CAAC,EAC5D;QAAEH,KAAK,EAAE,OAAO;QAAEC,KAAK,EAAE,OAAO;QAAEC,IAAI,EAAE,QAAQ;QAAEC,QAAQ,EAAE;MAAK,CAAC,EAClE;QAAEH,KAAK,EAAE,SAAS;QAAEC,KAAK,EAAE;MAAU,CAAC,CAAE;MAAA;IAE5C,CAAC;EACH,CAAC;EACDG,OAAOA,CAAA,EAAG;IACR,IAAI,CAACC,UAAU,CAAC,CAAC;EACnB,CAAC;EACDC,OAAO,EAAE;IACPD,UAAUA,CAAA,EAAG;MACXV,GAAG,CAACY,QAAQ,CAAC,EACRC,IAAI,CAAEC,QAAQ,IAAK;QAClB,IAAI,CAACX,KAAI,GAAIW,QAAQ,CAACZ,IAAI,CAACA,IAAI,CAACa,GAAG,CAAEC,IAAI,KAAM;UAC7C,GAAGA,IAAI;UACPC,cAAc,EAAE,GAAGD,IAAI,CAACE,MAAM,CAACjB,IAAI,IAAIe,IAAI,CAACE,MAAM,CAACC,OAAO;QAC5D,CAAC,CAAC,CAAC;MACL,CAAC,EACAC,KAAK,CAAEC,KAAK,IAAK;QAChBC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;MAChD,CAAC,CAAC;IACR,CAAC;IACDE,OAAOA,CAAA,EAAG;MACRD,OAAO,CAACE,GAAG,CAAC,kBAAkB,CAAC;MAC/B;IACF,CAAC;IACDC,QAAQA,CAACT,IAAI,EAAE;MACbM,OAAO,CAACE,GAAG,CAAC,eAAe,EAAER,IAAI,CAAC;MAClC;IACF,CAAC;IACDU,UAAUA,CAACV,IAAI,EAAE;MACfM,OAAO,CAACE,GAAG,CAAC,iBAAiB,EAAER,IAAI,CAAC;MACpC;IACF;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}