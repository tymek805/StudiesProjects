{"ast":null,"code":"import { d as RX_SPACES, e as RX_REGEXP_REPLACE, f as RX_UNDERSCORE, g as RX_LOWER_UPPER, h as RX_FIRST_START_SPACE_WORD, i as RX_START_SPACE_WORD } from \"./constants-COk0ugyL.mjs\";\nconst startCase = str => str.replace(RX_UNDERSCORE, \" \").replace(RX_LOWER_UPPER, (_, $1, $2) => `${$1} ${$2}`).replace(RX_FIRST_START_SPACE_WORD, (_, $1, $2) => $1 + $2.toUpperCase());\nconst titleCase = str => str.replace(RX_UNDERSCORE, \" \").replace(RX_LOWER_UPPER, (_, $1, $2) => `${$1} ${$2}`).replace(RX_START_SPACE_WORD, (_, $1, $2) => $1 + $2.toUpperCase());\nconst upperFirst = str => {\n  const trim = str.trim();\n  return trim.charAt(0).toUpperCase() + trim.slice(1);\n};\nconst escapeRegExp = str => str.replace(RX_REGEXP_REPLACE, \"\\\\$&\");\nconst escapeRegExpChars = str => escapeRegExp(str).replace(RX_SPACES, \"\\\\s\");\nconst toPascalCase = str => str.replace(/-./g, match => match.charAt(1).toUpperCase()).replace(/\\b\\w/g, match => match.toUpperCase()).replace(/\\s+/g, \"\");\nexport { titleCase as a, escapeRegExpChars as e, startCase as s, toPascalCase as t, upperFirst as u };","map":{"version":3,"names":["startCase","str","replace","RX_UNDERSCORE","RX_LOWER_UPPER","_","$1","$2","RX_FIRST_START_SPACE_WORD","toUpperCase","titleCase","RX_START_SPACE_WORD","upperFirst","trim","charAt","slice","escapeRegExp","RX_REGEXP_REPLACE","escapeRegExpChars","RX_SPACES","toPascalCase","match"],"sources":["../src/utils/stringUtils.ts"],"sourcesContent":["import {\n  RX_FIRST_START_SPACE_WORD,\n  RX_LOWER_UPPER,\n  RX_REGEXP_REPLACE,\n  RX_SPACES,\n  RX_START_SPACE_WORD,\n  RX_UNDERSCORE,\n} from './constants'\n\n/**\n * @param str\n * @returns\n */\nexport const startCase = (str: string): string =>\n  str\n    .replace(RX_UNDERSCORE, ' ')\n    .replace(RX_LOWER_UPPER, (_, $1, $2) => `${$1} ${$2}`)\n    .replace(RX_FIRST_START_SPACE_WORD, (_, $1, $2) => $1 + $2.toUpperCase())\n\n/**\n * @param str\n * @returns\n */\nexport const titleCase = (str: string): string =>\n  str\n    .replace(RX_UNDERSCORE, ' ')\n    .replace(RX_LOWER_UPPER, (_, $1, $2) => `${$1} ${$2}`)\n    .replace(RX_START_SPACE_WORD, (_, $1, $2) => $1 + $2.toUpperCase())\n\n/**\n * Uppercases the first letter of a string and returns a new string\n *\n * @param str\n * @returns\n */\nexport const upperFirst = (str: string): string => {\n  const trim = str.trim()\n  return trim.charAt(0).toUpperCase() + trim.slice(1)\n}\n\n/**\n * Escapes a string for RegExp usage.\n *\n * @param str\n * @returns\n */\nexport const escapeRegExp = (str: string): string => str.replace(RX_REGEXP_REPLACE, '\\\\$&')\n\n/**\n * Escapes special chars in string and replaces\n * contiguous spaces with a whitespace match\n *\n * @param str\n * @returns\n */\nexport const escapeRegExpChars = (str: string): string =>\n  escapeRegExp(str).replace(RX_SPACES, '\\\\s')\n\nexport const toPascalCase = (str: string) =>\n  str\n    // Convert kebab-case to Pascal case\n    .replace(/-./g, (match) => match.charAt(1).toUpperCase())\n    // Capitalize the first letter of each word\n    .replace(/\\b\\w/g, (match) => match.toUpperCase())\n    .replace(/\\s+/g, '') // Remove any spaces\n"],"mappings":";AAaO,MAAMA,SAAA,GAAaC,GAAA,IACxBA,GAAA,CACGC,OAAA,CAAQC,aAAA,EAAe,GAAG,EAC1BD,OAAA,CAAQE,cAAA,EAAgB,CAACC,CAAA,EAAGC,EAAA,EAAIC,EAAA,KAAO,GAAGD,EAAE,IAAIC,EAAE,EAAE,EACpDL,OAAA,CAAQM,yBAAA,EAA2B,CAACH,CAAA,EAAGC,EAAA,EAAIC,EAAA,KAAOD,EAAA,GAAKC,EAAA,CAAGE,WAAA,CAAa;AAMrE,MAAMC,SAAA,GAAaT,GAAA,IACxBA,GAAA,CACGC,OAAA,CAAQC,aAAA,EAAe,GAAG,EAC1BD,OAAA,CAAQE,cAAA,EAAgB,CAACC,CAAA,EAAGC,EAAA,EAAIC,EAAA,KAAO,GAAGD,EAAE,IAAIC,EAAE,EAAE,EACpDL,OAAA,CAAQS,mBAAA,EAAqB,CAACN,CAAA,EAAGC,EAAA,EAAIC,EAAA,KAAOD,EAAA,GAAKC,EAAA,CAAGE,WAAA,CAAa;AAQzD,MAAAG,UAAA,GAAcX,GAAA,IAAwB;EAC3C,MAAAY,IAAA,GAAOZ,GAAA,CAAIY,IAAA,CAAK;EACf,OAAAA,IAAA,CAAKC,MAAA,CAAO,CAAC,EAAEL,WAAA,KAAgBI,IAAA,CAAKE,KAAA,CAAM,CAAC;AACpD;AAQO,MAAMC,YAAA,GAAgBf,GAAA,IAAwBA,GAAA,CAAIC,OAAA,CAAQe,iBAAA,EAAmB,MAAM;AAS7E,MAAAC,iBAAA,GAAqBjB,GAAA,IAChCe,YAAA,CAAaf,GAAG,EAAEC,OAAA,CAAQiB,SAAA,EAAW,KAAK;AAE/B,MAAAC,YAAA,GAAgBnB,GAAA,IAC3BA,GAAA,CAEGC,OAAA,CAAQ,OAAQmB,KAAA,IAAUA,KAAA,CAAMP,MAAA,CAAO,CAAC,EAAEL,WAAA,EAAa,EAEvDP,OAAA,CAAQ,SAAUmB,KAAA,IAAUA,KAAA,CAAMZ,WAAA,EAAa,EAC/CP,OAAA,CAAQ,QAAQ,EAAE","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}