{"ast":null,"code":"import \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport { defineComponent, createElementBlock, openBlock, unref, renderSlot, computed, toValue } from \"vue\";\nimport { u as useDefaults } from \"./useDefaults-DANje4tM.mjs\";\nimport { g as get } from \"./object-BWoyyA2y.mjs\";\nconst _hoisted_1 = [\"value\", \"disabled\"];\nconst _sfc_main = /* @__PURE__ */defineComponent({\n  __name: \"BFormSelectOption\",\n  props: {\n    disabled: {\n      type: Boolean,\n      default: false\n    },\n    value: {\n      default: void 0\n    }\n  },\n  setup(__props) {\n    const _props = __props;\n    const props = useDefaults(_props, \"BFormSelectOption\");\n    return (_ctx, _cache) => {\n      return openBlock(), createElementBlock(\"option\", {\n        value: unref(props).value,\n        disabled: unref(props).disabled\n      }, [renderSlot(_ctx.$slots, \"default\")], 8, _hoisted_1);\n    };\n  }\n});\nconst useFormSelect = (options, props) => {\n  const isComplex = option => typeof option === \"object\" && option !== null && \"label\" in option;\n  const normalizeOption = option => {\n    const propsValue = toValue(props);\n    if (typeof option === \"string\") {\n      return {\n        value: option,\n        text: option\n      };\n    }\n    if (typeof option === \"number\") {\n      return {\n        value: option,\n        text: `${option}`\n      };\n    }\n    if (option instanceof Date) {\n      return {\n        value: option,\n        text: option.toLocaleString()\n      };\n    }\n    const value = get(option, propsValue.valueField);\n    const text = get(option, propsValue.textField);\n    const disabled = get(option, propsValue.disabledField);\n    const opts = propsValue.optionsField ? get(option, propsValue.optionsField) : void 0;\n    if (opts !== void 0) {\n      return {\n        label: get(option, propsValue.labelField) || text,\n        options: opts\n      };\n    }\n    return {\n      ...(typeof option === \"object\" ? option : void 0),\n      value,\n      text,\n      disabled\n    };\n  };\n  const normalizeOptions = opts => opts.map(option => normalizeOption(option));\n  const normalizedOptions = computed(() => normalizeOptions(toValue(options)));\n  return {\n    normalizedOptions,\n    isComplex\n  };\n};\nexport { _sfc_main as _, useFormSelect as u };","map":{"version":3,"names":["_props","__props","props","useDefaults","useFormSelect","options","isComplex","option","normalizeOption","propsValue","toValue","value","text","Date","toLocaleString","get","valueField","textField","disabled","disabledField","opts","optionsField","label","labelField","normalizeOptions","map","normalizedOptions","computed"],"sources":["../src/components/BFormSelect/BFormSelectOption.vue","../src/composables/useFormSelect.ts"],"sourcesContent":["<template>\n  <option :value=\"props.value\" :disabled=\"props.disabled\">\n    <slot />\n  </option>\n</template>\n\n<script setup lang=\"ts\" generic=\"T\">\nimport {useDefaults} from '../../composables/useDefaults'\nimport type {BFormSelectOptionProps} from '../../types/ComponentProps'\n\nconst _props = withDefaults(defineProps<BFormSelectOptionProps<T>>(), {\n  disabled: false,\n  value: undefined,\n})\nconst props = useDefaults<BFormSelectOptionProps<T>>(_props, 'BFormSelectOption')\n\ndefineSlots<{\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  default?: (props: Record<string, never>) => any\n}>()\n</script>\n","import {computed, type MaybeRefOrGetter, toValue} from 'vue'\nimport {get} from '../utils/object'\nimport type {ComplexSelectOptionRaw, SelectOption} from '../types/SelectTypes'\n\nexport const useFormSelect = (\n  options: MaybeRefOrGetter<ReadonlyArray<unknown>>,\n  props: MaybeRefOrGetter<Record<string, unknown>>\n) => {\n  const isComplex = (option: unknown): option is ComplexSelectOptionRaw =>\n    typeof option === 'object' && option !== null && 'label' in option\n\n  const normalizeOption = (option: unknown): ComplexSelectOptionRaw | SelectOption => {\n    const propsValue = toValue(props)\n\n    if (typeof option === 'string') {\n      return {value: option, text: option}\n    }\n    if (typeof option === 'number') {\n      return {value: option, text: `${option}`}\n    }\n    if (option instanceof Date) {\n      return {value: option, text: option.toLocaleString()}\n    }\n\n    const value: unknown = get(option, propsValue.valueField as string)\n    const text: string = get(option, propsValue.textField as string)\n    const disabled: boolean = get(option, propsValue.disabledField as string)\n\n    const opts: undefined | unknown[] = propsValue.optionsField\n      ? get(option, propsValue.optionsField as string)\n      : undefined\n\n    if (opts !== undefined) {\n      return {\n        label: get(option, propsValue.labelField as string) || text,\n        options: opts,\n      } as ComplexSelectOptionRaw\n    }\n\n    return {\n      ...(typeof option === 'object' ? option : undefined),\n      value,\n      text,\n      disabled,\n    } as SelectOption\n  }\n\n  const normalizeOptions = (\n    opts: ReadonlyArray<unknown>\n  ): (ComplexSelectOptionRaw | SelectOption)[] => opts.map((option) => normalizeOption(option))\n\n  const normalizedOptions = computed(() => normalizeOptions(toValue(options)))\n\n  return {normalizedOptions, isComplex}\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;IAUA,MAAMA,MAAA,GAASC,OAAA;IAIT,MAAAC,KAAA,GAAQC,WAAA,CAAuCH,MAAA,EAAQ,mBAAmB;;;;;;;;;ACVnE,MAAAI,aAAA,GAAgBA,CAC3BC,OAAA,EACAH,KAAA,KACG;EACG,MAAAI,SAAA,GAAaC,MAAA,IACjB,OAAOA,MAAA,KAAW,YAAYA,MAAA,KAAW,QAAQ,WAAWA,MAAA;EAExD,MAAAC,eAAA,GAAmBD,MAAA,IAA2D;IAC5E,MAAAE,UAAA,GAAaC,OAAA,CAAQR,KAAK;IAE5B,WAAOK,MAAA,KAAW,UAAU;MAC9B,OAAO;QAACI,KAAA,EAAOJ,MAAA;QAAQK,IAAA,EAAML;MAAM;IAAA;IAEjC,WAAOA,MAAA,KAAW,UAAU;MAC9B,OAAO;QAACI,KAAA,EAAOJ,MAAA;QAAQK,IAAA,EAAM,GAAGL,MAAM;MAAE;IAAA;IAE1C,IAAIA,MAAA,YAAkBM,IAAA,EAAM;MAC1B,OAAO;QAACF,KAAA,EAAOJ,MAAA;QAAQK,IAAA,EAAML,MAAA,CAAOO,cAAA;MAAgB;IAAA;IAGtD,MAAMH,KAAA,GAAiBI,GAAA,CAAIR,MAAA,EAAQE,UAAA,CAAWO,UAAoB;IAClE,MAAMJ,IAAA,GAAeG,GAAA,CAAIR,MAAA,EAAQE,UAAA,CAAWQ,SAAmB;IAC/D,MAAMC,QAAA,GAAoBH,GAAA,CAAIR,MAAA,EAAQE,UAAA,CAAWU,aAAuB;IAExE,MAAMC,IAAA,GAA8BX,UAAA,CAAWY,YAAA,GAC3CN,GAAA,CAAIR,MAAA,EAAQE,UAAA,CAAWY,YAAsB,IAC7C;IAEJ,IAAID,IAAA,KAAS,QAAW;MACf;QACLE,KAAA,EAAOP,GAAA,CAAIR,MAAA,EAAQE,UAAA,CAAWc,UAAoB,KAAKX,IAAA;QACvDP,OAAA,EAASe;MACX;IAAA;IAGK;MACL,IAAI,OAAOb,MAAA,KAAW,WAAWA,MAAA,GAAS;MAC1CI,KAAA;MACAC,IAAA;MACAM;IACF;EACF;EAEM,MAAAM,gBAAA,GACJJ,IAAA,IAC8CA,IAAA,CAAKK,GAAA,CAAKlB,MAAA,IAAWC,eAAA,CAAgBD,MAAM,CAAC;EAE5F,MAAMmB,iBAAA,GAAoBC,QAAA,CAAS,MAAMH,gBAAA,CAAiBd,OAAA,CAAQL,OAAO,CAAC,CAAC;EAEpE;IAACqB,iBAAA;IAAmBpB;EAAS;AACtC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}