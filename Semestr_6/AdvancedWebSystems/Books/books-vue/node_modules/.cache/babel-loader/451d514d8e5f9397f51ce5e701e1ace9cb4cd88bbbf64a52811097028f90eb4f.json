{"ast":null,"code":"import { ref, toRef, markRaw, watch } from \"vue\";\nimport { m as modalControllerPluginKey } from \"../../../keys-D3gOZjD-.mjs\";\nconst modalControllerPlugin = {\n  install(app) {\n    const modals = ref(/* @__PURE__ */new Map());\n    const buildPromise = () => {\n      let resolveFunc = () => {};\n      const promise = new Promise(resolve => {\n        resolveFunc = resolve;\n      });\n      return {\n        value: promise,\n        resolve: resolveFunc\n      };\n    };\n    const buildPrereqs = id => [buildPromise(), id || Symbol(\"Modals controller\"), true];\n    const show = (obj = {}) => {\n      var _a;\n      const resolvedProps = toRef(obj.props);\n      const [_promise, _self, _modelValue] = buildPrereqs((_a = resolvedProps.value) == null ? void 0 : _a.id);\n      modals.value.set(_self, {\n        component: !obj.component ? void 0 : markRaw(obj.component),\n        props: {\n          ...resolvedProps.value,\n          _isConfirm: false,\n          _promise,\n          _modelValue\n        }\n      });\n      watch(resolvedProps, newValue => {\n        const previous = modals.value.get(_self);\n        if (!previous) return;\n        modals.value.set(_self, {\n          component: !obj.component ? void 0 : markRaw(obj.component),\n          props: {\n            ...previous.props,\n            ...newValue\n          }\n        });\n      });\n      return _promise.value;\n    };\n    const confirm = (obj = {}) => {\n      var _a;\n      const resolvedProps = toRef(obj.props);\n      const [_promise, _self, _modelValue] = buildPrereqs((_a = resolvedProps.value) == null ? void 0 : _a.id);\n      modals.value.set(_self, {\n        component: !obj.component ? void 0 : markRaw(obj.component),\n        props: {\n          ...resolvedProps.value,\n          _isConfirm: true,\n          _promise,\n          _modelValue\n        }\n      });\n      watch(resolvedProps, newValue => {\n        const previous = modals.value.get(_self);\n        if (!previous) return;\n        modals.value.set(_self, {\n          component: !obj.component ? void 0 : markRaw(obj.component),\n          props: {\n            ...previous.props,\n            ...newValue\n          }\n        });\n      });\n      return _promise.value;\n    };\n    const leave = self => {\n      const modal = modals.value.get(self);\n      if (!(modal == null ? void 0 : modal.props)) return;\n      modal.props = {\n        ...modal.props,\n        _modelValue: false\n      };\n    };\n    const remove = self => {\n      modals.value.delete(self);\n    };\n    app.provide(modalControllerPluginKey, {\n      modals,\n      remove,\n      show,\n      confirm,\n      leave\n    });\n  }\n};\nexport { modalControllerPlugin };","map":{"version":3,"names":["modalControllerPlugin","install","app","modals","ref","Map","buildPromise","resolveFunc","promise","Promise","resolve","value","buildPrereqs","id","Symbol","show","obj","resolvedProps","toRef","props","_promise","_self","_modelValue","_a","set","component","markRaw","_isConfirm","watch","newValue","previous","get","confirm","leave","self","modal","remove","delete","provide","modalControllerPluginKey"],"sources":["../../../../src/plugins/modalController/index.ts"],"sourcesContent":["import {markRaw, type Plugin, ref, toRef, watch} from 'vue'\nimport {modalControllerPluginKey} from '../../utils/keys'\nimport type {\n  ControllerKey,\n  ModalOrchestratorMapValue,\n  ModalOrchestratorShowParam,\n} from '../../types/ComponentOrchestratorTypes'\n\nexport const modalControllerPlugin: Plugin = {\n  install(app) {\n    const modals = ref(new Map<ControllerKey, ModalOrchestratorMapValue>())\n\n    const buildPromise = (): {\n      value: Promise<boolean | null>\n      resolve: (value: boolean | null) => void\n    } => {\n      let resolveFunc: (value: boolean | null) => void = () => {\n        /* empty */\n      }\n\n      const promise = new Promise<boolean | null>((resolve) => {\n        resolveFunc = resolve\n      })\n\n      return {\n        value: promise,\n        resolve: resolveFunc,\n      }\n    }\n\n    const buildPrereqs = (id: string | undefined) =>\n      [buildPromise(), (id || Symbol('Modals controller')) as ControllerKey, true] as const\n\n    const show = (obj: ModalOrchestratorShowParam = {}): Promise<boolean | null> => {\n      const resolvedProps = toRef(obj.props)\n\n      const [_promise, _self, _modelValue] = buildPrereqs(resolvedProps.value?.id)\n\n      modals.value.set(_self, {\n        component: !obj.component ? undefined : markRaw(obj.component),\n        props: {...resolvedProps.value, _isConfirm: false, _promise, _modelValue},\n      })\n\n      watch(resolvedProps, (newValue) => {\n        const previous = modals.value.get(_self)\n        if (!previous) return\n        modals.value.set(_self, {\n          component: !obj.component ? undefined : markRaw(obj.component),\n          props: {...previous.props, ...newValue},\n        })\n      })\n\n      return _promise.value\n    }\n\n    const confirm = (obj: ModalOrchestratorShowParam = {}): Promise<boolean | null> => {\n      const resolvedProps = toRef(obj.props)\n\n      const [_promise, _self, _modelValue] = buildPrereqs(resolvedProps.value?.id)\n\n      modals.value.set(_self, {\n        component: !obj.component ? undefined : markRaw(obj.component),\n        props: {...resolvedProps.value, _isConfirm: true, _promise, _modelValue},\n      })\n\n      watch(resolvedProps, (newValue) => {\n        const previous = modals.value.get(_self)\n        if (!previous) return\n        modals.value.set(_self, {\n          component: !obj.component ? undefined : markRaw(obj.component),\n          props: {...previous.props, ...newValue},\n        })\n      })\n\n      return _promise.value\n    }\n\n    /**\n     * You can get the symbol param from the return value from the show method, or use props.id\n     */\n    const leave = (self: ControllerKey) => {\n      const modal = modals.value.get(self)\n      if (!modal?.props) return\n      modal.props = {\n        ...modal.props,\n        _modelValue: false,\n      }\n    }\n\n    /**\n     * You can get the symbol param from the return value from the show method, or use props.id\n     */\n    const remove = (self: ControllerKey) => {\n      modals.value.delete(self)\n    }\n\n    app.provide(modalControllerPluginKey, {\n      modals,\n      remove,\n      show,\n      confirm,\n      leave,\n    })\n  },\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}