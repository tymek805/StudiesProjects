{"ast":null,"code":"import { computed, toValue } from \"vue\";\nconst useAriaInvalid = (ariaInvalid, state) => computed(() => {\n  const resolvedAriaInvalid = toValue(ariaInvalid);\n  const resolvedState = toValue(state);\n  const resolvedAriaInvalidValue = resolvedAriaInvalid === true ? \"true\" : typeof resolvedAriaInvalid === \"string\" ? resolvedAriaInvalid : resolvedState === false ? \"true\" : resolvedAriaInvalid === false ? \"false\" : void 0;\n  return resolvedAriaInvalidValue;\n});\nexport { useAriaInvalid as u };","map":{"version":3,"names":["useAriaInvalid","ariaInvalid","state","computed","resolvedAriaInvalid","toValue","resolvedState","resolvedAriaInvalidValue"],"sources":["../src/composables/useAriaInvalid.ts"],"sourcesContent":["import type {AriaInvalid} from '../types/AriaInvalid'\nimport {computed, type MaybeRefOrGetter, toValue} from 'vue'\n\nexport const useAriaInvalid = (\n  ariaInvalid: MaybeRefOrGetter<AriaInvalid | undefined>,\n  state: MaybeRefOrGetter<boolean | null | undefined>\n) =>\n  computed(() => {\n    const resolvedAriaInvalid = toValue(ariaInvalid)\n    const resolvedState = toValue(state)\n\n    const resolvedAriaInvalidValue =\n      resolvedAriaInvalid === true\n        ? 'true'\n        : typeof resolvedAriaInvalid === 'string'\n          ? resolvedAriaInvalid\n          : resolvedState === false\n            ? 'true'\n            : resolvedAriaInvalid === false\n              ? 'false'\n              : undefined\n\n    return resolvedAriaInvalidValue\n  })\n"],"mappings":";AAGO,MAAMA,cAAA,GAAiBA,CAC5BC,WAAA,EACAC,KAAA,KAEAC,QAAA,CAAS,MAAM;EACP,MAAAC,mBAAA,GAAsBC,OAAA,CAAQJ,WAAW;EACzC,MAAAK,aAAA,GAAgBD,OAAA,CAAQH,KAAK;EAEnC,MAAMK,wBAAA,GACJH,mBAAA,KAAwB,OACpB,SACA,OAAOA,mBAAA,KAAwB,WAC7BA,mBAAA,GACAE,aAAA,KAAkB,QAChB,SACAF,mBAAA,KAAwB,QACtB,UACA;EAEL,OAAAG,wBAAA;AACT,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}