{"ast":null,"code":"import \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport \"core-js/modules/es.iterator.reduce.js\";\nimport \"core-js/modules/es.set.difference.v2.js\";\nimport \"core-js/modules/es.set.intersection.v2.js\";\nimport \"core-js/modules/es.set.is-disjoint-from.v2.js\";\nimport \"core-js/modules/es.set.is-subset-of.v2.js\";\nimport \"core-js/modules/es.set.is-superset-of.v2.js\";\nimport \"core-js/modules/es.set.symmetric-difference.v2.js\";\nimport \"core-js/modules/es.set.union.v2.js\";\nconst componentsWithExternalPath = {\n  BAccordion: \"/components/BAccordion\",\n  BAccordionItem: \"/components/BAccordion\",\n  BAlert: \"/components/BAlert\",\n  BAvatar: \"/components/BAvatar\",\n  BAvatarGroup: \"/components/BAvatar\",\n  BBadge: \"/components/BBadge\",\n  BBreadcrumb: \"/components/BBreadcrumb\",\n  BBreadcrumbItem: \"/components/BBreadcrumb\",\n  BButton: \"/components/BButton\",\n  BButtonGroup: \"/components/BButton\",\n  BButtonToolbar: \"/components/BButton\",\n  BCloseButton: \"/components/BButton\",\n  BCard: \"/components/BCard\",\n  BCardBody: \"/components/BCard\",\n  BCardFooter: \"/components/BCard\",\n  BCardGroup: \"/components/BCard\",\n  BCardHeader: \"/components/BCard\",\n  BCardImg: \"/components/BCard\",\n  BCardSubtitle: \"/components/BCard\",\n  BCardText: \"/components/BCard\",\n  BCardTitle: \"/components/BCard\",\n  BCarousel: \"/components/BCarousel\",\n  BCarouselSlide: \"/components/BCarousel\",\n  BCol: \"/components/BContainer\",\n  BCollapse: \"/components/BCollapse\",\n  BContainer: \"/components/BContainer\",\n  BDropdown: \"/components/BDropdown\",\n  BDropdownDivider: \"/components/BDropdown\",\n  BDropdownForm: \"/components/BDropdown\",\n  BDropdownGroup: \"/components/BDropdown\",\n  BDropdownHeader: \"/components/BDropdown\",\n  BDropdownItem: \"/components/BDropdown\",\n  BDropdownItemButton: \"/components/BDropdown\",\n  BDropdownText: \"/components/BDropdown\",\n  BForm: \"/components/BForm\",\n  BFormCheckbox: \"/components/BFormCheckbox\",\n  BFormCheckboxGroup: \"/components/BFormCheckbox\",\n  BFormDatalist: \"/components/BForm\",\n  BFormFile: \"/components/BFormFile\",\n  BFormFloatingLabel: \"/components/BForm\",\n  BFormGroup: \"/components/BFormGroup\",\n  BFormInput: \"/components/BFormInput\",\n  BFormInvalidFeedback: \"/components/BForm\",\n  BFormRadio: \"/components/BFormRadio\",\n  BFormRadioGroup: \"/components/BFormRadio\",\n  BFormRow: \"/components/BForm\",\n  BFormSelect: \"/components/BFormSelect\",\n  BFormSelectOption: \"/components/BFormSelect\",\n  BFormSelectOptionGroup: \"/components/BFormSelect\",\n  BFormSpinbutton: \"/components/BFormSpinbutton\",\n  BFormTag: \"/components/BFormTags\",\n  BFormTags: \"/components/BFormTags\",\n  BFormText: \"/components/BForm\",\n  BFormTextarea: \"/components/BFormTextarea\",\n  BFormValidFeedback: \"/components/BForm\",\n  BImg: \"/components/BImg\",\n  BInput: \"/components/BFormInput\",\n  BInputGroup: \"/components/BInputGroup\",\n  BInputGroupText: \"/components/BInputGroup\",\n  BListGroup: \"/components/BListGroup\",\n  BListGroupItem: \"/components/BListGroup\",\n  BModal: \"/components/BModal\",\n  BModalOrchestrator: \"/components/BModal\",\n  BNav: \"/components/BNav\",\n  BNavForm: \"/components/BNav\",\n  BNavItem: \"/components/BNav\",\n  BNavItemDropdown: \"/components/BNav\",\n  BNavText: \"/components/BNav\",\n  BNavbar: \"/components/BNavbar\",\n  BNavbarBrand: \"/components/BNavbar\",\n  BNavbarNav: \"/components/BNavbar\",\n  BNavbarToggle: \"/components/BNavbar\",\n  BOffcanvas: \"/components/BOffcanvas\",\n  BOverlay: \"/components/BOverlay\",\n  BPagination: \"/components/BPagination\",\n  BPlaceholder: \"/components/BPlaceholder\",\n  BPlaceholderButton: \"/components/BPlaceholder\",\n  BPlaceholderCard: \"/components/BPlaceholder\",\n  BPlaceholderTable: \"/components/BPlaceholder\",\n  BPlaceholderWrapper: \"/components/BPlaceholder\",\n  BPopover: \"/components/BPopover\",\n  BProgress: \"/components/BProgress\",\n  BRow: \"/components/BContainer\",\n  BSpinner: \"/components/BSpinner\",\n  BTab: \"/components/BTabs\",\n  BTabs: \"/components/BTabs\",\n  BToast: \"/components/BToast\",\n  BToastOrchestrator: \"/components/BToast\",\n  BTooltip: \"/components/BTooltip\",\n  BLink: \"/components/BLink\",\n  BProgressBar: \"/components/BProgress\",\n  BTableSimple: \"/components/BTable\",\n  BTableLite: \"/components/BTable\",\n  BTable: \"/components/BTable\",\n  BTbody: \"/components/BTable\",\n  BTd: \"/components/BTable\",\n  BTh: \"/components/BTable\",\n  BThead: \"/components/BTable\",\n  BTfoot: \"/components/BTable\",\n  BTr: \"/components/BTable\",\n  BPopoverOrchestrator: \"/components/BPopover\"\n};\nconst componentNames = Object.freeze(Object.keys(componentsWithExternalPath));\nconst directivesWithExternalPath = {\n  vBColorMode: \"/directives/BColorMode\",\n  vBModal: \"/directives/BModal\",\n  vBPopover: \"/directives/BPopover\",\n  vBScrollspy: \"/directives/BScrollspy\",\n  vBToggle: \"/directives/BToggle\",\n  vBTooltip: \"/directives/BTooltip\"\n};\nconst directiveNames = Object.freeze(Object.keys(directivesWithExternalPath));\nconst composablesWithExternalPath = {\n  useBreadcrumb: \"/composables/useBreadcrumb\",\n  useColorMode: \"/composables/useColorMode\",\n  useModal: \"/composables/useModal\",\n  useModalController: \"/composables/useModalController\",\n  useScrollspy: \"/composables/useScrollspy\",\n  useToastController: \"/composables/useToastController\",\n  usePopoverController: \"/composables/usePopoverController\"\n};\nconst composableNames = Object.freeze(Object.keys(composablesWithExternalPath));\nconst bvKey = \"bootstrap-vue-next\";\nconst parseActiveImports = (options, values) => {\n  const {\n    all,\n    ...others\n  } = options;\n  const valuesCopy = {};\n  if (all) {\n    values.forEach(el => {\n      valuesCopy[el] = all;\n    });\n  }\n  const merge = {\n    ...valuesCopy,\n    ...others\n  };\n  return Object.entries(merge).filter(([name, value]) => !!value && values.includes(name)).map(([name]) => name);\n};\nconst usedComponents = /* @__PURE__ */new Set();\nconst usedDirectives = /* @__PURE__ */new Set();\nconst BootstrapVueNextResolver = Object.assign(({\n  aliases = {},\n  directives = true,\n  components = true\n} = {}) => {\n  const selectedComponents = typeof components === \"boolean\" ? {\n    all: components\n  } : components;\n  const compImports = parseActiveImports(selectedComponents, componentNames).reduce((map, name) => {\n    map.set(name, `${bvKey}${componentsWithExternalPath[name]}`);\n    return map;\n  }, /* @__PURE__ */new Map());\n  const selectedDirectives = typeof directives === \"boolean\" ? {\n    all: directives\n  } : directives;\n  const dirImports = parseActiveImports(selectedDirectives, directiveNames).reduce((map, directive) => {\n    const key = directive.toLowerCase().startsWith(\"v\") ? directive : `v${directive}`;\n    map.set(key, `${bvKey}${directivesWithExternalPath[key]}`);\n    return map;\n  }, /* @__PURE__ */new Map());\n  const resolvers = [{\n    type: \"component\",\n    resolve(name) {\n      const destination = compImports.get(name);\n      const aliasDestination = compImports.get(aliases[name]);\n      if (aliasDestination) {\n        const val = aliases[name];\n        usedComponents.add(val);\n        return {\n          name: val,\n          from: aliasDestination\n        };\n      }\n      if (destination) {\n        usedComponents.add(name);\n        return {\n          name,\n          from: destination\n        };\n      }\n    }\n  }, {\n    type: \"directive\",\n    resolve(name) {\n      const prefixedName = `v${name}`;\n      const destination = dirImports.get(prefixedName);\n      if (destination) {\n        usedDirectives.add(prefixedName);\n        return {\n          name: prefixedName,\n          from: destination\n        };\n      }\n    }\n  }];\n  return resolvers;\n}, {\n  __usedComponents: usedComponents,\n  __usedDirectives: usedDirectives\n});\nconst index = /* @__PURE__ */Object.freeze(/* @__PURE__ */Object.defineProperty({\n  __proto__: null,\n  BootstrapVueNextResolver\n}, Symbol.toStringTag, {\n  value: \"Module\"\n}));\nexport { BootstrapVueNextResolver as B, componentsWithExternalPath as a, composableNames as b, componentNames as c, composablesWithExternalPath as d, directiveNames as e, directivesWithExternalPath as f, index as i };","map":{"version":3,"names":["componentsWithExternalPath","BAccordion","BAccordionItem","BAlert","BAvatar","BAvatarGroup","BBadge","BBreadcrumb","BBreadcrumbItem","BButton","BButtonGroup","BButtonToolbar","BCloseButton","BCard","BCardBody","BCardFooter","BCardGroup","BCardHeader","BCardImg","BCardSubtitle","BCardText","BCardTitle","BCarousel","BCarouselSlide","BCol","BCollapse","BContainer","BDropdown","BDropdownDivider","BDropdownForm","BDropdownGroup","BDropdownHeader","BDropdownItem","BDropdownItemButton","BDropdownText","BForm","BFormCheckbox","BFormCheckboxGroup","BFormDatalist","BFormFile","BFormFloatingLabel","BFormGroup","BFormInput","BFormInvalidFeedback","BFormRadio","BFormRadioGroup","BFormRow","BFormSelect","BFormSelectOption","BFormSelectOptionGroup","BFormSpinbutton","BFormTag","BFormTags","BFormText","BFormTextarea","BFormValidFeedback","BImg","BInput","BInputGroup","BInputGroupText","BListGroup","BListGroupItem","BModal","BModalOrchestrator","BNav","BNavForm","BNavItem","BNavItemDropdown","BNavText","BNavbar","BNavbarBrand","BNavbarNav","BNavbarToggle","BOffcanvas","BOverlay","BPagination","BPlaceholder","BPlaceholderButton","BPlaceholderCard","BPlaceholderTable","BPlaceholderWrapper","BPopover","BProgress","BRow","BSpinner","BTab","BTabs","BToast","BToastOrchestrator","BTooltip","BLink","BProgressBar","BTableSimple","BTableLite","BTable","BTbody","BTd","BTh","BThead","BTfoot","BTr","BPopoverOrchestrator","componentNames","Object","freeze","keys","directivesWithExternalPath","vBColorMode","vBModal","vBPopover","vBScrollspy","vBToggle","vBTooltip","directiveNames","composablesWithExternalPath","useBreadcrumb","useColorMode","useModal","useModalController","useScrollspy","useToastController","usePopoverController","composableNames","bvKey","parseActiveImports","options","values","all","others","valuesCopy","forEach","el","merge","entries","filter","name","value","includes","map","usedComponents","Set","usedDirectives","BootstrapVueNextResolver","assign","aliases","directives","components","selectedComponents","compImports","reduce","set","Map","selectedDirectives","dirImports","directive","key","toLowerCase","startsWith","resolvers","type","resolve","destination","get","aliasDestination","val","add","from","prefixedName","__usedComponents","__usedDirectives"],"sources":["../src/types/BootstrapVueOptions.ts","../src/resolvers/index.ts"],"sourcesContent":["import type * as ExportedComponents from '../components'\nimport type * as ExportedDirectives from '../directives'\nimport type * as ExportedComposables from '../composables'\nimport type * as ComponentProps from './ComponentProps'\n\ntype AllComponentsTyped = typeof ExportedComponents\n\nexport type ComponentType = keyof AllComponentsTyped\nexport type DirectiveType = keyof typeof ExportedDirectives\nexport type ComposableType = keyof typeof ExportedComposables\n\nexport type BvnComponents = {\n  [K in ComponentType]: AllComponentsTyped[K]\n}\n\nexport const componentsWithExternalPath = {\n  BAccordion: '/components/BAccordion',\n  BAccordionItem: '/components/BAccordion',\n  BAlert: '/components/BAlert',\n  BAvatar: '/components/BAvatar',\n  BAvatarGroup: '/components/BAvatar',\n  BBadge: '/components/BBadge',\n  BBreadcrumb: '/components/BBreadcrumb',\n  BBreadcrumbItem: '/components/BBreadcrumb',\n  BButton: '/components/BButton',\n  BButtonGroup: '/components/BButton',\n  BButtonToolbar: '/components/BButton',\n  BCloseButton: '/components/BButton',\n  BCard: '/components/BCard',\n  BCardBody: '/components/BCard',\n  BCardFooter: '/components/BCard',\n  BCardGroup: '/components/BCard',\n  BCardHeader: '/components/BCard',\n  BCardImg: '/components/BCard',\n  BCardSubtitle: '/components/BCard',\n  BCardText: '/components/BCard',\n  BCardTitle: '/components/BCard',\n  BCarousel: '/components/BCarousel',\n  BCarouselSlide: '/components/BCarousel',\n  BCol: '/components/BContainer',\n  BCollapse: '/components/BCollapse',\n  BContainer: '/components/BContainer',\n  BDropdown: '/components/BDropdown',\n  BDropdownDivider: '/components/BDropdown',\n  BDropdownForm: '/components/BDropdown',\n  BDropdownGroup: '/components/BDropdown',\n  BDropdownHeader: '/components/BDropdown',\n  BDropdownItem: '/components/BDropdown',\n  BDropdownItemButton: '/components/BDropdown',\n  BDropdownText: '/components/BDropdown',\n  BForm: '/components/BForm',\n  BFormCheckbox: '/components/BFormCheckbox',\n  BFormCheckboxGroup: '/components/BFormCheckbox',\n  BFormDatalist: '/components/BForm',\n  BFormFile: '/components/BFormFile',\n  BFormFloatingLabel: '/components/BForm',\n  BFormGroup: '/components/BFormGroup',\n  BFormInput: '/components/BFormInput',\n  BFormInvalidFeedback: '/components/BForm',\n  BFormRadio: '/components/BFormRadio',\n  BFormRadioGroup: '/components/BFormRadio',\n  BFormRow: '/components/BForm',\n  BFormSelect: '/components/BFormSelect',\n  BFormSelectOption: '/components/BFormSelect',\n  BFormSelectOptionGroup: '/components/BFormSelect',\n  BFormSpinbutton: '/components/BFormSpinbutton',\n  BFormTag: '/components/BFormTags',\n  BFormTags: '/components/BFormTags',\n  BFormText: '/components/BForm',\n  BFormTextarea: '/components/BFormTextarea',\n  BFormValidFeedback: '/components/BForm',\n  BImg: '/components/BImg',\n  BInput: '/components/BFormInput',\n  BInputGroup: '/components/BInputGroup',\n  BInputGroupText: '/components/BInputGroup',\n  BListGroup: '/components/BListGroup',\n  BListGroupItem: '/components/BListGroup',\n  BModal: '/components/BModal',\n  BModalOrchestrator: '/components/BModal',\n  BNav: '/components/BNav',\n  BNavForm: '/components/BNav',\n  BNavItem: '/components/BNav',\n  BNavItemDropdown: '/components/BNav',\n  BNavText: '/components/BNav',\n  BNavbar: '/components/BNavbar',\n  BNavbarBrand: '/components/BNavbar',\n  BNavbarNav: '/components/BNavbar',\n  BNavbarToggle: '/components/BNavbar',\n  BOffcanvas: '/components/BOffcanvas',\n  BOverlay: '/components/BOverlay',\n  BPagination: '/components/BPagination',\n  BPlaceholder: '/components/BPlaceholder',\n  BPlaceholderButton: '/components/BPlaceholder',\n  BPlaceholderCard: '/components/BPlaceholder',\n  BPlaceholderTable: '/components/BPlaceholder',\n  BPlaceholderWrapper: '/components/BPlaceholder',\n  BPopover: '/components/BPopover',\n  BProgress: '/components/BProgress',\n  BRow: '/components/BContainer',\n  BSpinner: '/components/BSpinner',\n  BTab: '/components/BTabs',\n  BTabs: '/components/BTabs',\n  BToast: '/components/BToast',\n  BToastOrchestrator: '/components/BToast',\n  BTooltip: '/components/BTooltip',\n  BLink: '/components/BLink',\n  BProgressBar: '/components/BProgress',\n  BTableSimple: '/components/BTable',\n  BTableLite: '/components/BTable',\n  BTable: '/components/BTable',\n  BTbody: '/components/BTable',\n  BTd: '/components/BTable',\n  BTh: '/components/BTable',\n  BThead: '/components/BTable',\n  BTfoot: '/components/BTable',\n  BTr: '/components/BTable',\n  BPopoverOrchestrator: '/components/BPopover',\n} as const satisfies Record<ComponentType, string>\nexport const componentNames = Object.freeze(\n  Object.keys(componentsWithExternalPath) as ComponentType[]\n)\n\nexport const directivesWithExternalPath = {\n  vBColorMode: '/directives/BColorMode',\n  vBModal: '/directives/BModal',\n  vBPopover: '/directives/BPopover',\n  vBScrollspy: '/directives/BScrollspy',\n  vBToggle: '/directives/BToggle',\n  vBTooltip: '/directives/BTooltip',\n} as const satisfies Record<DirectiveType, string>\nexport const directiveNames = Object.freeze(\n  Object.keys(directivesWithExternalPath) as DirectiveType[]\n)\n\nexport const composablesWithExternalPath = {\n  useBreadcrumb: '/composables/useBreadcrumb',\n  useColorMode: '/composables/useColorMode',\n  useModal: '/composables/useModal',\n  useModalController: '/composables/useModalController',\n  useScrollspy: '/composables/useScrollspy',\n  useToastController: '/composables/useToastController',\n  usePopoverController: '/composables/usePopoverController',\n} as const satisfies Record<ComposableType, string>\nexport const composableNames = Object.freeze(\n  Object.keys(composablesWithExternalPath) as ComposableType[]\n)\n\nexport type ConfigurationOption<T extends string> = Partial<Record<T, boolean>> & {all: boolean}\nexport interface BootstrapVueOptions {\n  /**\n   * @default true\n   */\n  breadcrumb?: boolean\n  /**\n   * @default true\n   */\n  modalController?: boolean\n  /**\n   * @default true\n   */\n  modalManager?: boolean\n  /**\n   * @default true\n   */\n  rtl?:\n    | boolean\n    | {\n        /**\n         * @default false\n         */\n        rtlInitial: boolean\n        /**\n         * @default undefined\n         */\n        localeInitial: string | undefined\n      }\n  /**\n   * @default true\n   */\n  toast?: boolean\n  components?: Partial<\n    BvnComponentProps & {\n      /**\n       * @hint Globally sets all props with the matching name\n       */\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      global: Record<string, any>\n    }\n  >\n  tooltip?: boolean\n  popover?: boolean\n}\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ntype UnmappedComponentProps<BFormSelectOption = any, BTableLite = any, BTable = any> = {\n  BLink: ComponentProps.BLinkProps\n  BAccordion: ComponentProps.BAccordionProps\n  BDropdownDivider: ComponentProps.BDropdownDividerProps\n  BDropdownGroup: ComponentProps.BDropdownGroupProps\n  BDropdownItem: ComponentProps.BDropdownItemProps\n  BDropdownItemButton: ComponentProps.BDropdownItemButtonProps\n  BDropdownText: ComponentProps.BDropdownTextProps\n  BFormFloatingLabel: ComponentProps.BFormFloatingLabelProps\n  BFormRow: ComponentProps.BFormRowProps\n  BFormText: ComponentProps.BFormTextProps\n  BFormCheckbox: ComponentProps.BFormCheckboxProps\n  BFormCheckboxGroup: ComponentProps.BFormCheckboxGroupProps\n  BFormDatalist: ComponentProps.BFormDatalistProps\n  BFormFile: ComponentProps.BFormFileProps\n  BFormInput: ComponentProps.BFormInputProps\n  BFormRadio: ComponentProps.BFormRadioProps\n  BFormRadioGroup: ComponentProps.BFormRadioGroupProps\n  BFormSelect: ComponentProps.BFormSelectProps\n  BFormSelectOption: ComponentProps.BFormSelectOptionProps<BFormSelectOption>\n  BFormSelectOptionGroup: ComponentProps.BFormSelectOptionGroupProps\n  BFormSpinbutton: ComponentProps.BFormSpinbuttonProps\n  BFormTag: ComponentProps.BFormTagProps\n  BFormTags: ComponentProps.BFormTagsProps\n  BFormTextarea: ComponentProps.BFormTextareaProps\n  BInputGroup: ComponentProps.BInputGroupProps\n  BInputGroupText: ComponentProps.BInputGroupTextProps\n  BListGroup: ComponentProps.BListGroupProps\n  BListGroupItem: ComponentProps.BListGroupItemProps\n  BModalOrchestrator: ComponentProps.BModalOrchestratorProps\n  BNav: ComponentProps.BNavProps\n  BNavForm: ComponentProps.BNavFormProps\n  BNavItem: ComponentProps.BNavItemProps\n  BNavText: ComponentProps.BNavTextProps\n  BNavbar: ComponentProps.BNavbarProps\n  BNavbarBrand: ComponentProps.BNavbarBrandProps\n  BNavbarNav: ComponentProps.BNavbarNavProps\n  BNavbarToggle: ComponentProps.BNavbarToggleProps\n  BOffcanvas: ComponentProps.BOffcanvasProps\n  BOverlay: ComponentProps.BOverlayProps\n  BPagination: ComponentProps.BPaginationProps\n  BPlaceholder: ComponentProps.BPlaceholderProps\n  BPlaceholderButton: ComponentProps.BPlaceholderButtonProps\n  BPlaceholderCard: ComponentProps.BPlaceholderCardProps\n  BPlaceholderTable: ComponentProps.BPlaceholderTableProps\n  BPlaceholderWrapper: ComponentProps.BPlaceholderWrapperProps\n  BProgress: ComponentProps.BProgressProps\n  BTab: ComponentProps.BTabProps\n  BTabs: ComponentProps.BTabsProps\n  BToastOrchestrator: ComponentProps.BToastOrchestratorProps\n  BCollapse: ComponentProps.BCollapseProps\n  BContainer: ComponentProps.BContainerProps\n  BSpinner: ComponentProps.BSpinnerProps\n  BAccordionItem: ComponentProps.BAccordionItemProps\n  BAlert: ComponentProps.BAlertProps\n  BAvatar: ComponentProps.BAvatarProps\n  BAvatarGroup: ComponentProps.BAvatarGroupProps\n  BBadge: ComponentProps.BBadgeProps\n  BBreadcrumb: ComponentProps.BBreadcrumbProps\n  BBreadcrumbItem: ComponentProps.BBreadcrumbItemProps\n  BButton: ComponentProps.BButtonProps\n  BButtonGroup: ComponentProps.BButtonGroupProps\n  BButtonToolbar: ComponentProps.BButtonToolbarProps\n  BCloseButton: ComponentProps.BCloseButtonProps\n  BCard: ComponentProps.BCardProps\n  BCardBody: ComponentProps.BCardBodyProps\n  BCardGroup: ComponentProps.BCardGroupProps\n  BCardSubtitle: ComponentProps.BCardSubtitleProps\n  BCardText: ComponentProps.BCardTextProps\n  BCardTitle: ComponentProps.BCardTitleProps\n  BCarousel: ComponentProps.BCarouselProps\n  BCarouselSlide: ComponentProps.BCarouselSlideProps\n  BImg: ComponentProps.BImgProps\n  BForm: ComponentProps.BFormProps\n  BTableSimple: ComponentProps.BTableSimpleProps\n  BTableLite: ComponentProps.BTableLiteProps<BTableLite>\n  BTable: ComponentProps.BTableProps<BTable>\n  BTr: ComponentProps.BTrProps\n  BThead: ComponentProps.BTheadProps\n  BTfoot: ComponentProps.BTfootProps\n  BTd: ComponentProps.BTdProps\n  BTbody: ComponentProps.BTbodyProps\n  BTh: ComponentProps.BThProps\n  BProgressBar: ComponentProps.BProgressBarProps\n  BInputGroupAddon: ComponentProps.BInputGroupAddonProps\n  BDropdown: ComponentProps.BDropdownProps\n  BToast: ComponentProps.BToastProps\n  BPopover: ComponentProps.BPopoverProps\n  BTooltip: ComponentProps.BTooltipProps\n  BModal: ComponentProps.BModalProps\n  BCardFooter: ComponentProps.BCardHeadFootProps\n  BCardHeader: ComponentProps.BCardHeadFootProps\n  BCardImg: ComponentProps.BCardImgProps\n  BCol: ComponentProps.BColProps\n  BDropdownForm: never\n  BDropdownHeader: never\n  BFormInvalidFeedback: ComponentProps.BFormFeedbackSharedProps\n  BFormValidFeedback: ComponentProps.BFormFeedbackSharedProps\n  BFormGroup: ComponentProps.BFormGroupProps\n  BNavItemDropdown: ComponentProps.BDropdownProps\n  BRow: ComponentProps.BRowProps\n  BInput: ComponentProps.BFormInputProps\n  BTooltipOrchestrator: never\n  BPopoverOrchestrator: never\n  showHide: ComponentProps.ShowHideProps\n}\n\nexport type BvnComponentProps = {\n  [K in ComponentType]: UnmappedComponentProps[K]\n}\n\nexport type showHide = ComponentProps.ShowHideProps\n","import type {ComponentResolver} from 'unplugin-vue-components'\nimport {\n  componentNames,\n  componentsWithExternalPath,\n  type ComponentType,\n  type ConfigurationOption,\n  directiveNames,\n  directivesWithExternalPath,\n  type DirectiveType,\n} from '../types/BootstrapVueOptions'\n\nconst bvKey = 'bootstrap-vue-next'\n\nconst parseActiveImports = <Type extends string, Base extends ConfigurationOption<Type>>(\n  options: Readonly<Base>,\n  values: readonly Type[]\n): Type[] => {\n  const {all, ...others} = options\n  const valuesCopy: Partial<Record<keyof Base, boolean>> = {}\n  if (all) {\n    values.forEach((el) => {\n      valuesCopy[el] = all\n    })\n  }\n  const merge: Record<string, boolean> = {...valuesCopy, ...others}\n  return (\n    Object.entries(merge)\n      // filtering possible invalid keys\n      .filter(([name, value]) => !!value && values.includes(name as Type))\n      .map(([name]) => name as Type)\n  )\n}\n\nconst usedComponents = new Set<string>()\nconst usedDirectives = new Set<string>()\n\n/**\n * Resolver for unplugin-vue-components\n *\n * Contains two hidden properties `__usedComponents` and `__usedDirectives` (both are `Set<string>`)\n * which are used to get the list of used components and directives.. You can use this list of used components.\n * It may not be fully accurate. It can be used to get a list of stuff to trim down, like css\n * @example\n * ```ts\n * const bootstrapVueNextResolver = BootstrapVueNextResolver()\n * console.info(bootstrapVueNextResolver.__usedComponents)\n * console.info(bootstrapVueNextResolver.__usedDirectives)\n *\n * // ... blah blah blah, `plugins: [Components({resolvers: [bootstrapVueNextResolver]})]` ...\n * ```\n */\nexport const BootstrapVueNextResolver = Object.assign(\n  ({\n    aliases = {},\n    directives = true,\n    components = true,\n  }: Readonly<{\n    components?: boolean | ConfigurationOption<ComponentType>\n    directives?: boolean | ConfigurationOption<DirectiveType>\n    aliases?: Record<string, ComponentType>\n  }> = {}): ComponentResolver[] => {\n    const selectedComponents = typeof components === 'boolean' ? {all: components} : components\n    // <ComponentType, ImportPath>\n    const compImports = parseActiveImports(selectedComponents, componentNames).reduce(\n      (map, name) => {\n        map.set(name, `${bvKey}${componentsWithExternalPath[name]}`)\n        return map\n      },\n      new Map<string, string>()\n    )\n\n    const selectedDirectives = typeof directives === 'boolean' ? {all: directives} : directives\n    // <DirectiveType, ImportPath>\n    const dirImports = parseActiveImports(selectedDirectives, directiveNames).reduce(\n      (map, directive) => {\n        const key = (\n          directive.toLowerCase().startsWith('v') ? directive : `v${directive}`\n        ) as DirectiveType\n        map.set(key, `${bvKey}${directivesWithExternalPath[key]}`)\n        return map\n      },\n      new Map<string, string>()\n    )\n\n    const resolvers: ComponentResolver[] = [\n      {\n        type: 'component',\n        resolve(name) {\n          const destination = compImports.get(name)\n          const aliasDestination = compImports.get(aliases[name])\n          if (aliasDestination) {\n            const val = aliases[name]\n            usedComponents.add(val)\n            return {\n              name: val,\n              from: aliasDestination,\n            }\n          }\n\n          if (destination) {\n            usedComponents.add(name)\n            return {\n              name,\n              from: destination,\n            }\n          }\n        },\n      },\n      {\n        type: 'directive',\n        resolve(name) {\n          const prefixedName = `v${name}`\n          const destination = dirImports.get(prefixedName)\n          if (destination) {\n            usedDirectives.add(prefixedName)\n            return {\n              name: prefixedName,\n              from: destination,\n            }\n          }\n        },\n      },\n    ]\n    return resolvers\n  },\n  {\n    __usedComponents: usedComponents,\n    __usedDirectives: usedDirectives,\n  }\n)\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}