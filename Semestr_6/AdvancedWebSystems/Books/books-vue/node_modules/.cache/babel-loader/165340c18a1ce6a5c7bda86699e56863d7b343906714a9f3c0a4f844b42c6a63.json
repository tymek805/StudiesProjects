{"ast":null,"code":"import \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport \"core-js/modules/es.iterator.find.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport { defineComponent, mergeModels, useModel, useTemplateRef, computed, watch, createElementBlock, openBlock, unref, normalizeClass, Fragment, renderList, mergeProps, createBlock, renderSlot, createTextVNode, toDisplayString, resolveDynamicComponent, withCtx, nextTick } from \"vue\";\nimport { B as BvEvent } from \"./classes-IC0yVJlq.mjs\";\nimport { u as useAlignment } from \"./useAlignment-Cw-9AVid.mjs\";\nimport { u as useDefaults } from \"./useDefaults-DANje4tM.mjs\";\nimport { C as CODE_LEFT, a as CODE_UP, b as CODE_RIGHT, c as CODE_DOWN } from \"./constants-COk0ugyL.mjs\";\nimport { s as stopEvent } from \"./event-a_bi5ysw.mjs\";\nimport { g as getActiveElement } from \"./dom-BK2w00Ec.mjs\";\nimport { u as useToNumber } from \"./index-CLgoGrAV.mjs\";\nconst _hoisted_1 = [\"aria-disabled\", \"aria-label\"];\nconst DEFAULT_PER_PAGE = 20;\nconst DEFAULT_TOTAL_ROWS = 0;\nconst _sfc_main = /* @__PURE__ */defineComponent({\n  __name: \"BPagination\",\n  props: /* @__PURE__ */mergeModels({\n    align: {\n      default: \"start\"\n    },\n    ariaControls: {\n      default: void 0\n    },\n    ariaLabel: {\n      default: \"Pagination\"\n    },\n    disabled: {\n      type: Boolean,\n      default: false\n    },\n    ellipsisClass: {\n      default: void 0\n    },\n    ellipsisText: {\n      default: \"…\"\n    },\n    firstClass: {\n      default: void 0\n    },\n    firstNumber: {\n      type: Boolean,\n      default: false\n    },\n    firstText: {\n      default: \"«\"\n    },\n    noEllipsis: {\n      type: Boolean,\n      default: false\n    },\n    noGotoEndButtons: {\n      type: Boolean,\n      default: false\n    },\n    labelFirstPage: {\n      default: \"Go to first page\"\n    },\n    labelLastPage: {\n      default: \"Go to last page\"\n    },\n    labelNextPage: {\n      default: \"Go to next page\"\n    },\n    labelPage: {\n      default: \"Go to page\"\n    },\n    labelPrevPage: {\n      default: \"Go to previous page\"\n    },\n    lastClass: {\n      default: void 0\n    },\n    lastNumber: {\n      type: Boolean,\n      default: false\n    },\n    lastText: {\n      default: \"»\"\n    },\n    limit: {\n      default: 5\n    },\n    nextClass: {\n      default: void 0\n    },\n    nextText: {\n      default: \"›\"\n    },\n    pageClass: {\n      default: void 0\n    },\n    perPage: {\n      default: DEFAULT_PER_PAGE\n    },\n    pills: {\n      type: Boolean,\n      default: false\n    },\n    prevClass: {\n      default: void 0\n    },\n    prevText: {\n      default: \"‹\"\n    },\n    size: {\n      default: void 0\n    },\n    totalRows: {\n      default: DEFAULT_TOTAL_ROWS\n    }\n  }, {\n    \"modelValue\": {\n      default: 1\n    },\n    \"modelModifiers\": {}\n  }),\n  emits: /* @__PURE__ */mergeModels([\"page-click\"], [\"update:modelValue\"]),\n  setup(__props, {\n    emit: __emit\n  }) {\n    const ELLIPSIS_THRESHOLD = 3;\n    const FIRST_BUTTON = -1;\n    const PREV_BUTTON = -2;\n    const NEXT_BUTTON = -3;\n    const LAST_BUTTON = -4;\n    const FIRST_ELLIPSIS = -5;\n    const LAST_ELLIPSIS = -6;\n    const _props = __props;\n    const props = useDefaults(_props, \"BPagination\");\n    const emit = __emit;\n    const modelValue = useModel(__props, \"modelValue\");\n    const pageElements = useTemplateRef(\"_pageElements\");\n    const limitNumber = useToNumber(() => props.limit, {\n      nanToZero: true,\n      method: \"parseInt\"\n    });\n    const perPageNumber = useToNumber(() => props.perPage, {\n      nanToZero: true,\n      method: \"parseInt\"\n    });\n    const totalRowsNumber = useToNumber(() => props.totalRows, {\n      nanToZero: true,\n      method: \"parseInt\"\n    });\n    const modelValueNumber = useToNumber(modelValue, {\n      nanToZero: true,\n      method: \"parseInt\"\n    });\n    const perPageSanitized = computed(() => Math.max(perPageNumber.value || DEFAULT_PER_PAGE, 1));\n    const totalRowsSanitized = computed(() => Math.max(totalRowsNumber.value || DEFAULT_TOTAL_ROWS, 0));\n    const numberOfPages = computed(() => Math.ceil(totalRowsSanitized.value / perPageSanitized.value));\n    const computedFill = computed(() => props.align === \"fill\");\n    const justifyAlign = computed(() => props.align === \"fill\" ? \"start\" : props.align);\n    const alignment = useAlignment(justifyAlign);\n    const isActivePage = pageNumber => pageNumber === computedModelValue.value;\n    const getTabIndex = num => props.disabled ? null : isActivePage(num) ? \"0\" : \"-1\";\n    const checkDisabled = num => props.disabled || isActivePage(num) || computedModelValue.value < 1 ||\n    // Check if the number is out of bounds\n    num < 1 || num > numberOfPages.value;\n    const firstDisabled = computed(() => checkDisabled(1));\n    const prevDisabled = computed(() => checkDisabled(computedModelValue.value - 1));\n    const lastDisabled = computed(() => checkDisabled(numberOfPages.value));\n    const nextDisabled = computed(() => checkDisabled(computedModelValue.value + 1));\n    const getBaseButtonProps = ({\n      page,\n      classVal,\n      disabled,\n      slotName,\n      textValue,\n      tabIndex,\n      label,\n      position,\n      isActive,\n      role,\n      hidden,\n      isSmHidden\n    }) => ({\n      li: {\n        \"class\": [\"page-item\", {\n          \"active\": isActive,\n          disabled,\n          \"bv-d-sm-down-none\": isSmHidden,\n          \"flex-fill\": computedFill.value,\n          \"d-flex\": computedFill.value && !disabled\n        }, classVal],\n        role,\n        \"aria-hidden\": hidden\n      },\n      button: {\n        \"is\": disabled ? \"span\" : \"button\",\n        \"class\": [\"page-link\", \"text-center\", {\n          \"flex-grow-1\": !disabled && computedFill.value\n        }],\n        \"aria-label\": label,\n        \"aria-controls\": props.ariaControls || void 0,\n        \"aria-disabled\": disabled ? true : void 0,\n        \"aria-posinset\": position,\n        \"aria-setsize\": position ? numberOfPages.value : void 0,\n        \"role\": \"menuitem\",\n        \"type\": disabled ? void 0 : \"button\",\n        \"tabindex\": disabled ? void 0 : tabIndex\n      },\n      text: {\n        name: slotName,\n        active: isActive,\n        value: textValue ?? page,\n        page,\n        disabled,\n        index: page - 1,\n        content: textValue ? void 0 : page\n      },\n      clickHandler: e => pageClick(e, page)\n    });\n    const getButtonProps = ({\n      page,\n      classVal,\n      disabled,\n      slotName,\n      textValue,\n      label\n    }) => getBaseButtonProps({\n      page,\n      classVal,\n      disabled,\n      slotName,\n      textValue,\n      label,\n      tabIndex: \"-1\"\n    });\n    const getPageButtonProps = (page, isSmHidden) => getBaseButtonProps({\n      page,\n      disabled: props.disabled,\n      classVal: props.pageClass,\n      slotName: \"page\",\n      label: props.labelPage ? `${props.labelPage} ${page}` : void 0,\n      tabIndex: getTabIndex(page) ?? void 0,\n      position: page,\n      isActive: isActivePage(page),\n      isSmHidden\n    });\n    const firstButtonProps = computed(() => getButtonProps({\n      page: 1,\n      disabled: firstDisabled.value,\n      classVal: props.firstClass,\n      slotName: \"first-text\",\n      textValue: props.firstText,\n      label: props.labelFirstPage\n    }));\n    const prevButtonProps = computed(() => getButtonProps({\n      page: Math.max(computedModelValue.value - 1, 1),\n      disabled: prevDisabled.value,\n      classVal: props.prevClass,\n      slotName: \"prev-text\",\n      textValue: props.prevText,\n      label: props.labelPrevPage\n    }));\n    const nextButtonProps = computed(() => getButtonProps({\n      page: Math.min(computedModelValue.value + 1, numberOfPages.value),\n      disabled: nextDisabled.value,\n      classVal: props.nextClass,\n      slotName: \"next-text\",\n      textValue: props.nextText,\n      label: props.labelNextPage\n    }));\n    const lastButtonProps = computed(() => getButtonProps({\n      page: numberOfPages.value,\n      disabled: lastDisabled.value,\n      classVal: props.lastClass,\n      slotName: \"last-text\",\n      textValue: props.lastText,\n      label: props.labelLastPage\n    }));\n    const ellipsisProps = computed(() => ({\n      li: {\n        class: [\"page-item\", \"disabled\", \"text-center\", \"bv-d-sm-down-none\", computedFill.value ? \"flex-fill\" : \"\", props.ellipsisClass],\n        role: \"separator\"\n      },\n      span: {\n        class: [\"page-link\"]\n      }\n    }));\n    const computedWrapperClasses = computed(() => [alignment.value, {\n      [`pagination-${props.size}`]: props.size !== void 0,\n      \"b-pagination-pills\": props.pills\n    }]);\n    const pagination = computed(() => ({\n      pageSize: perPageSanitized.value,\n      totalRows: totalRowsNumber.value,\n      numberOfPages: numberOfPages.value\n    }));\n    const pageClick = (event, pageNumber) => {\n      if (pageNumber === computedModelValue.value) return;\n      const clickEvent = new BvEvent(\"page-click\", {\n        cancelable: true,\n        target: event.target\n      });\n      emit(\"page-click\", clickEvent, pageNumber);\n      if (clickEvent.defaultPrevented) return;\n      modelValue.value = pageNumber;\n    };\n    const isDisabled = el => {\n      const isElement = !!(el && el.nodeType === Node.ELEMENT_NODE);\n      const hasAttr = isElement ? el.hasAttribute(\"disabled\") : null;\n      const hasClass = isElement && el.classList ? el.classList.contains(\"disabled\") : false;\n      return !isElement || el.disabled || hasAttr || hasClass;\n    };\n    const getButtons = () => {\n      var _a;\n      return ((_a = pageElements.value) == null ? void 0 : _a.map(page => page.children[0]).filter(btn => {\n        if (btn.getAttribute(\"display\") === \"none\") {\n          return false;\n        }\n        const bcr = btn.getBoundingClientRect();\n        return !!(bcr && bcr.height > 0 && bcr.width > 0);\n      })) ?? [];\n    };\n    const focusFirst = () => {\n      nextTick(() => {\n        const btn = getButtons().find(el => !isDisabled(el));\n        btn == null ? void 0 : btn.focus();\n      });\n    };\n    const focusPrev = () => {\n      nextTick(() => {\n        var _a;\n        const buttons = getButtons();\n        const index = buttons.indexOf(getActiveElement());\n        if (index > 0 && !isDisabled(buttons[index - 1])) {\n          (_a = buttons[index - 1]) == null ? void 0 : _a.focus();\n        }\n      });\n    };\n    const focusLast = () => {\n      nextTick(() => {\n        const btn = getButtons().reverse().find(el => !isDisabled(el));\n        btn == null ? void 0 : btn.focus();\n      });\n    };\n    const focusNext = () => {\n      nextTick(() => {\n        var _a;\n        const buttons = getButtons();\n        const index = buttons.indexOf(getActiveElement());\n        if (index < buttons.length - 1 && !isDisabled(buttons[index + 1])) {\n          (_a = buttons[index + 1]) == null ? void 0 : _a.focus();\n        }\n      });\n    };\n    const handleKeyNav = event => {\n      const {\n        code,\n        shiftKey\n      } = event;\n      if (code === CODE_LEFT || code === CODE_UP) {\n        stopEvent(event);\n        if (shiftKey) {\n          focusFirst();\n        } else {\n          focusPrev();\n        }\n      } else if (code === CODE_RIGHT || code === CODE_DOWN) {\n        stopEvent(event);\n        if (shiftKey) {\n          focusLast();\n        } else {\n          focusNext();\n        }\n      }\n    };\n    const computedModelValue = computed(() => {\n      const page = modelValueNumber.value || 1;\n      return page > numberOfPages.value ? numberOfPages.value : page < 1 ? 1 : page;\n    });\n    watch(pagination, (oldValue, newValue) => {\n      if (newValue.pageSize !== oldValue.pageSize && newValue.totalRows === oldValue.totalRows) {\n        modelValue.value = 1;\n      }\n    });\n    const noFirstButton = computed(() => props.noGotoEndButtons && !props.firstNumber ? 1 : 0);\n    const noLastButton = computed(() => props.noGotoEndButtons && !props.lastNumber ? 1 : 0);\n    const showFirstButton = computed(() => noFirstButton.value ? 0 : 1);\n    const showLastButton = computed(() => noLastButton.value ? 0 : 1);\n    const firstPage = computed(() => props.firstNumber ? 1 : 0);\n    const lastPage = computed(() => props.lastNumber ? 1 : 0);\n    const halfLimit = computed(() => Math.floor(limitNumber.value / 2));\n    const pages = computed(() => {\n      const {\n        value\n      } = computedModelValue;\n      const els = elements.value.map(p => {\n        switch (p) {\n          case FIRST_BUTTON:\n            return {\n              id: p,\n              ...firstButtonProps.value\n            };\n          case PREV_BUTTON:\n            return {\n              id: p,\n              ...prevButtonProps.value\n            };\n          case NEXT_BUTTON:\n            return {\n              id: p,\n              ...nextButtonProps.value\n            };\n          case LAST_BUTTON:\n            return {\n              id: p,\n              ...lastButtonProps.value\n            };\n          case FIRST_ELLIPSIS:\n          case LAST_ELLIPSIS:\n            return {\n              id: p,\n              ...ellipsisProps.value\n            };\n          default:\n            return {\n              id: p,\n              ...getPageButtonProps(p)\n            };\n        }\n      });\n      if (numberOfPages.value > 3) {\n        if (value > numberOfPages.value - halfLimit.value - lastPage.value) {\n          const idx = 2 + showFirstButton.value;\n          els[idx] = {\n            id: els[idx].id,\n            ...getPageButtonProps(els[idx].id, true)\n          };\n        }\n        if (value <= halfLimit.value + firstPage.value) {\n          const idx = els.length - (3 + showLastButton.value);\n          els[idx] = {\n            id: els[idx].id,\n            ...getPageButtonProps(els[idx].id, true)\n          };\n        }\n      }\n      return els;\n    });\n    const elements = computed(() => {\n      const pages2 = numberOfPages.value;\n      const {\n        value\n      } = computedModelValue;\n      const limit = limitNumber.value;\n      const noEllipsis = props.noEllipsis || limit <= ELLIPSIS_THRESHOLD;\n      if (pages2 < limit + firstPage.value + lastPage.value) {\n        return [!firstPage.value && !noFirstButton.value ? FIRST_BUTTON : null, PREV_BUTTON, ...Array.from({\n          length: pages2\n        }, (_, index) => index + 1), NEXT_BUTTON, !lastPage.value && !noLastButton.value ? LAST_BUTTON : null].filter(x => x !== null);\n      }\n      const buttons = Array.from({\n        length: limit + 4 - (noFirstButton.value + noLastButton.value)\n      });\n      if (!noFirstButton.value) {\n        if (!firstPage.value) {\n          buttons[0] = FIRST_BUTTON;\n          buttons[1] = PREV_BUTTON;\n        } else {\n          buttons[0] = PREV_BUTTON;\n          buttons[1] = 1;\n        }\n      } else {\n        buttons[0] = PREV_BUTTON;\n      }\n      if (!noLastButton.value) {\n        if (!lastPage.value) {\n          buttons[buttons.length - 1] = LAST_BUTTON;\n          buttons[buttons.length - 2] = NEXT_BUTTON;\n        } else {\n          buttons[buttons.length - 1] = NEXT_BUTTON;\n          buttons[buttons.length - 2] = pages2;\n        }\n      } else {\n        buttons[buttons.length - 1] = NEXT_BUTTON;\n      }\n      if (value <= halfLimit.value + firstPage.value) {\n        for (let index = 1; index <= limit; index++) {\n          buttons[index + 1 - noFirstButton.value] = index + firstPage.value;\n        }\n        if (!noEllipsis) {\n          buttons[buttons.length - (2 + showLastButton.value)] = LAST_ELLIPSIS;\n        }\n      }\n      if (value > pages2 - halfLimit.value - lastPage.value) {\n        const start = pages2 - (limit - 1) - lastPage.value;\n        for (let index = 0; index < limit; index++) {\n          buttons[index + 2 - noFirstButton.value] = start + index;\n        }\n        if (!noEllipsis) {\n          buttons[1 + showFirstButton.value] = FIRST_ELLIPSIS;\n        }\n      }\n      if (!buttons[2]) {\n        const start = value - Math.floor(limit / 2);\n        for (let index = 0; index < limit; index++) {\n          buttons[index + 2 - noFirstButton.value] = start + index;\n        }\n        if (!noEllipsis) {\n          buttons[1 + showFirstButton.value] = FIRST_ELLIPSIS;\n          buttons[buttons.length - (2 + showLastButton.value)] = LAST_ELLIPSIS;\n        }\n      }\n      return buttons.filter(x => x !== null);\n    });\n    return (_ctx, _cache) => {\n      return openBlock(), createElementBlock(\"ul\", {\n        class: normalizeClass([\"pagination\", computedWrapperClasses.value]),\n        role: \"menubar\",\n        \"aria-disabled\": unref(props).disabled,\n        \"aria-label\": unref(props).ariaLabel || void 0,\n        onKeydown: handleKeyNav\n      }, [(openBlock(true), createElementBlock(Fragment, null, renderList(pages.value, page => {\n        return openBlock(), createElementBlock(\"li\", mergeProps({\n          key: `page-${page.id}`,\n          ref_for: true\n        }, page.li, {\n          ref_for: true,\n          ref: \"_pageElements\"\n        }), [page.id === FIRST_ELLIPSIS || page.id === LAST_ELLIPSIS ? (openBlock(), createElementBlock(\"span\", mergeProps({\n          key: 0,\n          ref_for: true\n        }, ellipsisProps.value.span), [renderSlot(_ctx.$slots, \"ellipsis-text\", {}, () => [createTextVNode(toDisplayString(unref(props).ellipsisText || \"...\"), 1)])], 16)) : (openBlock(), createBlock(resolveDynamicComponent(page.button.is), mergeProps({\n          key: 1,\n          ref_for: true\n        }, page.button, {\n          onClick: page.clickHandler\n        }), {\n          default: withCtx(() => [renderSlot(_ctx.$slots, page.text.name, {\n            disabled: page.text.disabled,\n            page: page.text.page,\n            index: page.text.index,\n            active: page.text.active,\n            content: page.text.value\n          }, () => [createTextVNode(toDisplayString(page.text.value), 1)])]),\n          _: 2\n        }, 1040, [\"onClick\"]))], 16);\n      }), 128))], 42, _hoisted_1);\n    };\n  }\n});\nexport { _sfc_main as _ };","map":{"version":3,"names":["DEFAULT_PER_PAGE","DEFAULT_TOTAL_ROWS","ELLIPSIS_THRESHOLD","FIRST_BUTTON","PREV_BUTTON","NEXT_BUTTON","LAST_BUTTON","FIRST_ELLIPSIS","LAST_ELLIPSIS","_props","__props","props","useDefaults","emit","__emit","modelValue","useModel","pageElements","useTemplateRef","limitNumber","useToNumber","limit","nanToZero","method","perPageNumber","perPage","totalRowsNumber","totalRows","modelValueNumber","perPageSanitized","computed","Math","max","value","totalRowsSanitized","numberOfPages","ceil","computedFill","align","justifyAlign","alignment","useAlignment","isActivePage","pageNumber","computedModelValue","getTabIndex","num","disabled","checkDisabled","firstDisabled","prevDisabled","lastDisabled","nextDisabled","getBaseButtonProps","page","classVal","slotName","textValue","tabIndex","label","position","isActive","role","hidden","isSmHidden","li","button","ariaControls","text","name","active","index","content","clickHandler","e","pageClick","getButtonProps","getPageButtonProps","pageClass","labelPage","firstButtonProps","firstClass","firstText","labelFirstPage","prevButtonProps","prevClass","prevText","labelPrevPage","nextButtonProps","min","nextClass","nextText","labelNextPage","lastButtonProps","lastClass","lastText","labelLastPage","ellipsisProps","class","ellipsisClass","span","computedWrapperClasses","size","pills","pagination","pageSize","event","clickEvent","BvEvent","cancelable","target","defaultPrevented","isDisabled","el","isElement","nodeType","Node","ELEMENT_NODE","hasAttr","hasAttribute","hasClass","classList","contains","getButtons","_a","map","children","filter","btn","getAttribute","bcr","getBoundingClientRect","height","width","focusFirst","nextTick","find","focus","focusPrev","buttons","indexOf","getActiveElement","focusLast","reverse","focusNext","length","handleKeyNav","code","shiftKey","CODE_LEFT","CODE_UP","stopEvent","CODE_RIGHT","CODE_DOWN","watch","oldValue","newValue","noFirstButton","noGotoEndButtons","firstNumber","noLastButton","lastNumber","showFirstButton","showLastButton","firstPage","lastPage","halfLimit","floor","pages","els","elements","p","id","idx","pages2","noEllipsis","Array","from","_","x","start"],"sources":["../src/components/BPagination/BPagination.vue"],"sourcesContent":["<template>\n  <ul\n    class=\"pagination\"\n    :class=\"computedWrapperClasses\"\n    role=\"menubar\"\n    :aria-disabled=\"props.disabled\"\n    :aria-label=\"props.ariaLabel || undefined\"\n    @keydown=\"handleKeyNav\"\n  >\n    <li v-for=\"page in pages\" :key=\"`page-${page.id}`\" v-bind=\"page.li\" ref=\"_pageElements\">\n      <span\n        v-if=\"page.id === FIRST_ELLIPSIS || page.id === LAST_ELLIPSIS\"\n        v-bind=\"ellipsisProps.span\"\n      >\n        <slot name=\"ellipsis-text\">\n          {{ props.ellipsisText || '...' }}\n        </slot>\n      </span>\n      <component v-bind=\"page.button\" :is=\"page.button.is\" v-else @click=\"page.clickHandler\">\n        <slot\n          :name=\"page.text.name\"\n          :disabled=\"page.text.disabled\"\n          :page=\"page.text.page\"\n          :index=\"page.text.index\"\n          :active=\"page.text.active\"\n          :content=\"page.text.value\"\n        >\n          {{ page.text.value }}\n        </slot>\n      </component>\n    </li>\n  </ul>\n</template>\n\n<script setup lang=\"ts\">\nimport {BvEvent} from '../../utils'\nimport {computed, nextTick, useTemplateRef, watch} from 'vue'\nimport type {BPaginationProps} from '../../types/ComponentProps'\nimport {useAlignment} from '../../composables/useAlignment'\nimport {useToNumber} from '@vueuse/core'\nimport {useDefaults} from '../../composables/useDefaults'\nimport type {ClassValue} from '../../types/AnyValuedAttributes'\nimport {CODE_DOWN, CODE_LEFT, CODE_RIGHT, CODE_UP} from '../../utils/constants'\nimport {stopEvent} from '../../utils/event'\nimport {getActiveElement} from '../../utils/dom'\n\n// Threshold of limit size when we start/stop showing ellipsis\nconst ELLIPSIS_THRESHOLD = 3\n\nconst FIRST_BUTTON = -1\nconst PREV_BUTTON = -2\nconst NEXT_BUTTON = -3\nconst LAST_BUTTON = -4\nconst FIRST_ELLIPSIS = -5\nconst LAST_ELLIPSIS = -6\n\n// This is necessary because type inference isn't succeeding for the pages computed\ninterface PageButton {\n  id: number\n  li: Record<string, unknown>\n  button: Record<string, unknown>\n  text: Record<string, unknown>\n  clickHandler: (e: Readonly<MouseEvent>) => void\n}\n\nconst _props = withDefaults(defineProps<Omit<BPaginationProps, 'modelValue'>>(), {\n  align: 'start',\n  ariaControls: undefined,\n  ariaLabel: 'Pagination',\n  disabled: false,\n  ellipsisClass: undefined,\n  ellipsisText: '\\u2026',\n  firstClass: undefined,\n  firstNumber: false,\n  firstText: '\\u00AB',\n  noEllipsis: false,\n  noGotoEndButtons: false,\n  labelFirstPage: 'Go to first page',\n  labelLastPage: 'Go to last page',\n  labelNextPage: 'Go to next page',\n  labelPage: 'Go to page',\n  labelPrevPage: 'Go to previous page',\n  lastClass: undefined,\n  lastNumber: false,\n  lastText: '\\u00BB',\n  limit: 5,\n  nextClass: undefined,\n  nextText: '\\u203A',\n  pageClass: undefined,\n  perPage: DEFAULT_PER_PAGE,\n  pills: false,\n  prevClass: undefined,\n  prevText: '\\u2039',\n  size: undefined,\n  totalRows: DEFAULT_TOTAL_ROWS,\n})\nconst props = useDefaults(_props, 'BPagination')\n\nconst emit = defineEmits<{\n  'page-click': [event: BvEvent, pageNumber: number]\n}>()\n\nconst modelValue = defineModel<Exclude<BPaginationProps['modelValue'], undefined>>({\n  default: 1,\n})\n\nconst pageElements = useTemplateRef<HTMLLIElement[]>('_pageElements')\n\nconst limitNumber = useToNumber(() => props.limit, {nanToZero: true, method: 'parseInt'})\nconst perPageNumber = useToNumber(() => props.perPage, {nanToZero: true, method: 'parseInt'})\nconst totalRowsNumber = useToNumber(() => props.totalRows, {nanToZero: true, method: 'parseInt'})\nconst modelValueNumber = useToNumber(modelValue, {nanToZero: true, method: 'parseInt'})\n\nconst perPageSanitized = computed(() => Math.max(perPageNumber.value || DEFAULT_PER_PAGE, 1))\nconst totalRowsSanitized = computed(() => Math.max(totalRowsNumber.value || DEFAULT_TOTAL_ROWS, 0))\n// Use Active to on page-item to denote active tab\nconst numberOfPages = computed(() => Math.ceil(totalRowsSanitized.value / perPageSanitized.value))\nconst computedFill = computed(() => props.align === 'fill')\n// This doesn't use the computedFill util because TS cannot infer that it would never be 'fill'\nconst justifyAlign = computed(() => (props.align === 'fill' ? 'start' : props.align))\n\nconst alignment = useAlignment(justifyAlign)\n\nconst isActivePage = (pageNumber: number) => pageNumber === computedModelValue.value\nconst getTabIndex = (num: number) => (props.disabled ? null : isActivePage(num) ? '0' : '-1')\n\nconst checkDisabled = (num: number) =>\n  props.disabled ||\n  isActivePage(num) ||\n  computedModelValue.value < 1 ||\n  // Check if the number is out of bounds\n  num < 1 ||\n  num > numberOfPages.value\n\nconst firstDisabled = computed(() => checkDisabled(1))\nconst prevDisabled = computed(() => checkDisabled(computedModelValue.value - 1))\nconst lastDisabled = computed(() => checkDisabled(numberOfPages.value))\nconst nextDisabled = computed(() => checkDisabled(computedModelValue.value + 1))\n\nconst getBaseButtonProps = ({\n  page,\n  classVal,\n  disabled,\n  slotName,\n  textValue,\n  tabIndex,\n  label,\n  position,\n  isActive,\n  role,\n  hidden,\n  isSmHidden,\n}: {\n  page: number\n  disabled: boolean\n  classVal: ClassValue\n  slotName: string\n  textValue?: string\n  tabIndex?: string\n  label?: string\n  position?: number\n  isActive?: boolean\n  role?: string\n  hidden?: boolean\n  isSmHidden?: boolean\n}) => ({\n  li: {\n    'class': [\n      'page-item',\n      {\n        'active': isActive,\n        disabled,\n        'bv-d-sm-down-none': isSmHidden,\n        'flex-fill': computedFill.value,\n        'd-flex': computedFill.value && !disabled,\n      },\n      classVal,\n    ],\n    role,\n    'aria-hidden': hidden,\n  },\n  button: {\n    'is': disabled ? 'span' : 'button',\n    'class': ['page-link', 'text-center', {'flex-grow-1': !disabled && computedFill.value}],\n    'aria-label': label,\n    'aria-controls': props.ariaControls || undefined,\n    'aria-disabled': disabled ? true : undefined,\n    'aria-posinset': position,\n    'aria-setsize': position ? numberOfPages.value : undefined,\n    'role': 'menuitem',\n    'type': disabled ? undefined : 'button',\n    'tabindex': disabled ? undefined : tabIndex,\n  },\n  text: {\n    name: slotName,\n    active: isActive,\n    value: textValue ?? page,\n    page,\n    disabled,\n    index: page - 1,\n    content: textValue ? undefined : page,\n  },\n  clickHandler: (e: Readonly<MouseEvent>) => pageClick(e, page),\n})\n\nconst getButtonProps = ({\n  page,\n  classVal,\n  disabled,\n  slotName,\n  textValue,\n  label,\n}: {\n  page: number\n  disabled: boolean\n  classVal: ClassValue\n  slotName: string\n  textValue?: string\n  label: string\n}) => getBaseButtonProps({page, classVal, disabled, slotName, textValue, label, tabIndex: '-1'})\n\nconst getPageButtonProps = (page: number, isSmHidden?: boolean) =>\n  getBaseButtonProps({\n    page,\n    disabled: props.disabled,\n    classVal: props.pageClass,\n    slotName: 'page',\n    label: props.labelPage ? `${props.labelPage} ${page}` : undefined,\n    tabIndex: getTabIndex(page) ?? undefined,\n    position: page,\n    isActive: isActivePage(page),\n    isSmHidden,\n  })\n\nconst firstButtonProps = computed(() =>\n  getButtonProps({\n    page: 1,\n    disabled: firstDisabled.value,\n    classVal: props.firstClass,\n    slotName: 'first-text',\n    textValue: props.firstText,\n    label: props.labelFirstPage,\n  })\n)\nconst prevButtonProps = computed(() =>\n  getButtonProps({\n    page: Math.max(computedModelValue.value - 1, 1),\n    disabled: prevDisabled.value,\n    classVal: props.prevClass,\n    slotName: 'prev-text',\n    textValue: props.prevText,\n    label: props.labelPrevPage,\n  })\n)\nconst nextButtonProps = computed(() =>\n  getButtonProps({\n    page: Math.min(computedModelValue.value + 1, numberOfPages.value),\n    disabled: nextDisabled.value,\n    classVal: props.nextClass,\n    slotName: 'next-text',\n    textValue: props.nextText,\n    label: props.labelNextPage,\n  })\n)\nconst lastButtonProps = computed(() =>\n  getButtonProps({\n    page: numberOfPages.value,\n    disabled: lastDisabled.value,\n    classVal: props.lastClass,\n    slotName: 'last-text',\n    textValue: props.lastText,\n    label: props.labelLastPage,\n  })\n)\n\nconst ellipsisProps = computed(() => ({\n  li: {\n    class: [\n      'page-item',\n      'disabled',\n      'text-center',\n      'bv-d-sm-down-none',\n      computedFill.value ? 'flex-fill' : '',\n      props.ellipsisClass,\n    ],\n    role: 'separator',\n  },\n  span: {\n    class: ['page-link'],\n  },\n}))\n\nconst computedWrapperClasses = computed(() => [\n  alignment.value,\n  {\n    [`pagination-${props.size}`]: props.size !== undefined,\n    'b-pagination-pills': props.pills,\n  },\n])\n\nconst pagination = computed(() => ({\n  pageSize: perPageSanitized.value,\n  totalRows: totalRowsNumber.value,\n  numberOfPages: numberOfPages.value,\n}))\n\nconst pageClick = (event: Readonly<MouseEvent>, pageNumber: number) => {\n  if (pageNumber === computedModelValue.value) return\n\n  const clickEvent = new BvEvent('page-click', {\n    cancelable: true,\n    target: event.target,\n  })\n  emit('page-click', clickEvent, pageNumber)\n\n  if (clickEvent.defaultPrevented) return\n\n  modelValue.value = pageNumber\n\n  //    nextTick(() => {\n  //  if (isVisible(target) && un_element.contains(target)) {\n  //  attemptFocus(target)\n  //} else {\n  //this.focusCurrent()\n  //}\n  // })\n}\n\nconst isDisabled = (el: HTMLButtonElement) => {\n  const isElement = !!(el && el.nodeType === Node.ELEMENT_NODE)\n  const hasAttr = isElement ? el.hasAttribute('disabled') : null\n  const hasClass = isElement && el.classList ? el.classList.contains('disabled') : false\n\n  return !isElement || el.disabled || hasAttr || hasClass\n}\n\nconst getButtons = () =>\n  pageElements.value\n    ?.map((page) => page.children[0] as HTMLButtonElement)\n    .filter((btn) => {\n      if (btn.getAttribute('display') === 'none') {\n        return false\n      }\n\n      const bcr = btn.getBoundingClientRect()\n\n      return !!(bcr && bcr.height > 0 && bcr.width > 0)\n    }) ?? []\n\nconst focusFirst = () => {\n  nextTick(() => {\n    const btn = getButtons().find((el) => !isDisabled(el))\n    btn?.focus()\n  })\n}\n\nconst focusPrev = () => {\n  nextTick(() => {\n    const buttons = getButtons()\n    const index = buttons.indexOf(getActiveElement() as HTMLButtonElement)\n\n    if (index > 0 && !isDisabled(buttons[index - 1])) {\n      buttons[index - 1]?.focus()\n    }\n  })\n}\n\nconst focusLast = () => {\n  nextTick(() => {\n    const btn = getButtons()\n      .reverse()\n      .find((el) => !isDisabled(el))\n    btn?.focus()\n  })\n}\n\nconst focusNext = () => {\n  nextTick(() => {\n    const buttons = getButtons()\n    const index = buttons.indexOf(getActiveElement() as HTMLButtonElement)\n\n    if (index < buttons.length - 1 && !isDisabled(buttons[index + 1])) {\n      buttons[index + 1]?.focus()\n    }\n  })\n}\n\nconst handleKeyNav = (event: KeyboardEvent) => {\n  const {code, shiftKey} = event\n\n  if (code === CODE_LEFT || code === CODE_UP) {\n    stopEvent(event)\n    if (shiftKey) {\n      focusFirst()\n    } else {\n      focusPrev()\n    }\n  } else if (code === CODE_RIGHT || code === CODE_DOWN) {\n    stopEvent(event)\n    if (shiftKey) {\n      focusLast()\n    } else {\n      focusNext()\n    }\n  }\n}\n\nconst computedModelValue = computed(() => {\n  const page = modelValueNumber.value || 1\n  return page > numberOfPages.value ? numberOfPages.value : page < 1 ? 1 : page\n})\n\nwatch(pagination, (oldValue, newValue) => {\n  if (newValue.pageSize !== oldValue.pageSize && newValue.totalRows === oldValue.totalRows) {\n    // If the page size changes, reset to page 1\n    modelValue.value = 1\n  }\n})\n\nconst noFirstButton = computed(() => (props.noGotoEndButtons && !props.firstNumber ? 1 : 0))\nconst noLastButton = computed(() => (props.noGotoEndButtons && !props.lastNumber ? 1 : 0))\nconst showFirstButton = computed(() => (noFirstButton.value ? 0 : 1))\nconst showLastButton = computed(() => (noLastButton.value ? 0 : 1))\nconst firstPage = computed(() => (props.firstNumber ? 1 : 0))\nconst lastPage = computed(() => (props.lastNumber ? 1 : 0))\nconst halfLimit = computed(() => Math.floor(limitNumber.value / 2))\n\nconst pages = computed(() => {\n  const {value} = computedModelValue\n\n  const els = elements.value.map((p) => {\n    switch (p) {\n      case FIRST_BUTTON:\n        return {id: p, ...firstButtonProps.value}\n      case PREV_BUTTON:\n        return {id: p, ...prevButtonProps.value}\n      case NEXT_BUTTON:\n        return {id: p, ...nextButtonProps.value}\n      case LAST_BUTTON:\n        return {id: p, ...lastButtonProps.value}\n      case FIRST_ELLIPSIS:\n      case LAST_ELLIPSIS:\n        return {id: p, ...ellipsisProps.value}\n      default:\n        return {id: p, ...getPageButtonProps(p)}\n    }\n  })\n\n  if (numberOfPages.value > 3) {\n    if (value > numberOfPages.value - halfLimit.value - lastPage.value) {\n      const idx = 2 + showFirstButton.value\n      els[idx] = {id: els[idx].id, ...getPageButtonProps(els[idx].id, true)}\n    }\n\n    if (value <= halfLimit.value + firstPage.value) {\n      const idx = els.length - (3 + showLastButton.value)\n      els[idx] = {id: els[idx].id, ...getPageButtonProps(els[idx].id, true)}\n    }\n  }\n\n  return els as PageButton[]\n})\n\nconst elements = computed(() => {\n  // The idea here is to create an array of all the buttons on the page control.\n  // This way we can keep the invariants in one place and the template code just\n  // iterates over the array.\n\n  const pages = numberOfPages.value\n  const {value} = computedModelValue\n  const limit = limitNumber.value\n  const noEllipsis = props.noEllipsis || limit <= ELLIPSIS_THRESHOLD\n\n  // The first case is when all of the page buttons fit on the control, this is\n  //  the simplest case and the only one that will create an array smaller than\n  //  Limit + 4 - noEndButtons * 2 (the [first, last,] prev, next buttons)\n\n  if (pages < limit + firstPage.value + lastPage.value) {\n    return [\n      !firstPage.value && !noFirstButton.value ? FIRST_BUTTON : null,\n      PREV_BUTTON,\n      ...Array.from({length: pages}, (_, index) => index + 1),\n      NEXT_BUTTON,\n      !lastPage.value && !noLastButton.value ? LAST_BUTTON : null,\n    ].filter((x) => x !== null) as number[]\n  }\n\n  // All of the remaining cases result in an array that is exactly limit + 4 - noEndButtons * 2 in length, so create\n  //  the array upfront and set up the beginning and end buttons, then fill the rest for each case\n\n  const buttons = Array.from({length: limit + 4 - (noFirstButton.value + noLastButton.value)})\n  if (!noFirstButton.value) {\n    if (!firstPage.value) {\n      buttons[0] = FIRST_BUTTON\n      buttons[1] = PREV_BUTTON\n    } else {\n      buttons[0] = PREV_BUTTON\n      buttons[1] = 1\n    }\n  } else {\n    buttons[0] = PREV_BUTTON\n  }\n\n  if (!noLastButton.value) {\n    if (!lastPage.value) {\n      buttons[buttons.length - 1] = LAST_BUTTON\n      buttons[buttons.length - 2] = NEXT_BUTTON\n    } else {\n      buttons[buttons.length - 1] = NEXT_BUTTON\n      buttons[buttons.length - 2] = pages\n    }\n  } else {\n    buttons[buttons.length - 1] = NEXT_BUTTON\n  }\n\n  // The next case is where the page buttons start at the begginning, with\n  //  no ellipsis at the beginning, but one at the end\n\n  if (value <= halfLimit.value + firstPage.value) {\n    for (let index = 1; index <= limit; index++) {\n      buttons[index + 1 - noFirstButton.value] = index + firstPage.value\n    }\n\n    if (!noEllipsis) {\n      buttons[buttons.length - (2 + showLastButton.value)] = LAST_ELLIPSIS\n    }\n  }\n\n  // And then we have the case where the page buttons go up to the end, with no\n  //  ellipsis at the end, but one at the beginning\n\n  if (value > pages - halfLimit.value - lastPage.value) {\n    const start = pages - (limit - 1) - lastPage.value\n    for (let index = 0; index < limit; index++) {\n      buttons[index + 2 - noFirstButton.value] = start + index\n    }\n\n    if (!noEllipsis) {\n      buttons[1 + showFirstButton.value] = FIRST_ELLIPSIS\n    }\n  }\n\n  // Finally we have the case where we have ellipsis at both ends\n  if (!buttons[2]) {\n    // Is there a more elegant way to ceck that we're in the final case?\n    const start = value - Math.floor(limit / 2)\n    for (let index = 0; index < limit; index++) {\n      buttons[index + 2 - noFirstButton.value] = start + index\n    }\n\n    if (!noEllipsis) {\n      buttons[1 + showFirstButton.value] = FIRST_ELLIPSIS\n      buttons[buttons.length - (2 + showLastButton.value)] = LAST_ELLIPSIS\n    }\n  }\n\n  //Enable sanity check for debugging purposes\n  // for (let i = 0; i < buttons.length; i++) {\n  //   if (!buttons[i]) {\n  //     // eslint-disable-next-line no-console\n  //     console.log(\n  //       `Failed: button == ${i}, limit=${limit}, pages=${pages}, firstPage=${firstPage}, lastPage=${lastPage}, value=${value}`\n  //     )\n  //   }\n  // }\n\n  return buttons.filter((x) => x !== null) as number[]\n})\n</script>\n\n<script lang=\"ts\">\nconst DEFAULT_PER_PAGE = 20\nconst DEFAULT_TOTAL_ROWS = 0\n</script>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}