{"ast":null,"code":"import \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport Api from '../Api.js';\nexport default {\n  name: 'BooksTable',\n  data() {\n    return {\n      books: [],\n      columns: [{\n        label: 'ID',\n        field: 'id',\n        type: 'number',\n        sortable: true\n      }, {\n        label: 'Title',\n        field: 'title',\n        sortable: true\n      }, {\n        label: 'Author',\n        field: 'authorFullName',\n        sortable: true\n      }, {\n        label: 'Pages',\n        field: 'pages',\n        type: 'number',\n        sortable: true\n      }]\n    };\n  },\n  mounted() {\n    Api.getBooks().then(response => {\n      this.books = response.data.data.map(book => ({\n        ...book,\n        authorFullName: `${book.author.name} ${book.author.surname}`\n      }));\n    }).catch(error => {\n      console.error('Failed to fetch books:', error);\n    });\n  }\n};","map":{"version":3,"names":["Api","name","data","books","columns","label","field","type","sortable","mounted","getBooks","then","response","map","book","authorFullName","author","surname","catch","error","console"],"sources":["/home/tymoteusz/Projects/StudiesProjects/Semestr_6/AdvancedWebSystems/Books/books-vue/src/components/BooksTable.vue"],"sourcesContent":["<template>\n  <div class=\"p-6 bg-white shadow-lg rounded-2xl\">\n    <h2 class=\"text-2xl font-bold mb-4 vgt-center-align\">Book List</h2>\n    <vue-good-table\n        :columns=\"columns\"\n        :rows=\"books\"\n        :pagination-options=\"{\n        enabled: true,\n        perPage: 5,\n      }\"\n        :search-options=\"{\n        enabled: true,\n        placeholder: 'Search books...'\n      }\"\n        :sort-options=\"{\n        enabled: true,\n        initialSortBy: { field: 'title', type: 'asc' }\n      }\"\n    />\n  </div>\n</template>\n\n<script>\nimport Api from '../Api.js';\n\nexport default {\n  name: 'BooksTable',\n  data() {\n    return {\n      books: [],\n      columns: [\n        {\n          label: 'ID',\n          field: 'id',\n          type: 'number',\n          sortable: true,\n        },\n        {\n          label: 'Title',\n          field: 'title',\n          sortable: true,\n        },\n        {\n          label: 'Author',\n          field: 'authorFullName',\n          sortable: true,\n        },\n        {\n          label: 'Pages',\n          field: 'pages',\n          type: 'number',\n          sortable: true,\n        },\n      ],\n    };\n  },\n  mounted() {\n    Api.getBooks()\n        .then((response) => {\n          this.books = response.data.data.map(book => ({\n            ...book,\n            authorFullName: `${book.author.name} ${book.author.surname}`,\n          }));\n        })\n        .catch((error) => {\n          console.error('Failed to fetch books:', error);\n        });\n  },\n};\n</script>\n"],"mappings":";;AAuBA,OAAOA,GAAE,MAAO,WAAW;AAE3B,eAAe;EACbC,IAAI,EAAE,YAAY;EAClBC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,KAAK,EAAE,EAAE;MACTC,OAAO,EAAE,CACP;QACEC,KAAK,EAAE,IAAI;QACXC,KAAK,EAAE,IAAI;QACXC,IAAI,EAAE,QAAQ;QACdC,QAAQ,EAAE;MACZ,CAAC,EACD;QACEH,KAAK,EAAE,OAAO;QACdC,KAAK,EAAE,OAAO;QACdE,QAAQ,EAAE;MACZ,CAAC,EACD;QACEH,KAAK,EAAE,QAAQ;QACfC,KAAK,EAAE,gBAAgB;QACvBE,QAAQ,EAAE;MACZ,CAAC,EACD;QACEH,KAAK,EAAE,OAAO;QACdC,KAAK,EAAE,OAAO;QACdC,IAAI,EAAE,QAAQ;QACdC,QAAQ,EAAE;MACZ,CAAC;IAEL,CAAC;EACH,CAAC;EACDC,OAAOA,CAAA,EAAG;IACRT,GAAG,CAACU,QAAQ,CAAC,EACRC,IAAI,CAAEC,QAAQ,IAAK;MAClB,IAAI,CAACT,KAAI,GAAIS,QAAQ,CAACV,IAAI,CAACA,IAAI,CAACW,GAAG,CAACC,IAAG,KAAM;QAC3C,GAAGA,IAAI;QACPC,cAAc,EAAE,GAAGD,IAAI,CAACE,MAAM,CAACf,IAAI,IAAIa,IAAI,CAACE,MAAM,CAACC,OAAO;MAC5D,CAAC,CAAC,CAAC;IACL,CAAC,EACAC,KAAK,CAAEC,KAAK,IAAK;MAChBC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;IAChD,CAAC,CAAC;EACR;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}