{"ast":null,"code":"import { defineComponent, provide, computed, createBlock, openBlock, resolveDynamicComponent, unref, normalizeClass, withCtx, renderSlot, createElementBlock, createCommentVNode, createElementVNode, toDisplayString, createTextVNode } from \"vue\";\nimport { u as useDefaults } from \"./useDefaults-DANje4tM.mjs\";\nimport { l as inputGroupKey } from \"./keys-D3gOZjD-.mjs\";\nconst _hoisted_1 = {\n  key: 0,\n  class: \"input-group-text\"\n};\nconst _hoisted_2 = {\n  key: 0,\n  class: \"input-group-text\"\n};\nconst _sfc_main$1 = /* @__PURE__ */defineComponent({\n  __name: \"BInputGroup\",\n  props: {\n    append: {\n      default: void 0\n    },\n    id: {\n      default: void 0\n    },\n    prepend: {\n      default: void 0\n    },\n    size: {\n      default: \"md\"\n    },\n    tag: {\n      default: \"div\"\n    }\n  },\n  setup(__props) {\n    provide(inputGroupKey, true);\n    const _props = __props;\n    const props = useDefaults(_props, \"BInputGroup\");\n    const computedClasses = computed(() => ({\n      [`input-group-${props.size}`]: props.size !== \"md\"\n    }));\n    const hasAppend = computed(() => !!props.append);\n    const hasPrepend = computed(() => !!props.prepend);\n    return (_ctx, _cache) => {\n      return openBlock(), createBlock(resolveDynamicComponent(unref(props).tag), {\n        id: unref(props).id,\n        class: normalizeClass([\"input-group\", computedClasses.value]),\n        role: \"group\"\n      }, {\n        default: withCtx(() => [renderSlot(_ctx.$slots, \"prepend\", {}, () => [hasPrepend.value ? (openBlock(), createElementBlock(\"span\", _hoisted_1, [createElementVNode(\"span\", null, toDisplayString(unref(props).prepend), 1)])) : createCommentVNode(\"\", true)]), renderSlot(_ctx.$slots, \"default\"), renderSlot(_ctx.$slots, \"append\", {}, () => [hasAppend.value ? (openBlock(), createElementBlock(\"span\", _hoisted_2, [createElementVNode(\"span\", null, toDisplayString(unref(props).append), 1)])) : createCommentVNode(\"\", true)])]),\n        _: 3\n      }, 8, [\"id\", \"class\"]);\n    };\n  }\n});\nconst _sfc_main = /* @__PURE__ */defineComponent({\n  __name: \"BInputGroupText\",\n  props: {\n    tag: {\n      default: \"div\"\n    },\n    text: {\n      default: void 0\n    }\n  },\n  setup(__props) {\n    const _props = __props;\n    const props = useDefaults(_props, \"BInputGroupText\");\n    return (_ctx, _cache) => {\n      return openBlock(), createBlock(resolveDynamicComponent(unref(props).tag), {\n        class: \"input-group-text\"\n      }, {\n        default: withCtx(() => [renderSlot(_ctx.$slots, \"default\", {}, () => [createTextVNode(toDisplayString(unref(props).text), 1)])]),\n        _: 3\n      });\n    };\n  }\n});\nexport { _sfc_main$1 as _, _sfc_main as a };","map":{"version":3,"names":["provide","inputGroupKey","_props","__props","props","useDefaults","computedClasses","computed","size","hasAppend","append","hasPrepend","prepend"],"sources":["../src/components/BInputGroup/BInputGroup.vue","../src/components/BInputGroup/BInputGroupText.vue"],"sourcesContent":["<template>\n  <component\n    :is=\"props.tag\"\n    :id=\"props.id\"\n    class=\"input-group\"\n    :class=\"computedClasses\"\n    role=\"group\"\n  >\n    <slot name=\"prepend\">\n      <span v-if=\"hasPrepend\" class=\"input-group-text\">\n        <span>{{ props.prepend }}</span>\n      </span>\n    </slot>\n    <slot />\n    <slot name=\"append\">\n      <span v-if=\"hasAppend\" class=\"input-group-text\">\n        <span>{{ props.append }}</span>\n      </span>\n    </slot>\n  </component>\n</template>\n\n<script setup lang=\"ts\">\nimport {useDefaults} from '../../composables/useDefaults'\nimport type {BInputGroupProps} from '../../types/ComponentProps'\nimport {computed, provide} from 'vue'\nimport {inputGroupKey} from '../../utils/keys'\n\nprovide(inputGroupKey, true)\n\nconst _props = withDefaults(defineProps<BInputGroupProps>(), {\n  append: undefined,\n  id: undefined,\n  prepend: undefined,\n  size: 'md',\n  tag: 'div',\n})\nconst props = useDefaults(_props, 'BInputGroup')\n\ndefineSlots<{\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  append?: (props: Record<string, never>) => any\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  default?: (props: Record<string, never>) => any\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  prepend?: (props: Record<string, never>) => any\n}>()\n\nconst computedClasses = computed(() => ({\n  [`input-group-${props.size}`]: props.size !== 'md',\n}))\nconst hasAppend = computed(() => !!props.append)\nconst hasPrepend = computed(() => !!props.prepend)\n</script>\n","<template>\n  <component :is=\"props.tag\" class=\"input-group-text\">\n    <slot>\n      {{ props.text }}\n    </slot>\n  </component>\n</template>\n\n<script setup lang=\"ts\">\nimport {useDefaults} from '../../composables/useDefaults'\nimport type {BInputGroupTextProps} from '../../types/ComponentProps'\n\nconst _props = withDefaults(defineProps<BInputGroupTextProps>(), {\n  tag: 'div',\n  text: undefined,\n})\nconst props = useDefaults(_props, 'BInputGroupText')\n\ndefineSlots<{\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  default?: (props: Record<string, never>) => any\n}>()\n</script>\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IA4BAA,OAAA,CAAQC,aAAA,EAAe,IAAI;IAE3B,MAAMC,MAAA,GAASC,OAAA;IAOT,MAAAC,KAAA,GAAQC,WAAA,CAAYH,MAAA,EAAQ,aAAa;IAWzC,MAAAI,eAAA,GAAkBC,QAAA,CAAS,OAAO;MACtC,CAAC,eAAeH,KAAA,CAAMI,IAAI,EAAE,GAAGJ,KAAA,CAAMI,IAAA,KAAS;IAAA,EAC9C;IACF,MAAMC,SAAA,GAAYF,QAAA,CAAS,MAAM,CAAC,CAACH,KAAA,CAAMM,MAAM;IAC/C,MAAMC,UAAA,GAAaJ,QAAA,CAAS,MAAM,CAAC,CAACH,KAAA,CAAMQ,OAAO;;;;;;;;;;;;;;;;;;;;;;;;ICxCjD,MAAMV,MAAA,GAASC,OAAA;IAIT,MAAAC,KAAA,GAAQC,WAAA,CAAYH,MAAA,EAAQ,iBAAiB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}