{"ast":null,"code":"import { k as useTimestamp, l as useElementHover } from \"./index-cC189kCW.mjs\";\nimport { readonly, toRef, ref, computed, watch, toValue } from \"vue\";\nconst useCountdown = (length, interval, timestampOpts = {}) => {\n  const resolvedLength = readonly(toRef(length));\n  const isPaused = ref(false);\n  const target = ref(Date.now() + resolvedLength.value);\n  const {\n    isActive,\n    pause,\n    resume,\n    timestamp\n  } = useTimestamp({\n    interval,\n    controls: true,\n    callback: v => {\n      if (v >= target.value) {\n        isPaused.value = false;\n        pause();\n      }\n    },\n    ...timestampOpts\n  });\n  const value = computed(() => target.value - timestamp.value);\n  const restart = () => {\n    target.value = Date.now() + resolvedLength.value;\n    resume();\n  };\n  watch(resolvedLength, () => {\n    restart();\n  });\n  const myPause = () => {\n    isPaused.value = true;\n    pause();\n  };\n  const myResume = () => {\n    isPaused.value = false;\n    const remainingTime = target.value - timestamp.value;\n    target.value = Date.now() + remainingTime;\n    resume();\n  };\n  const stop = () => {\n    pause();\n    timestamp.value = target.value;\n    isPaused.value = false;\n  };\n  return {\n    isActive: readonly(isActive),\n    isPaused: readonly(isPaused),\n    stop,\n    pause: myPause,\n    resume: myResume,\n    restart,\n    value\n  };\n};\nconst useCountdownHover = (element, props, actions) => {\n  const isHovering = useElementHover(element);\n  const onMouseEnter = () => {\n    if (toValue(props).noHoverPause) return;\n    actions.pause();\n  };\n  const onMouseLeave = () => {\n    if (toValue(props).noResumeOnHoverLeave) return;\n    actions.resume();\n  };\n  watch(isHovering, newValue => {\n    if (toValue(props).modelValueIgnoresHover) return;\n    if (newValue) {\n      onMouseEnter();\n      return;\n    }\n    onMouseLeave();\n  });\n  return {\n    isHovering\n  };\n};\nexport { useCountdownHover as a, useCountdown as u };","map":{"version":3,"names":["useCountdown","length","interval","timestampOpts","resolvedLength","readonly","toRef","isPaused","ref","target","Date","now","value","isActive","pause","resume","timestamp","useTimestamp","controls","callback","v","computed","restart","watch","myPause","myResume","remainingTime","stop","useCountdownHover","element","props","actions","isHovering","useElementHover","onMouseEnter","toValue","noHoverPause","onMouseLeave","noResumeOnHoverLeave","newValue","modelValueIgnoresHover"],"sources":["../src/composables/useCountdown.ts","../src/composables/useCountdownHover.ts"],"sourcesContent":["import {useTimestamp, type UseTimestampOptions} from '@vueuse/core'\nimport {computed, type MaybeRefOrGetter, readonly, ref, toRef, watch} from 'vue'\n\n/**\n * A simple interval timer that counts down the remaining seconds\n *\n * @param {MaybeRefOrGetter<number>} length the total amount of time to loop through in ms\n * @param {MaybeRefOrGetter<number>} interval how often the interval should refresh. Default 1000\n * @param {Readonly<UseIntervalFnOptions>} intervalOpts opts to pass to the interval fn. Default {}\n */\nexport const useCountdown = (\n  length: MaybeRefOrGetter<number>,\n  interval: number | 'requestAnimationFrame',\n  timestampOpts: UseTimestampOptions<true> = {}\n) => {\n  const resolvedLength = readonly(toRef(length))\n\n  const isPaused = ref(false)\n\n  const target = ref(Date.now() + resolvedLength.value)\n\n  const {isActive, pause, resume, timestamp} = useTimestamp({\n    interval,\n    controls: true,\n    callback: (v) => {\n      if (v >= target.value) {\n        isPaused.value = false\n        pause()\n      }\n    },\n    ...timestampOpts,\n  })\n\n  const value = computed(() => target.value - timestamp.value)\n\n  const restart = () => {\n    target.value = Date.now() + resolvedLength.value\n    resume()\n  }\n  watch(resolvedLength, () => {\n    restart()\n  })\n\n  const myPause = () => {\n    isPaused.value = true\n    pause()\n  }\n  const myResume = () => {\n    isPaused.value = false\n    const remainingTime = target.value - timestamp.value\n    target.value = Date.now() + remainingTime\n    resume()\n  }\n  const stop = () => {\n    pause()\n    timestamp.value = target.value\n    isPaused.value = false\n  }\n\n  return {\n    isActive: readonly(isActive),\n    isPaused: readonly(isPaused),\n    stop,\n    pause: myPause,\n    resume: myResume,\n    restart,\n    value,\n  }\n}\n","import {useElementHover} from '@vueuse/core'\nimport {type MaybeRefOrGetter, type Ref, toValue, watch} from 'vue'\n\nexport const useCountdownHover = (\n  element: Ref<HTMLElement | null>,\n  props: MaybeRefOrGetter<{\n    noHoverPause?: boolean\n    noResumeOnHoverLeave?: boolean\n    /**\n     * Countdown/hover rules don't apply to static model-values (boolean)\n     */\n    modelValueIgnoresHover: boolean\n  }>,\n  actions: {\n    pause: () => void\n    resume: () => void\n  }\n) => {\n  const isHovering = useElementHover(element)\n\n  const onMouseEnter = () => {\n    if (toValue(props).noHoverPause) return\n    actions.pause()\n  }\n  const onMouseLeave = () => {\n    if (toValue(props).noResumeOnHoverLeave) return\n    actions.resume()\n  }\n\n  watch(isHovering, (newValue) => {\n    if (toValue(props).modelValueIgnoresHover) return\n    if (newValue) {\n      onMouseEnter()\n      return\n    }\n    onMouseLeave()\n  })\n\n  return {\n    isHovering,\n  }\n}\n"],"mappings":";;AAUO,MAAMA,YAAA,GAAeA,CAC1BC,MAAA,EACAC,QAAA,EACAC,aAAA,GAA2C,OACxC;EACH,MAAMC,cAAA,GAAiBC,QAAA,CAASC,KAAA,CAAML,MAAM,CAAC;EAEvC,MAAAM,QAAA,GAAWC,GAAA,CAAI,KAAK;EAE1B,MAAMC,MAAA,GAASD,GAAA,CAAIE,IAAA,CAAKC,GAAA,CAAI,IAAIP,cAAA,CAAeQ,KAAK;EAEpD,MAAM;IAACC,QAAA;IAAUC,KAAA;IAAOC,MAAA;IAAQC;EAAA,IAAaC,YAAA,CAAa;IACxDf,QAAA;IACAgB,QAAA,EAAU;IACVC,QAAA,EAAWC,CAAA,IAAM;MACX,IAAAA,CAAA,IAAKX,MAAA,CAAOG,KAAA,EAAO;QACrBL,QAAA,CAASK,KAAA,GAAQ;QACXE,KAAA;MAAA;IAEV;IACA,GAAGX;EAAA,CACJ;EAED,MAAMS,KAAA,GAAQS,QAAA,CAAS,MAAMZ,MAAA,CAAOG,KAAA,GAAQI,SAAA,CAAUJ,KAAK;EAE3D,MAAMU,OAAA,GAAUA,CAAA,KAAM;IACpBb,MAAA,CAAOG,KAAA,GAAQF,IAAA,CAAKC,GAAA,CAAI,IAAIP,cAAA,CAAeQ,KAAA;IACpCG,MAAA;EACT;EACAQ,KAAA,CAAMnB,cAAA,EAAgB,MAAM;IAClBkB,OAAA;EAAA,CACT;EAED,MAAME,OAAA,GAAUA,CAAA,KAAM;IACpBjB,QAAA,CAASK,KAAA,GAAQ;IACXE,KAAA;EACR;EACA,MAAMW,QAAA,GAAWA,CAAA,KAAM;IACrBlB,QAAA,CAASK,KAAA,GAAQ;IACX,MAAAc,aAAA,GAAgBjB,MAAA,CAAOG,KAAA,GAAQI,SAAA,CAAUJ,KAAA;IACxCH,MAAA,CAAAG,KAAA,GAAQF,IAAA,CAAKC,GAAA,CAAQ,IAAAe,aAAA;IACrBX,MAAA;EACT;EACA,MAAMY,IAAA,GAAOA,CAAA,KAAM;IACXb,KAAA;IACNE,SAAA,CAAUJ,KAAA,GAAQH,MAAA,CAAOG,KAAA;IACzBL,QAAA,CAASK,KAAA,GAAQ;EACnB;EAEO;IACLC,QAAA,EAAUR,QAAA,CAASQ,QAAQ;IAC3BN,QAAA,EAAUF,QAAA,CAASE,QAAQ;IAC3BoB,IAAA;IACAb,KAAA,EAAOU,OAAA;IACPT,MAAA,EAAQU,QAAA;IACRH,OAAA;IACAV;EACF;AACF;ACjEO,MAAMgB,iBAAA,GAAoBA,CAC/BC,OAAA,EACAC,KAAA,EAQAC,OAAA,KAIG;EACG,MAAAC,UAAA,GAAaC,eAAA,CAAgBJ,OAAO;EAE1C,MAAMK,YAAA,GAAeA,CAAA,KAAM;IACrB,IAAAC,OAAA,CAAQL,KAAK,EAAEM,YAAA,EAAc;IACjCL,OAAA,CAAQjB,KAAA,CAAM;EAChB;EACA,MAAMuB,YAAA,GAAeA,CAAA,KAAM;IACrB,IAAAF,OAAA,CAAQL,KAAK,EAAEQ,oBAAA,EAAsB;IACzCP,OAAA,CAAQhB,MAAA,CAAO;EACjB;EAEMQ,KAAA,CAAAS,UAAA,EAAaO,QAAA,IAAa;IAC1B,IAAAJ,OAAA,CAAQL,KAAK,EAAEU,sBAAA,EAAwB;IAC3C,IAAID,QAAA,EAAU;MACCL,YAAA;MACb;IAAA;IAEWG,YAAA;EAAA,CACd;EAEM;IACLL;EACF;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}