{"ast":null,"code":"import { a as useColorMode$1 } from \"../../../index-cC189kCW.mjs\";\nconst useColorMode = (opts = {}) => {\n  const persist = opts.persist ?? false;\n  const attribute = \"data-bs-theme\";\n  const selector = \"body\";\n  return useColorMode$1({\n    attribute,\n    selector,\n    storageKey: persist === true ? `bv-color-${opts.attribute ?? attribute}-${opts.selector ?? selector}` : null,\n    ...opts\n  });\n};\nexport { useColorMode };","map":{"version":3,"names":["useColorMode","opts","persist","attribute","selector","useColorMode$1","storageKey"],"sources":["../../../../src/composables/useColorMode/index.ts"],"sourcesContent":["import {type UseColorModeOptions, useColorMode as useVueuseColorMode} from '@vueuse/core'\n\nexport interface ColorModeOptions extends UseColorModeOptions {\n  /**\n   * When set to true, useColorMode will automatically store itself and persist (default localstorage).\n   * @default false\n   */\n  persist?: boolean\n}\n\nexport const useColorMode = (opts: Readonly<ColorModeOptions> = {}) => {\n  const persist = opts.persist ?? false\n  const attribute = 'data-bs-theme'\n  const selector = 'body'\n  return useVueuseColorMode({\n    attribute,\n    selector,\n    storageKey:\n      persist === true\n        ? `bv-color-${opts.attribute ?? attribute}-${opts.selector ?? selector}`\n        : null,\n    ...opts,\n  })\n}\n"],"mappings":";AAUO,MAAMA,YAAA,GAAeA,CAACC,IAAA,GAAmC,OAAO;EAC/D,MAAAC,OAAA,GAAUD,IAAA,CAAKC,OAAA,IAAW;EAChC,MAAMC,SAAA,GAAY;EAClB,MAAMC,QAAA,GAAW;EACjB,OAAOC,cAAA,CAAmB;IACxBF,SAAA;IACAC,QAAA;IACAE,UAAA,EACEJ,OAAA,KAAY,OACR,YAAYD,IAAA,CAAKE,SAAA,IAAaA,SAAS,IAAIF,IAAA,CAAKG,QAAA,IAAYA,QAAQ,KACpE;IACN,GAAGH;EAAA,CACJ;AACH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}