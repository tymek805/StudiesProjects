{"ast":null,"code":"import { ref, toValue, toRef, watch, isRef, onScopeDispose } from \"vue\";\nimport { p as popoverPluginKey } from \"../../../keys-D3gOZjD-.mjs\";\nconst popoverPlugin = {\n  install(app) {\n    const popovers = ref(/* @__PURE__ */new Map());\n    const popover = obj => {\n      var _a;\n      const resolvedProps = toRef(obj);\n      const _self = ((_a = resolvedProps.value) == null ? void 0 : _a.id) || Symbol(\"Popover controller\");\n      watch(resolvedProps, newValue => {\n        popovers.value.set(_self, {\n          ...newValue,\n          ...(typeof newValue[\"modelValue\"] !== \"undefined\" && isRef(obj) ? {\n            \"onUpdate:modelValue\": val => {\n              var _a2;\n              (_a2 = newValue[\"onUpdate:modelValue\"]) == null ? void 0 : _a2.call(newValue, val);\n              obj.value.modelValue = val;\n            }\n          } : {})\n        });\n      }, {\n        immediate: true,\n        deep: true\n      });\n      onScopeDispose(() => popovers.value.delete(_self), true);\n      return _self;\n    };\n    const setPopover = (self, val) => {\n      const popover2 = popovers.value.get(self);\n      if (!popover2) return;\n      popovers.value.set(self, {\n        ...popover2,\n        ...toValue(val)\n      });\n    };\n    const removePopover = self => popovers.value.delete(self);\n    const tooltips = ref(/* @__PURE__ */new Map());\n    const tooltip = obj => {\n      var _a;\n      const resolvedProps = toRef(obj);\n      const _self = ((_a = resolvedProps.value) == null ? void 0 : _a.id) || Symbol(\"Tooltip controller\");\n      watch(resolvedProps, newValue => {\n        popovers.value.set(_self, {\n          ...newValue,\n          ...(typeof newValue[\"modelValue\"] !== \"undefined\" && isRef(obj) ? {\n            \"onUpdate:modelValue\": val => {\n              var _a2;\n              (_a2 = newValue[\"onUpdate:modelValue\"]) == null ? void 0 : _a2.call(newValue, val);\n              obj.value.modelValue = val;\n            }\n          } : {})\n        });\n      }, {\n        immediate: true,\n        deep: true\n      });\n      onScopeDispose(() => tooltips.value.delete(_self), true);\n      return _self;\n    };\n    const setTooltip = (self, val) => {\n      const tooltip2 = tooltips.value.get(self);\n      if (!tooltip2) return;\n      tooltips.value.set(self, {\n        ...tooltip2,\n        ...toValue(val)\n      });\n    };\n    const removeTooltip = self => tooltips.value.delete(self);\n    app.provide(popoverPluginKey, {\n      popovers,\n      tooltips,\n      tooltip,\n      popover,\n      setPopover,\n      setTooltip,\n      removePopover,\n      removeTooltip\n    });\n  }\n};\nexport { popoverPlugin };","map":{"version":3,"names":["popoverPlugin","install","app","popovers","ref","Map","popover","obj","resolvedProps","toRef","_self","_a","value","id","Symbol","watch","newValue","set","isRef","val","_a2","call","modelValue","immediate","deep","onScopeDispose","delete","setPopover","self","popover2","get","toValue","removePopover","tooltips","tooltip","setTooltip","tooltip2","removeTooltip","provide","popoverPluginKey"],"sources":["../../../../src/plugins/popoverController/index.ts"],"sourcesContent":["import {isRef, onScopeDispose, type Plugin, ref, toRef, toValue, watch} from 'vue'\nimport {popoverPluginKey} from '../../utils/keys'\nimport type {\n  ControllerKey,\n  PopoverOrchestratorParam,\n  PopoverOrchestratorShowParam,\n  TooltipOrchestratorParam,\n  TooltipOrchestratorShowParam,\n} from '../../types/ComponentOrchestratorTypes'\n\nexport const popoverPlugin: Plugin = {\n  install(app) {\n    const popovers = ref(new Map<ControllerKey, PopoverOrchestratorParam>())\n    /**\n     * @returns {ControllerKey} If `id` is passed to props, it will use that id, otherwise,\n     * a symbol will be created that corresponds to its unique id.\n     */\n    const popover = (obj: PopoverOrchestratorShowParam): ControllerKey => {\n      const resolvedProps = toRef(obj)\n      const _self = resolvedProps.value?.id || Symbol('Popover controller')\n\n      watch(\n        resolvedProps,\n        (newValue) => {\n          // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n          // @ts-ignore: How to add refs for title & content?\n          popovers.value.set(_self, {\n            ...newValue,\n            ...(typeof newValue['modelValue'] !== 'undefined' && isRef(obj)\n              ? {\n                  'onUpdate:modelValue': (val: boolean) => {\n                    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n                    // @ts-ignore: How to add emit types?\n                    newValue['onUpdate:modelValue']?.(val)\n                    obj.value.modelValue = val\n                  },\n                }\n              : {}),\n          })\n        },\n        {\n          immediate: true,\n          deep: true,\n        }\n      )\n      onScopeDispose(() => popovers.value.delete(_self), true)\n\n      return _self\n    }\n    /**\n     * @param {ControllerKey} self You can get the symbol param from the return value from the show method, or use props.id\n     */\n    const setPopover = (self: ControllerKey, val: Partial<PopoverOrchestratorParam>) => {\n      const popover = popovers.value.get(self)\n      if (!popover) return\n      // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n      // @ts-ignore: How to add refs for title & content?\n      popovers.value.set(self, {\n        ...popover,\n        ...toValue(val),\n      })\n    }\n    /**\n     * @param {ControllerKey} self You can get the symbol param from the return value from the show method, or use props.id\n     */\n    const removePopover = (self: ControllerKey) => popovers.value.delete(self)\n\n    const tooltips = ref(new Map<ControllerKey, TooltipOrchestratorParam>())\n    /**\n     * @returns {ControllerKey} If `id` is passed to props, it will use that id, otherwise,\n     * a symbol will be created that corresponds to its unique id.\n     */\n    const tooltip = (obj: TooltipOrchestratorShowParam): ControllerKey => {\n      const resolvedProps = toRef(obj)\n      const _self = resolvedProps.value?.id || Symbol('Tooltip controller')\n\n      watch(\n        resolvedProps,\n        (newValue) => {\n          // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n          // @ts-ignore: How to add refs for title & content?\n          popovers.value.set(_self, {\n            ...newValue,\n            ...(typeof newValue['modelValue'] !== 'undefined' && isRef(obj)\n              ? {\n                  'onUpdate:modelValue': (val: boolean) => {\n                    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n                    // @ts-ignore: How to add emit types?\n                    newValue['onUpdate:modelValue']?.(val)\n                    obj.value.modelValue = val\n                  },\n                }\n              : {}),\n          })\n        },\n        {\n          immediate: true,\n          deep: true,\n        }\n      )\n      onScopeDispose(() => tooltips.value.delete(_self), true)\n\n      return _self\n    }\n    /**\n     * @param {ControllerKey} self You can get the symbol param from the return value from the show method, or use props.id\n     */\n    const setTooltip = (self: ControllerKey, val: Partial<TooltipOrchestratorParam>) => {\n      const tooltip = tooltips.value.get(self)\n      if (!tooltip) return\n      // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n      // @ts-ignore: How to add refs for title & content?\n      tooltips.value.set(self, {\n        ...tooltip,\n        ...toValue(val),\n      })\n    }\n    /**\n     * @param {ControllerKey} self You can get the symbol param from the return value from the show method, or use props.id\n     */\n    const removeTooltip = (self: ControllerKey) => tooltips.value.delete(self)\n\n    app.provide(popoverPluginKey, {\n      popovers,\n      tooltips,\n      tooltip,\n      popover,\n      setPopover,\n      setTooltip,\n      removePopover,\n      removeTooltip,\n    })\n  },\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}