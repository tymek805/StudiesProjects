{"ast":null,"code":"/**\n * --------------------------------------------------------------------------\n * Bootstrap util/config.js\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n * --------------------------------------------------------------------------\n */\n\nimport Manipulator from '../dom/manipulator.js';\nimport { isElement, toType } from './index.js';\n\n/**\n * Class definition\n */\n\nclass Config {\n  // Getters\n  static get Default() {\n    return {};\n  }\n  static get DefaultType() {\n    return {};\n  }\n  static get NAME() {\n    throw new Error('You have to implement the static method \"NAME\", for each component!');\n  }\n  _getConfig(config) {\n    config = this._mergeConfigObj(config);\n    config = this._configAfterMerge(config);\n    this._typeCheckConfig(config);\n    return config;\n  }\n  _configAfterMerge(config) {\n    return config;\n  }\n  _mergeConfigObj(config, element) {\n    const jsonConfig = isElement(element) ? Manipulator.getDataAttribute(element, 'config') : {}; // try to parse\n\n    return {\n      ...this.constructor.Default,\n      ...(typeof jsonConfig === 'object' ? jsonConfig : {}),\n      ...(isElement(element) ? Manipulator.getDataAttributes(element) : {}),\n      ...(typeof config === 'object' ? config : {})\n    };\n  }\n  _typeCheckConfig(config, configTypes = this.constructor.DefaultType) {\n    for (const [property, expectedTypes] of Object.entries(configTypes)) {\n      const value = config[property];\n      const valueType = isElement(value) ? 'element' : toType(value);\n      if (!new RegExp(expectedTypes).test(valueType)) {\n        throw new TypeError(`${this.constructor.NAME.toUpperCase()}: Option \"${property}\" provided type \"${valueType}\" but expected type \"${expectedTypes}\".`);\n      }\n    }\n  }\n}\nexport default Config;","map":{"version":3,"names":["Manipulator","isElement","toType","Config","Default","DefaultType","NAME","Error","_getConfig","config","_mergeConfigObj","_configAfterMerge","_typeCheckConfig","element","jsonConfig","getDataAttribute","constructor","getDataAttributes","configTypes","property","expectedTypes","Object","entries","value","valueType","RegExp","test","TypeError","toUpperCase"],"sources":["/home/tymoteusz/Projects/StudiesProjects/Semestr_6/AdvancedWebSystems/Books/books-vue/node_modules/bootstrap/js/src/util/config.js"],"sourcesContent":["/**\n * --------------------------------------------------------------------------\n * Bootstrap util/config.js\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n * --------------------------------------------------------------------------\n */\n\nimport Manipulator from '../dom/manipulator.js'\nimport { isElement, toType } from './index.js'\n\n/**\n * Class definition\n */\n\nclass Config {\n  // Getters\n  static get Default() {\n    return {}\n  }\n\n  static get DefaultType() {\n    return {}\n  }\n\n  static get NAME() {\n    throw new Error('You have to implement the static method \"NAME\", for each component!')\n  }\n\n  _getConfig(config) {\n    config = this._mergeConfigObj(config)\n    config = this._configAfterMerge(config)\n    this._typeCheckConfig(config)\n    return config\n  }\n\n  _configAfterMerge(config) {\n    return config\n  }\n\n  _mergeConfigObj(config, element) {\n    const jsonConfig = isElement(element) ? Manipulator.getDataAttribute(element, 'config') : {} // try to parse\n\n    return {\n      ...this.constructor.Default,\n      ...(typeof jsonConfig === 'object' ? jsonConfig : {}),\n      ...(isElement(element) ? Manipulator.getDataAttributes(element) : {}),\n      ...(typeof config === 'object' ? config : {})\n    }\n  }\n\n  _typeCheckConfig(config, configTypes = this.constructor.DefaultType) {\n    for (const [property, expectedTypes] of Object.entries(configTypes)) {\n      const value = config[property]\n      const valueType = isElement(value) ? 'element' : toType(value)\n\n      if (!new RegExp(expectedTypes).test(valueType)) {\n        throw new TypeError(\n          `${this.constructor.NAME.toUpperCase()}: Option \"${property}\" provided type \"${valueType}\" but expected type \"${expectedTypes}\".`\n        )\n      }\n    }\n  }\n}\n\nexport default Config\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAOA,WAAW,MAAM,uBAAuB;AAC/C,SAASC,SAAS,EAAEC,MAAM,QAAQ,YAAY;;AAE9C;AACA;AACA;;AAEA,MAAMC,MAAM,CAAC;EACX;EACA,WAAWC,OAAOA,CAAA,EAAG;IACnB,OAAO,CAAC,CAAC;EACX;EAEA,WAAWC,WAAWA,CAAA,EAAG;IACvB,OAAO,CAAC,CAAC;EACX;EAEA,WAAWC,IAAIA,CAAA,EAAG;IAChB,MAAM,IAAIC,KAAK,CAAC,qEAAqE,CAAC;EACxF;EAEAC,UAAUA,CAACC,MAAM,EAAE;IACjBA,MAAM,GAAG,IAAI,CAACC,eAAe,CAACD,MAAM,CAAC;IACrCA,MAAM,GAAG,IAAI,CAACE,iBAAiB,CAACF,MAAM,CAAC;IACvC,IAAI,CAACG,gBAAgB,CAACH,MAAM,CAAC;IAC7B,OAAOA,MAAM;EACf;EAEAE,iBAAiBA,CAACF,MAAM,EAAE;IACxB,OAAOA,MAAM;EACf;EAEAC,eAAeA,CAACD,MAAM,EAAEI,OAAO,EAAE;IAC/B,MAAMC,UAAU,GAAGb,SAAS,CAACY,OAAO,CAAC,GAAGb,WAAW,CAACe,gBAAgB,CAACF,OAAO,EAAE,QAAQ,CAAC,GAAG,CAAC,CAAC,EAAC;;IAE7F,OAAO;MACL,GAAG,IAAI,CAACG,WAAW,CAACZ,OAAO;MAC3B,IAAI,OAAOU,UAAU,KAAK,QAAQ,GAAGA,UAAU,GAAG,CAAC,CAAC,CAAC;MACrD,IAAIb,SAAS,CAACY,OAAO,CAAC,GAAGb,WAAW,CAACiB,iBAAiB,CAACJ,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC;MACrE,IAAI,OAAOJ,MAAM,KAAK,QAAQ,GAAGA,MAAM,GAAG,CAAC,CAAC;IAC9C,CAAC;EACH;EAEAG,gBAAgBA,CAACH,MAAM,EAAES,WAAW,GAAG,IAAI,CAACF,WAAW,CAACX,WAAW,EAAE;IACnE,KAAK,MAAM,CAACc,QAAQ,EAAEC,aAAa,CAAC,IAAIC,MAAM,CAACC,OAAO,CAACJ,WAAW,CAAC,EAAE;MACnE,MAAMK,KAAK,GAAGd,MAAM,CAACU,QAAQ,CAAC;MAC9B,MAAMK,SAAS,GAAGvB,SAAS,CAACsB,KAAK,CAAC,GAAG,SAAS,GAAGrB,MAAM,CAACqB,KAAK,CAAC;MAE9D,IAAI,CAAC,IAAIE,MAAM,CAACL,aAAa,CAAC,CAACM,IAAI,CAACF,SAAS,CAAC,EAAE;QAC9C,MAAM,IAAIG,SAAS,CACjB,GAAG,IAAI,CAACX,WAAW,CAACV,IAAI,CAACsB,WAAW,CAAC,CAAC,aAAaT,QAAQ,oBAAoBK,SAAS,wBAAwBJ,aAAa,IAC/H,CAAC;MACH;IACF;EACF;AACF;AAEA,eAAejB,MAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}