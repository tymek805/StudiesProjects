{"ast":null,"code":"import { createElementVNode as _createElementVNode, resolveComponent as _resolveComponent, createVNode as _createVNode, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  class: \"p-6 bg-white shadow-lg rounded-2xl\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_vue_good_table = _resolveComponent(\"vue-good-table\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_cache[0] || (_cache[0] = _createElementVNode(\"h2\", {\n    class: \"text-2xl font-bold mb-4\"\n  }, \"ðŸ“˜ Book List\", -1 /* HOISTED */)), _createVNode(_component_vue_good_table, {\n    columns: $data.columns,\n    rows: $data.books,\n    \"pagination-options\": {\n      enabled: true,\n      perPage: 5\n    },\n    \"search-options\": {\n      enabled: true,\n      placeholder: 'Search books...'\n    },\n    \"sort-options\": {\n      enabled: true,\n      initialSortBy: {\n        field: 'title',\n        type: 'asc'\n      }\n    }\n  }, null, 8 /* PROPS */, [\"columns\", \"rows\"])]);\n}","map":{"version":3,"names":["class","_createElementBlock","_hoisted_1","_createElementVNode","_createVNode","_component_vue_good_table","columns","$data","rows","books"],"sources":["/home/tymoteusz/Projects/StudiesProjects/Semestr_6/AdvancedWebSystems/Books/books-vue/src/components/BooksTable.vue"],"sourcesContent":["<template>\n  <div class=\"p-6 bg-white shadow-lg rounded-2xl\">\n    <h2 class=\"text-2xl font-bold mb-4\">ðŸ“˜ Book List</h2>\n    <vue-good-table\n        :columns=\"columns\"\n        :rows=\"books\"\n        :pagination-options=\"{\n        enabled: true,\n        perPage: 5,\n      }\"\n        :search-options=\"{\n        enabled: true,\n        placeholder: 'Search books...'\n      }\"\n        :sort-options=\"{\n        enabled: true,\n        initialSortBy: { field: 'title', type: 'asc' }\n      }\"\n    />\n  </div>\n</template>\n\n<script>\nimport Api from '../Api.js';\n\nexport default {\n  name: 'BooksTable',\n  data() {\n    return {\n      books: [],\n      columns: [\n        {\n          label: 'ID',\n          field: 'id',\n          type: 'number',\n          sortable: true,\n        },\n        {\n          label: 'Title',\n          field: 'title',\n          sortable: true,\n        },\n        {\n          label: 'Author',\n          field: 'authorFullName',\n          sortable: true,\n        },\n        {\n          label: 'Pages',\n          field: 'pages',\n          type: 'number',\n          sortable: true,\n        },\n      ],\n    };\n  },\n  mounted() {\n    Api.getBooks()\n        .then((response) => {\n          this.books = response.data.data.map(book => ({\n            ...book,\n            authorFullName: `${book.author.name} ${book.author.surname}`,\n          }));\n        })\n        .catch((error) => {\n          console.error('Failed to fetch books:', error);\n        });\n  },\n};\n</script>\n"],"mappings":";;EACOA,KAAK,EAAC;AAAoC;;;uBAA/CC,mBAAA,CAkBM,OAlBNC,UAkBM,G,0BAjBJC,mBAAA,CAAqD;IAAjDH,KAAK,EAAC;EAAyB,GAAC,cAAY,sBAChDI,YAAA,CAeEC,yBAAA;IAdGC,OAAO,EAAEC,KAAA,CAAAD,OAAO;IAChBE,IAAI,EAAED,KAAA,CAAAE,KAAK;IACX,oBAAkB,EAAE;;;KAGtB;IACE,gBAAc,EAAE;;;KAGlB;IACE,cAAY,EAAE","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}