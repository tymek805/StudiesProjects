{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport { defineComponent, useSlots, computed, createBlock, openBlock, resolveDynamicComponent, unref, normalizeClass, withCtx, createElementVNode, createCommentVNode, renderSlot, createTextVNode, toDisplayString, mergeModels, useModel, useTemplateRef, ref, createElementBlock, normalizeProps, guardReactiveProps, Fragment, renderList, mergeProps } from \"vue\";\nimport { u as useFocus, o as onKeyStroke } from \"./index-cC189kCW.mjs\";\nimport { u as useDefaults } from \"./useDefaults-DANje4tM.mjs\";\nimport { e as escapeRegExpChars } from \"./stringUtils-mwxHpj6j.mjs\";\nimport { u as useId } from \"./useId-BzCLXIGF.mjs\";\nimport { _ as _sfc_main$2 } from \"./BCloseButton.vue_vue_type_script_setup_true_lang-Dh0Odbqa.mjs\";\nimport { u as useColorVariantClasses } from \"./useColorVariantClasses-ZDE19TZw.mjs\";\nimport { u as useStateClass } from \"./useStateClass-BGbSLWFN.mjs\";\nimport { u as useToNumber, s as syncRef } from \"./index-CLgoGrAV.mjs\";\nconst _hoisted_1$1 = [\"id\"];\nconst _sfc_main$1 = /* @__PURE__ */defineComponent({\n  __name: \"BFormTag\",\n  props: {\n    disabled: {\n      type: Boolean,\n      default: false\n    },\n    id: {\n      default: void 0\n    },\n    noRemove: {\n      type: Boolean,\n      default: false\n    },\n    pill: {\n      type: Boolean,\n      default: false\n    },\n    removeLabel: {\n      default: \"Remove tag\"\n    },\n    tag: {\n      default: \"span\"\n    },\n    title: {\n      default: void 0\n    },\n    variant: {\n      default: \"secondary\"\n    }\n  },\n  emits: [\"remove\"],\n  setup(__props, {\n    emit: __emit\n  }) {\n    const _props = __props;\n    const props = useDefaults(_props, \"BFormTag\");\n    const emit = __emit;\n    const slots = useSlots();\n    const computedId = useId(() => props.id);\n    const tagText = computed(() => {\n      var _a;\n      return ((((_a = slots.default) == null ? void 0 : _a.call(slots, {})[0].children) ?? \"\").toString() || props.title) ?? \"\";\n    });\n    const taglabelId = computed(() => `${computedId.value}taglabel__`);\n    const colorClasses = useColorVariantClasses(props);\n    const computedClasses = computed(() => [colorClasses.value, {\n      \"rounded-pill\": props.pill,\n      \"disabled\": props.disabled\n    }]);\n    return (_ctx, _cache) => {\n      return openBlock(), createBlock(resolveDynamicComponent(unref(props).tag), {\n        id: unref(computedId),\n        title: tagText.value,\n        class: normalizeClass([\"badge b-form-tag d-inline-flex align-items-center mw-100\", computedClasses.value]),\n        \"aria-labelledby\": taglabelId.value\n      }, {\n        default: withCtx(() => [createElementVNode(\"span\", {\n          id: taglabelId.value,\n          class: \"b-form-tag-content flex-grow-1 text-truncate\"\n        }, [renderSlot(_ctx.$slots, \"default\", {}, () => [createTextVNode(toDisplayString(tagText.value), 1)])], 8, _hoisted_1$1), !unref(props).disabled && !unref(props).noRemove ? (openBlock(), createBlock(_sfc_main$2, {\n          key: 0,\n          \"aria-keyshortcuts\": \"Delete\",\n          \"aria-label\": unref(props).removeLabel,\n          class: \"b-form-tag-remove\",\n          \"aria-describedby\": taglabelId.value,\n          \"aria-controls\": unref(props).id,\n          onClick: _cache[0] || (_cache[0] = $event => emit(\"remove\", tagText.value))\n        }, null, 8, [\"aria-label\", \"aria-describedby\", \"aria-controls\"])) : createCommentVNode(\"\", true)]),\n        _: 3\n      }, 8, [\"id\", \"title\", \"class\", \"aria-labelledby\"]);\n    };\n  }\n});\nconst _hoisted_1 = [\"id\"];\nconst _hoisted_2 = [\"id\", \"for\", \"aria-live\"];\nconst _hoisted_3 = [\"id\", \"aria-live\"];\nconst _hoisted_4 = [\"id\"];\nconst _hoisted_5 = [\"aria-controls\"];\nconst _hoisted_6 = {\n  role: \"group\",\n  class: \"d-flex\"\n};\nconst _hoisted_7 = [\"id\", \"disabled\", \"value\", \"type\", \"placeholder\", \"form\", \"required\", \"aria-required\"];\nconst _hoisted_8 = [\"disabled\"];\nconst _hoisted_9 = {\n  \"aria-live\": \"polite\",\n  \"aria-atomic\": \"true\"\n};\nconst _hoisted_10 = {\n  key: 0,\n  class: \"d-block invalid-feedback\"\n};\nconst _hoisted_11 = {\n  key: 1,\n  class: \"form-text text-body-secondary\"\n};\nconst _hoisted_12 = {\n  key: 2,\n  class: \"form-text text-body-secondary\"\n};\nconst _hoisted_13 = [\"name\", \"value\"];\nconst _sfc_main = /* @__PURE__ */defineComponent({\n  __name: \"BFormTags\",\n  props: /* @__PURE__ */mergeModels({\n    addButtonText: {\n      default: \"Add\"\n    },\n    addButtonVariant: {\n      default: \"outline-secondary\"\n    },\n    addOnChange: {\n      type: Boolean,\n      default: false\n    },\n    autofocus: {\n      type: Boolean,\n      default: false\n    },\n    disabled: {\n      type: Boolean,\n      default: false\n    },\n    duplicateTagText: {\n      default: \"Duplicate tag(s)\"\n    },\n    form: {\n      default: void 0\n    },\n    inputAttrs: {\n      default: void 0\n    },\n    inputClass: {\n      default: void 0\n    },\n    inputId: {\n      default: void 0\n    },\n    inputType: {\n      default: \"text\"\n    },\n    invalidTagText: {\n      default: \"Invalid tag(s)\"\n    },\n    limit: {\n      default: void 0\n    },\n    limitTagsText: {\n      default: \"Tag limit reached\"\n    },\n    name: {\n      default: void 0\n    },\n    noAddOnEnter: {\n      type: Boolean,\n      default: false\n    },\n    noOuterFocus: {\n      type: Boolean,\n      default: false\n    },\n    noTagRemove: {\n      type: Boolean,\n      default: false\n    },\n    placeholder: {\n      default: \"Add tag...\"\n    },\n    removeOnDelete: {\n      type: Boolean,\n      default: false\n    },\n    required: {\n      type: Boolean,\n      default: false\n    },\n    separator: {\n      default: void 0\n    },\n    size: {\n      default: \"md\"\n    },\n    state: {\n      type: [Boolean, null],\n      default: null\n    },\n    tagClass: {\n      default: void 0\n    },\n    tagPills: {\n      type: Boolean,\n      default: false\n    },\n    tagRemoveLabel: {\n      default: void 0\n    },\n    tagRemovedLabel: {\n      default: \"Tag removed\"\n    },\n    tagValidator: {\n      type: Function,\n      default: () => true\n    },\n    tagVariant: {\n      default: \"secondary\"\n    }\n  }, {\n    \"modelValue\": {\n      default: () => []\n    },\n    \"modelModifiers\": {}\n  }),\n  emits: /* @__PURE__ */mergeModels([\"blur\", \"focus\", \"focusin\", \"focusout\", \"tag-state\"], [\"update:modelValue\"]),\n  setup(__props, {\n    expose: __expose,\n    emit: __emit\n  }) {\n    const _props = __props;\n    const props = useDefaults(_props, \"BFormTags\");\n    const emit = __emit;\n    const modelValue = useModel(__props, \"modelValue\");\n    const computedId = useId();\n    const limitNumber = useToNumber(() => props.limit ?? NaN);\n    const stateClass = useStateClass(() => props.state);\n    const input = useTemplateRef(\"_input\");\n    const {\n      focused\n    } = useFocus(input, {\n      initialValue: props.autofocus\n    });\n    const _inputId = computed(() => props.inputId || `${computedId.value}input__`);\n    const tags = ref([...modelValue.value]);\n    const inputValue = ref(\"\");\n    const shouldRemoveOnDelete = ref(modelValue.value.length > 0);\n    const lastRemovedTag = ref(\"\");\n    const validTags = ref([]);\n    const invalidTags = ref([]);\n    const duplicateTags = ref([]);\n    syncRef(modelValue, tags, {\n      direction: \"ltr\",\n      transform: {\n        ltr: v => [...v]\n      }\n    });\n    const computedClasses = computed(() => [stateClass.value, {\n      [`form-control-${props.size}`]: props.size !== \"md\",\n      disabled: props.disabled,\n      focus: focused.value\n    }]);\n    const isDuplicate = computed(() => tags.value.includes(inputValue.value));\n    const isInvalid = computed(() => inputValue.value === \"\" ? false : !props.tagValidator(inputValue.value));\n    const isLimitReached = computed(() => tags.value.length === limitNumber.value);\n    const disableAddButton = computed(() => !isInvalid.value && !isDuplicate.value);\n    const slotAttrs = computed(() => ({\n      addButtonText: props.addButtonText,\n      addButtonVariant: props.addButtonVariant,\n      addTag,\n      disableAddButton: disableAddButton.value,\n      disabled: props.disabled,\n      duplicateTagText: props.duplicateTagText,\n      duplicateTags: duplicateTags.value,\n      form: props.form,\n      inputAttrs: {\n        ...props.inputAttrs,\n        disabled: props.disabled,\n        form: props.form,\n        id: _inputId.value,\n        value: inputValue.value\n      },\n      inputClass: props.inputClass,\n      inputHandlers: {\n        input: onInput,\n        keydown: onKeydown,\n        change: onChange\n      },\n      inputId: _inputId.value,\n      inputType: props.inputType,\n      invalidTagText: props.invalidTagText,\n      invalidTags: invalidTags.value,\n      isDuplicate: isDuplicate.value,\n      isInvalid: isInvalid.value,\n      isLimitReached: isLimitReached.value,\n      limitTagsText: props.limitTagsText,\n      limit: limitNumber.value,\n      noTagRemove: props.noTagRemove,\n      placeholder: props.placeholder,\n      removeTag,\n      required: props.required,\n      separator: props.separator,\n      size: props.size,\n      state: props.state,\n      tagClass: props.tagClass,\n      tagPills: props.tagPills,\n      tagRemoveLabel: props.tagRemoveLabel,\n      tagVariant: props.tagVariant,\n      tags: tags.value\n    }));\n    const onFocusin = e => {\n      if (props.disabled) {\n        const target = e.target;\n        target.blur();\n        return;\n      }\n      emit(\"focusin\", e);\n    };\n    const onFocus = e => {\n      if (props.disabled || props.noOuterFocus) {\n        return;\n      }\n      focused.value = true;\n      emit(\"focus\", e);\n    };\n    const onBlur = e => {\n      focused.value = false;\n      emit(\"blur\", e);\n    };\n    const onInput = e => {\n      var _a, _b;\n      const value = typeof e === \"string\" ? e : e.target.value;\n      shouldRemoveOnDelete.value = false;\n      if (((_a = props.separator) == null ? void 0 : _a.includes(value.charAt(0))) && value.length > 0) {\n        if (input.value) {\n          input.value.value = \"\";\n        }\n        return;\n      }\n      inputValue.value = value;\n      if ((_b = props.separator) == null ? void 0 : _b.includes(value.charAt(value.length - 1))) {\n        addTag(value.slice(0, value.length - 1));\n        return;\n      }\n      validTags.value = props.tagValidator(value) && !isDuplicate.value ? [value] : [];\n      invalidTags.value = props.tagValidator(value) ? [] : [value];\n      duplicateTags.value = isDuplicate.value ? [value] : [];\n      emit(\"tag-state\", validTags.value, invalidTags.value, duplicateTags.value);\n    };\n    const onChange = e => {\n      if (props.addOnChange) {\n        onInput(e);\n        if (!isDuplicate.value) {\n          addTag(inputValue.value);\n        }\n      }\n    };\n    const onKeydown = e => {\n      if (e.key === \"Enter\" && !props.noAddOnEnter) {\n        addTag(inputValue.value);\n        return;\n      }\n      if ((e.key === \"Backspace\" || e.key === \"Delete\") && props.removeOnDelete && inputValue.value === \"\" && shouldRemoveOnDelete.value && tags.value.length > 0) {\n        removeTag(tags.value[tags.value.length - 1]);\n      } else {\n        shouldRemoveOnDelete.value = true;\n      }\n    };\n    onKeyStroke(onKeydown, {\n      target: input\n    });\n    const separator = computed(() => {\n      if (!props.separator) {\n        return;\n      }\n      return typeof props.separator === \"string\" ? props.separator : props.separator.join(\"\");\n    });\n    const separatorRegExp = computed(() => {\n      if (!separator.value) {\n        return;\n      }\n      return new RegExp(`[${escapeRegExpChars(separator.value)}]+`);\n    });\n    const addTag = tag => {\n      tag = (tag ?? inputValue.value).trim();\n      const newTags = separatorRegExp.value ? tag.split(separatorRegExp.value).map(t => t.trim()) : [tag];\n      const validTags2 = [];\n      for (const newTag of newTags) {\n        if (newTag === \"\" || isDuplicate.value || !props.tagValidator(newTag)) {\n          continue;\n        }\n        if (limitNumber.value && isLimitReached.value) {\n          break;\n        }\n        validTags2.push(newTag);\n      }\n      const newValue = [...modelValue.value, ...validTags2];\n      inputValue.value = \"\";\n      shouldRemoveOnDelete.value = true;\n      modelValue.value = newValue;\n      focused.value = true;\n    };\n    const removeTag = tag => {\n      const tagIndex = tags.value.indexOf((tag == null ? void 0 : tag.toString()) ?? \"\");\n      if (tagIndex === -1) return;\n      lastRemovedTag.value = tags.value.splice(tagIndex, 1).toString();\n      modelValue.value = tags.value;\n    };\n    __expose({\n      blur: () => {\n        focused.value = false;\n      },\n      element: input,\n      focus: () => {\n        focused.value = true;\n      },\n      inputValue\n    });\n    return (_ctx, _cache) => {\n      return openBlock(), createElementBlock(\"div\", {\n        id: unref(computedId),\n        class: normalizeClass([\"b-form-tags form-control h-auto\", computedClasses.value]),\n        role: \"group\",\n        tabindex: \"-1\",\n        onFocusin,\n        onFocusout: _cache[1] || (_cache[1] = $event => emit(\"focusout\", $event))\n      }, [createElementVNode(\"output\", {\n        id: `${unref(computedId)}selected_tags__`,\n        class: \"visually-hidden\",\n        for: _inputId.value,\n        \"aria-live\": unref(focused) ? \"polite\" : \"off\",\n        \"aria-atomic\": \"true\",\n        \"aria-relevant\": \"additions text\"\n      }, toDisplayString(tags.value.join(\", \")), 9, _hoisted_2), createElementVNode(\"div\", {\n        id: `${unref(computedId)}removed_tags__`,\n        role: \"status\",\n        \"aria-live\": unref(focused) ? \"assertive\" : \"off\",\n        \"aria-atomic\": \"true\",\n        class: \"visually-hidden\"\n      }, \" (\" + toDisplayString(unref(props).tagRemovedLabel) + \") \" + toDisplayString(lastRemovedTag.value), 9, _hoisted_3), renderSlot(_ctx.$slots, \"default\", normalizeProps(guardReactiveProps(slotAttrs.value)), () => [createElementVNode(\"ul\", {\n        id: `${unref(computedId)}tag_list__`,\n        class: \"b-form-tags-list list-unstyled mb-0 d-flex flex-wrap align-items-center\"\n      }, [(openBlock(true), createElementBlock(Fragment, null, renderList(tags.value, (tag, index) => {\n        return renderSlot(_ctx.$slots, \"tag\", {\n          key: index,\n          tag,\n          tagClass: unref(props).tagClass,\n          tagVariant: unref(props).tagVariant,\n          tagPills: unref(props).tagPills,\n          removeTag\n        }, () => [(openBlock(), createBlock(_sfc_main$1, {\n          key: tag,\n          class: normalizeClass(unref(props).tagClass),\n          tag: \"li\",\n          variant: unref(props).tagVariant,\n          pill: unref(props).tagPills,\n          onRemove: removeTag\n        }, {\n          default: withCtx(() => [createTextVNode(toDisplayString(tag), 1)]),\n          _: 2\n        }, 1032, [\"class\", \"variant\", \"pill\"]))]);\n      }), 128)), createElementVNode(\"li\", {\n        role: \"none\",\n        \"aria-live\": \"off\",\n        class: \"b-from-tags-field flex-grow-1\",\n        \"aria-controls\": `${unref(computedId)}tag_list__`\n      }, [createElementVNode(\"div\", _hoisted_6, [createElementVNode(\"input\", mergeProps({\n        id: _inputId.value,\n        ref: \"_input\",\n        disabled: unref(props).disabled,\n        value: inputValue.value,\n        type: unref(props).inputType,\n        placeholder: unref(props).placeholder,\n        class: \"b-form-tags-input w-100 flex-grow-1 p-0 m-0 bg-transparent border-0\",\n        style: {\n          \"outline\": \"currentcolor none 0px\",\n          \"min-width\": \"5rem\"\n        }\n      }, unref(props).inputAttrs, {\n        form: unref(props).form,\n        required: unref(props).required || void 0,\n        \"aria-required\": unref(props).required || void 0,\n        onInput,\n        onChange,\n        onFocus,\n        onBlur\n      }), null, 16, _hoisted_7), disableAddButton.value ? (openBlock(), createElementBlock(\"button\", {\n        key: 0,\n        type: \"button\",\n        class: normalizeClass([\"btn b-form-tags-button py-0\", [_ctx.inputClass, {\n          [`btn-${unref(props).addButtonVariant}`]: unref(props).addButtonVariant !== null,\n          \"disabled invisible\": inputValue.value.length === 0\n        }]]),\n        style: {\n          \"font-size\": \"90%\"\n        },\n        disabled: unref(props).disabled || inputValue.value.length === 0 || isLimitReached.value,\n        onClick: _cache[0] || (_cache[0] = $event => addTag(inputValue.value))\n      }, [renderSlot(_ctx.$slots, \"add-button-text\", {}, () => [createTextVNode(toDisplayString(unref(props).addButtonText), 1)])], 10, _hoisted_8)) : createCommentVNode(\"\", true)])], 8, _hoisted_5)], 8, _hoisted_4), createElementVNode(\"div\", _hoisted_9, [isInvalid.value ? (openBlock(), createElementBlock(\"div\", _hoisted_10, toDisplayString(unref(props).invalidTagText) + \": \" + toDisplayString(inputValue.value), 1)) : createCommentVNode(\"\", true), isDuplicate.value ? (openBlock(), createElementBlock(\"small\", _hoisted_11, toDisplayString(unref(props).duplicateTagText) + \": \" + toDisplayString(inputValue.value), 1)) : createCommentVNode(\"\", true), tags.value.length === unref(props).limit ? (openBlock(), createElementBlock(\"small\", _hoisted_12, toDisplayString(unref(props).limitTagsText), 1)) : createCommentVNode(\"\", true)])]), unref(props).name ? (openBlock(true), createElementBlock(Fragment, {\n        key: 0\n      }, renderList(tags.value, (tag, index) => {\n        return openBlock(), createElementBlock(\"input\", {\n          key: index,\n          type: \"hidden\",\n          name: unref(props).name,\n          value: tag\n        }, null, 8, _hoisted_13);\n      }), 128)) : createCommentVNode(\"\", true)], 42, _hoisted_1);\n    };\n  }\n});\nexport { _sfc_main as _, _sfc_main$1 as a };","map":{"version":3,"names":["_props","__props","props","useDefaults","emit","__emit","slots","useSlots","computedId","useId","id","tagText","computed","_a","default","call","children","toString","title","taglabelId","value","colorClasses","useColorVariantClasses","computedClasses","pill","disabled","modelValue","useModel","limitNumber","useToNumber","limit","NaN","stateClass","useStateClass","state","input","useTemplateRef","focused","useFocus","initialValue","autofocus","_inputId","inputId","tags","ref","inputValue","shouldRemoveOnDelete","length","lastRemovedTag","validTags","invalidTags","duplicateTags","syncRef","direction","transform","ltr","v","size","focus","isDuplicate","includes","isInvalid","tagValidator","isLimitReached","disableAddButton","slotAttrs","addButtonText","addButtonVariant","addTag","duplicateTagText","form","inputAttrs","inputClass","inputHandlers","onInput","keydown","onKeydown","change","onChange","inputType","invalidTagText","limitTagsText","noTagRemove","placeholder","removeTag","required","separator","tagClass","tagPills","tagRemoveLabel","tagVariant","onFocusin","e","target","blur","onFocus","noOuterFocus","onBlur","charAt","_b","slice","addOnChange","key","noAddOnEnter","removeOnDelete","onKeyStroke","join","separatorRegExp","RegExp","escapeRegExpChars","tag","trim","newTags","split","map","t","validTags2","newTag","push","newValue","tagIndex","indexOf","splice","__expose","element"],"sources":["../src/components/BFormTags/BFormTag.vue","../src/components/BFormTags/BFormTags.vue"],"sourcesContent":["<template>\n  <component\n    :is=\"props.tag\"\n    :id=\"computedId\"\n    :title=\"tagText\"\n    class=\"badge b-form-tag d-inline-flex align-items-center mw-100\"\n    :class=\"computedClasses\"\n    :aria-labelledby=\"taglabelId\"\n  >\n    <span :id=\"taglabelId\" class=\"b-form-tag-content flex-grow-1 text-truncate\">\n      <slot>{{ tagText }}</slot>\n    </span>\n    <BCloseButton\n      v-if=\"!props.disabled && !props.noRemove\"\n      aria-keyshortcuts=\"Delete\"\n      :aria-label=\"props.removeLabel\"\n      class=\"b-form-tag-remove\"\n      :aria-describedby=\"taglabelId\"\n      :aria-controls=\"props.id\"\n      @click=\"emit('remove', tagText)\"\n    />\n  </component>\n</template>\n\n<script setup lang=\"ts\">\nimport {computed} from 'vue'\nimport {useDefaults} from '../../composables/useDefaults'\nimport {useId} from '../../composables/useId'\nimport type {BFormTagProps} from '../../types/ComponentProps'\nimport BCloseButton from '../BButton/BCloseButton.vue'\nimport {useColorVariantClasses} from '../../composables/useColorVariantClasses'\n\nconst _props = withDefaults(defineProps<BFormTagProps>(), {\n  disabled: false,\n  id: undefined,\n  noRemove: false,\n  pill: false,\n  removeLabel: 'Remove tag',\n  tag: 'span',\n  title: undefined,\n  variant: 'secondary',\n})\nconst props = useDefaults(_props, 'BFormTag')\n\nconst emit = defineEmits<{\n  remove: [value: string]\n}>()\n\nconst slots = defineSlots<{\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  default?: (props: Record<string, never>) => any\n}>()\n\nconst computedId = useId(() => props.id)\n\nconst tagText = computed(\n  () => ((slots.default?.({})[0].children ?? '').toString() || props.title) ?? ''\n)\nconst taglabelId = computed(() => `${computedId.value}taglabel__`)\n\nconst colorClasses = useColorVariantClasses(props)\nconst computedClasses = computed(() => [\n  colorClasses.value,\n  {\n    'rounded-pill': props.pill,\n    'disabled': props.disabled,\n  },\n])\n</script>\n","<template>\n  <div\n    :id=\"computedId\"\n    class=\"b-form-tags form-control h-auto\"\n    :class=\"computedClasses\"\n    role=\"group\"\n    tabindex=\"-1\"\n    @focusin=\"onFocusin\"\n    @focusout=\"emit('focusout', $event)\"\n  >\n    <output\n      :id=\"`${computedId}selected_tags__`\"\n      class=\"visually-hidden\"\n      :for=\"_inputId\"\n      :aria-live=\"focused ? 'polite' : 'off'\"\n      aria-atomic=\"true\"\n      aria-relevant=\"additions text\"\n      >{{ tags.join(', ') }}</output\n    >\n    <div\n      :id=\"`${computedId}removed_tags__`\"\n      role=\"status\"\n      :aria-live=\"focused ? 'assertive' : 'off'\"\n      aria-atomic=\"true\"\n      class=\"visually-hidden\"\n    >\n      ({{ props.tagRemovedLabel }}) {{ lastRemovedTag }}\n    </div>\n\n    <slot v-bind=\"slotAttrs\">\n      <ul\n        :id=\"`${computedId}tag_list__`\"\n        class=\"b-form-tags-list list-unstyled mb-0 d-flex flex-wrap align-items-center\"\n      >\n        <template v-for=\"(tag, index) in tags\" :key=\"index\">\n          <slot\n            name=\"tag\"\n            :tag=\"tag\"\n            :tag-class=\"props.tagClass\"\n            :tag-variant=\"props.tagVariant\"\n            :tag-pills=\"props.tagPills\"\n            :remove-tag=\"removeTag\"\n          >\n            <BFormTag\n              :key=\"tag\"\n              :class=\"props.tagClass\"\n              tag=\"li\"\n              :variant=\"props.tagVariant\"\n              :pill=\"props.tagPills\"\n              @remove=\"removeTag\"\n              >{{ tag }}</BFormTag\n            >\n          </slot>\n        </template>\n        <li\n          role=\"none\"\n          aria-live=\"off\"\n          class=\"b-from-tags-field flex-grow-1\"\n          :aria-controls=\"`${computedId}tag_list__`\"\n        >\n          <div role=\"group\" class=\"d-flex\">\n            <input\n              :id=\"_inputId\"\n              ref=\"_input\"\n              :disabled=\"props.disabled\"\n              :value=\"inputValue\"\n              :type=\"props.inputType\"\n              :placeholder=\"props.placeholder\"\n              class=\"b-form-tags-input w-100 flex-grow-1 p-0 m-0 bg-transparent border-0\"\n              style=\"outline: currentcolor none 0px; min-width: 5rem\"\n              v-bind=\"props.inputAttrs\"\n              :form=\"props.form\"\n              :required=\"props.required || undefined\"\n              :aria-required=\"props.required || undefined\"\n              @input=\"onInput\"\n              @change=\"onChange\"\n              @focus=\"onFocus\"\n              @blur=\"onBlur\"\n            />\n            <button\n              v-if=\"disableAddButton\"\n              type=\"button\"\n              class=\"btn b-form-tags-button py-0\"\n              :class=\"[\n                inputClass,\n                {\n                  [`btn-${props.addButtonVariant}`]: props.addButtonVariant !== null,\n                  'disabled invisible': inputValue.length === 0,\n                },\n              ]\"\n              style=\"font-size: 90%\"\n              :disabled=\"props.disabled || inputValue.length === 0 || isLimitReached\"\n              @click=\"addTag(inputValue)\"\n            >\n              <slot name=\"add-button-text\">{{ props.addButtonText }}</slot>\n            </button>\n          </div>\n        </li>\n      </ul>\n      <div aria-live=\"polite\" aria-atomic=\"true\">\n        <div v-if=\"isInvalid\" class=\"d-block invalid-feedback\">\n          {{ props.invalidTagText }}: {{ inputValue }}\n        </div>\n        <small v-if=\"isDuplicate\" class=\"form-text text-body-secondary\"\n          >{{ props.duplicateTagText }}: {{ inputValue }}</small\n        >\n        <small v-if=\"tags.length === props.limit\" class=\"form-text text-body-secondary\">\n          {{ props.limitTagsText }}</small\n        >\n      </div>\n    </slot>\n    <template v-if=\"props.name\">\n      <input\n        v-for=\"(tag, index) in tags\"\n        :key=\"index\"\n        type=\"hidden\"\n        :name=\"props.name\"\n        :value=\"tag\"\n      />\n    </template>\n  </div>\n</template>\n\n<script setup lang=\"ts\">\nimport {onKeyStroke, syncRef, useFocus, useToNumber} from '@vueuse/core'\nimport {computed, ref, useTemplateRef} from 'vue'\nimport {useDefaults} from '../../composables/useDefaults'\nimport type {BFormTagsProps} from '../../types/ComponentProps'\nimport {escapeRegExpChars} from '../../utils/stringUtils'\nimport BFormTag from './BFormTag.vue'\nimport type {ClassValue} from '../../types/AnyValuedAttributes'\nimport type {ColorVariant} from '../../types/ColorTypes'\nimport {useId} from '../../composables/useId'\nimport {useStateClass} from '../../composables/useStateClass'\n\nconst _props = withDefaults(defineProps<Omit<BFormTagsProps, 'modelValue'>>(), {\n  addButtonText: 'Add',\n  addButtonVariant: 'outline-secondary',\n  addOnChange: false,\n  autofocus: false,\n  disabled: false,\n  duplicateTagText: 'Duplicate tag(s)',\n  form: undefined,\n  inputAttrs: undefined,\n  inputClass: undefined,\n  inputId: undefined,\n  inputType: 'text',\n  invalidTagText: 'Invalid tag(s)',\n  limit: undefined,\n  limitTagsText: 'Tag limit reached',\n  name: undefined,\n  noAddOnEnter: false,\n  noOuterFocus: false,\n  noTagRemove: false,\n  placeholder: 'Add tag...',\n  removeOnDelete: false,\n  required: false,\n  separator: undefined,\n  size: 'md',\n  state: null,\n  tagClass: undefined,\n  tagPills: false,\n  tagRemoveLabel: undefined,\n  tagRemovedLabel: 'Tag removed',\n  tagValidator: () => true,\n  tagVariant: 'secondary',\n})\nconst props = useDefaults(_props, 'BFormTags')\n\nconst emit = defineEmits<{\n  'blur': [value: FocusEvent]\n  'focus': [value: FocusEvent]\n  'focusin': [value: FocusEvent]\n  'focusout': [value: FocusEvent]\n  'tag-state': [...args: string[][]]\n}>()\n\ndefineSlots<{\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  'add-button-text'?: (props: Record<string, never>) => any\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  'default'?: (props: typeof slotAttrs.value) => any\n  'tag'?: (props: {\n    tag: string\n    tagClass: ClassValue\n    tagVariant: ColorVariant | null\n    tagPills: boolean\n    removeTag: (tag?: string) => void\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  }) => any\n}>()\n\nconst modelValue = defineModel<Exclude<BFormTagsProps['modelValue'], undefined>>({\n  default: () => [],\n})\n\nconst computedId = useId()\n\nconst limitNumber = useToNumber(() => props.limit ?? NaN)\n\nconst stateClass = useStateClass(() => props.state)\n\nconst input = useTemplateRef<HTMLInputElement>('_input')\n\nconst {focused} = useFocus(input, {\n  initialValue: props.autofocus,\n})\n\nconst _inputId = computed(() => props.inputId || `${computedId.value}input__`)\nconst tags = ref<string[]>([...modelValue.value])\nconst inputValue = ref<string>('')\nconst shouldRemoveOnDelete = ref<boolean>(modelValue.value.length > 0)\nconst lastRemovedTag = ref<string>('')\nconst validTags = ref<string[]>([])\nconst invalidTags = ref<string[]>([])\nconst duplicateTags = ref<string[]>([])\n\nsyncRef(modelValue, tags, {\n  direction: 'ltr',\n  transform: {\n    ltr: (v) => [...v],\n  },\n})\n\nconst computedClasses = computed(() => [\n  stateClass.value,\n  {\n    [`form-control-${props.size}`]: props.size !== 'md',\n    disabled: props.disabled,\n    focus: focused.value,\n  },\n])\n\nconst isDuplicate = computed(() => tags.value.includes(inputValue.value))\nconst isInvalid = computed(() =>\n  inputValue.value === '' ? false : !props.tagValidator(inputValue.value)\n)\nconst isLimitReached = computed(() => tags.value.length === limitNumber.value)\nconst disableAddButton = computed(() => !isInvalid.value && !isDuplicate.value)\n\nconst slotAttrs = computed(() => ({\n  addButtonText: props.addButtonText,\n  addButtonVariant: props.addButtonVariant,\n  addTag,\n  disableAddButton: disableAddButton.value,\n  disabled: props.disabled,\n  duplicateTagText: props.duplicateTagText,\n  duplicateTags: duplicateTags.value,\n  form: props.form,\n  inputAttrs: {\n    ...props.inputAttrs,\n    disabled: props.disabled,\n    form: props.form,\n    id: _inputId.value,\n    value: inputValue.value,\n  },\n  inputClass: props.inputClass,\n  inputHandlers: {\n    input: onInput,\n    keydown: onKeydown,\n    change: onChange,\n  },\n  inputId: _inputId.value,\n  inputType: props.inputType,\n  invalidTagText: props.invalidTagText,\n  invalidTags: invalidTags.value,\n  isDuplicate: isDuplicate.value,\n  isInvalid: isInvalid.value,\n  isLimitReached: isLimitReached.value,\n  limitTagsText: props.limitTagsText,\n  limit: limitNumber.value,\n  noTagRemove: props.noTagRemove,\n  placeholder: props.placeholder,\n  removeTag,\n  required: props.required,\n  separator: props.separator,\n  size: props.size,\n  state: props.state,\n  tagClass: props.tagClass,\n  tagPills: props.tagPills,\n  tagRemoveLabel: props.tagRemoveLabel,\n  tagVariant: props.tagVariant,\n  tags: tags.value,\n}))\n\nconst onFocusin = (e: Readonly<FocusEvent>): void => {\n  if (props.disabled) {\n    const target = e.target as HTMLDivElement\n    target.blur()\n    return\n  }\n\n  emit('focusin', e)\n}\n\nconst onFocus = (e: Readonly<FocusEvent>): void => {\n  if (props.disabled || props.noOuterFocus) {\n    return\n  }\n\n  focused.value = true\n  emit('focus', e)\n}\n\nconst onBlur = (e: Readonly<FocusEvent>): void => {\n  focused.value = false\n  emit('blur', e)\n}\n\nconst onInput = (e: Readonly<Event> | string): void => {\n  const value = typeof e === 'string' ? e : (e.target as HTMLInputElement).value\n\n  shouldRemoveOnDelete.value = false\n\n  if (props.separator?.includes(value.charAt(0)) && value.length > 0) {\n    if (input.value) {\n      input.value.value = ''\n    }\n    return\n  }\n\n  inputValue.value = value\n\n  if (props.separator?.includes(value.charAt(value.length - 1))) {\n    addTag(value.slice(0, value.length - 1))\n    return\n  }\n\n  validTags.value = props.tagValidator(value) && !isDuplicate.value ? [value] : []\n  invalidTags.value = props.tagValidator(value) ? [] : [value]\n  duplicateTags.value = isDuplicate.value ? [value] : []\n\n  emit('tag-state', validTags.value, invalidTags.value, duplicateTags.value)\n}\n\nconst onChange = (e: Readonly<Event>): void => {\n  if (props.addOnChange) {\n    onInput(e)\n\n    if (!isDuplicate.value) {\n      addTag(inputValue.value)\n    }\n  }\n}\n\nconst onKeydown = (e: Readonly<KeyboardEvent>): void => {\n  if (e.key === 'Enter' && !props.noAddOnEnter) {\n    addTag(inputValue.value)\n    return\n  }\n\n  if (\n    (e.key === 'Backspace' || e.key === 'Delete') &&\n    props.removeOnDelete &&\n    inputValue.value === '' &&\n    shouldRemoveOnDelete.value &&\n    tags.value.length > 0\n  ) {\n    removeTag(tags.value[tags.value.length - 1])\n  } else {\n    shouldRemoveOnDelete.value = true\n  }\n}\n\nonKeyStroke(onKeydown, {target: input})\n\nconst separator = computed(() => {\n  if (!props.separator) {\n    return\n  }\n\n  return typeof props.separator === 'string' ? props.separator : props.separator.join('')\n})\n\nconst separatorRegExp = computed(() => {\n  if (!separator.value) {\n    return\n  }\n\n  return new RegExp(`[${escapeRegExpChars(separator.value)}]+`)\n})\n\nconst addTag = (tag?: string): void => {\n  tag = (tag ?? inputValue.value).trim()\n\n  const newTags = separatorRegExp.value\n    ? tag.split(separatorRegExp.value).map((t) => t.trim())\n    : [tag]\n  const validTags: string[] = []\n\n  for (const newTag of newTags) {\n    if (newTag === '' || isDuplicate.value || !props.tagValidator(newTag)) {\n      continue\n    }\n\n    if (limitNumber.value && isLimitReached.value) {\n      break\n    }\n\n    validTags.push(newTag)\n  }\n\n  const newValue = [...modelValue.value, ...validTags]\n  inputValue.value = ''\n  shouldRemoveOnDelete.value = true\n  modelValue.value = newValue\n  focused.value = true\n}\n\nconst removeTag = (tag?: string): void => {\n  const tagIndex = tags.value.indexOf(tag?.toString() ?? '')\n  if (tagIndex === -1) return\n  lastRemovedTag.value = tags.value.splice(tagIndex, 1).toString()\n  modelValue.value = tags.value\n}\n\ndefineExpose({\n  blur: () => {\n    focused.value = false\n  },\n  element: input,\n  focus: () => {\n    focused.value = true\n  },\n  inputValue,\n})\n</script>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}