{"ast":null,"code":"import { ref, computed, readonly } from \"vue\";\nimport { a as modalManagerPluginKey } from \"../../../keys-D3gOZjD-.mjs\";\nconst modalManagerPlugin = {\n  install(app) {\n    const stack = ref(/* @__PURE__ */new Map());\n    const countStack = computed(() => stack.value.size);\n    const valuesStack = computed(() => [...stack.value.values()]);\n    const lastStack = computed(() => valuesStack.value[valuesStack.value.length - 1]);\n    const pushStack = modal => {\n      stack.value.set(modal.uid, modal);\n    };\n    const removeStack = modal => {\n      stack.value.delete(modal.uid);\n    };\n    const registry = ref(/* @__PURE__ */new Map());\n    const pushRegistry = modal => {\n      registry.value.set(modal.uid, modal);\n    };\n    const removeRegistry = modal => {\n      registry.value.delete(modal.uid);\n    };\n    app.provide(modalManagerPluginKey, {\n      countStack,\n      lastStack,\n      // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n      // @ts-ignore\n      registry: readonly(registry),\n      stack: valuesStack,\n      pushStack,\n      removeStack,\n      pushRegistry,\n      removeRegistry\n    });\n  }\n};\nexport { modalManagerPlugin };","map":{"version":3,"names":["modalManagerPlugin","install","app","stack","ref","Map","countStack","computed","value","size","valuesStack","values","lastStack","length","pushStack","modal","set","uid","removeStack","delete","registry","pushRegistry","removeRegistry","provide","modalManagerPluginKey","readonly"],"sources":["../../../../src/plugins/modalManager/index.ts"],"sourcesContent":["import {type ComponentInternalInstance, computed, type Plugin, readonly, type Ref, ref} from 'vue'\nimport {modalManagerPluginKey} from '../../utils/keys'\n\nexport const modalManagerPlugin: Plugin = {\n  install(app) {\n    /**\n     * A collection of all currently active modals\n     *\n     * It was made into a map so that if a modal is ever added into the stack twice, it will not be duplicated\n     * (if modelValue is true when started, it gets added in setup scope, then a watcher is triggered and it gets added again in the next tick)\n     * Didn't feel like fixing it in the modal component, so I just made it a map\n     */\n    const stack: Ref<Map<number, ComponentInternalInstance>> = ref(new Map())\n\n    const countStack = computed(() => stack.value.size)\n    const valuesStack = computed(() => [...stack.value.values()])\n    const lastStack = computed(() => valuesStack.value[valuesStack.value.length - 1])\n\n    const pushStack = (modal: Readonly<ComponentInternalInstance>) => {\n      stack.value.set(modal.uid, modal)\n    }\n    const removeStack = (modal: Readonly<ComponentInternalInstance>) => {\n      stack.value.delete(modal.uid)\n    }\n\n    /**\n     * A collection of all registered modals\n     */\n    const registry: Ref<Map<number, ComponentInternalInstance>> = ref(new Map())\n\n    // Utility getters not made, would not be used (count, last)\n\n    const pushRegistry = (modal: Readonly<ComponentInternalInstance>) => {\n      registry.value.set(modal.uid, modal)\n    }\n    const removeRegistry = (modal: Readonly<ComponentInternalInstance>) => {\n      registry.value.delete(modal.uid)\n    }\n\n    app.provide(modalManagerPluginKey, {\n      countStack,\n      lastStack,\n      // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n      // @ts-ignore\n      registry: readonly(registry) as Readonly<Ref<Map<number, ComponentInternalInstance>>>,\n      stack: valuesStack,\n      pushStack,\n      removeStack,\n      pushRegistry,\n      removeRegistry,\n    })\n  },\n}\n"],"mappings":";;AAGO,MAAMA,kBAAA,GAA6B;EACxCC,QAAQC,GAAA,EAAK;IAQX,MAAMC,KAAA,GAAqDC,GAAA,CAAQ,mBAAAC,GAAA,EAAK;IAExE,MAAMC,UAAA,GAAaC,QAAA,CAAS,MAAMJ,KAAA,CAAMK,KAAA,CAAMC,IAAI;IAC5C,MAAAC,WAAA,GAAcH,QAAA,CAAS,MAAM,CAAC,GAAGJ,KAAA,CAAMK,KAAA,CAAMG,MAAA,CAAO,CAAC,CAAC;IACtD,MAAAC,SAAA,GAAYL,QAAA,CAAS,MAAMG,WAAA,CAAYF,KAAA,CAAME,WAAA,CAAYF,KAAA,CAAMK,MAAA,GAAS,CAAC,CAAC;IAE1E,MAAAC,SAAA,GAAaC,KAAA,IAA+C;MAChEZ,KAAA,CAAMK,KAAA,CAAMQ,GAAA,CAAID,KAAA,CAAME,GAAA,EAAKF,KAAK;IAClC;IACM,MAAAG,WAAA,GAAeH,KAAA,IAA+C;MAC5DZ,KAAA,CAAAK,KAAA,CAAMW,MAAA,CAAOJ,KAAA,CAAME,GAAG;IAC9B;IAKA,MAAMG,QAAA,GAAwDhB,GAAA,CAAQ,mBAAAC,GAAA,EAAK;IAIrE,MAAAgB,YAAA,GAAgBN,KAAA,IAA+C;MACnEK,QAAA,CAASZ,KAAA,CAAMQ,GAAA,CAAID,KAAA,CAAME,GAAA,EAAKF,KAAK;IACrC;IACM,MAAAO,cAAA,GAAkBP,KAAA,IAA+C;MAC5DK,QAAA,CAAAZ,KAAA,CAAMW,MAAA,CAAOJ,KAAA,CAAME,GAAG;IACjC;IAEAf,GAAA,CAAIqB,OAAA,CAAQC,qBAAA,EAAuB;MACjClB,UAAA;MACAM,SAAA;MAAA;MAAA;MAGAQ,QAAA,EAAUK,QAAA,CAASL,QAAQ;MAC3BjB,KAAA,EAAOO,WAAA;MACPI,SAAA;MACAI,WAAA;MACAG,YAAA;MACAC;IAAA,CACD;EAAA;AAEL","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}